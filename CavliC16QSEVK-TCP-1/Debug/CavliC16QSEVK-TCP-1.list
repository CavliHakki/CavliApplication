
CavliC16QSEVK-TCP-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f40  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e0  080062e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e8  080062e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080062f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  2000005c  0800634c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800634c  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d203  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002311  00000000  00000000  0002d2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d8  00000000  00000000  00030018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018242  00000000  00000000  000307f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d140  00000000  00000000  00048a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096f9b  00000000  00000000  00055b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000286c  00000000  00000000  000ecb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ef37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005fe4 	.word	0x08005fe4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08005fe4 	.word	0x08005fe4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <PowerKeyControl>:
#include "C16QS.h"

Step_e StepStatus = step_pwrkey;
uint8_t SessionID = 0;

void PowerKeyControl(Status_e sts) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	701a      	strb	r2, [r3, #0]
	if (sts == On) {
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d106      	bne.n	8000662 <PowerKeyControl+0x22>
		HAL_GPIO_WritePin(PowerKey_GPIO_Port, PowerKey_Pin, GPIO_PIN_SET);
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <PowerKeyControl+0x38>)
 8000656:	2201      	movs	r2, #1
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0018      	movs	r0, r3
 800065c:	f001 ffe6 	bl	800262c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(PowerKey_GPIO_Port, PowerKey_Pin, GPIO_PIN_RESET);
	}
}
 8000660:	e005      	b.n	800066e <PowerKeyControl+0x2e>
		HAL_GPIO_WritePin(PowerKey_GPIO_Port, PowerKey_Pin, GPIO_PIN_RESET);
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <PowerKeyControl+0x38>)
 8000664:	2200      	movs	r2, #0
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	0018      	movs	r0, r3
 800066a:	f001 ffdf 	bl	800262c <HAL_GPIO_WritePin>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	50000800 	.word	0x50000800

0800067c <PowerKeyFunction>:

void PowerKeyFunction(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	PowerKeyControl(On);
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ffdd 	bl	8000640 <PowerKeyControl>
	HAL_Delay(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f001 fc88 	bl	8001f9c <HAL_Delay>
	PowerKeyControl(Off);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ffd7 	bl	8000640 <PowerKeyControl>
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <RstKeyControl>:

void RstKeyControl(Status_e sts) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	0002      	movs	r2, r0
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	701a      	strb	r2, [r3, #0]
	if (sts == On) {
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <RstKeyControl+0x26>
		HAL_GPIO_WritePin(RstKey_GPIO_Port, RstKey_Pin, GPIO_PIN_SET);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	0059      	lsls	r1, r3, #1
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2201      	movs	r2, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 ffb8 	bl	800262c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(RstKey_GPIO_Port, RstKey_Pin, GPIO_PIN_RESET);
	}
}
 80006bc:	e007      	b.n	80006ce <RstKeyControl+0x36>
		HAL_GPIO_WritePin(RstKey_GPIO_Port, RstKey_Pin, GPIO_PIN_RESET);
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	0059      	lsls	r1, r3, #1
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 ffaf 	bl	800262c <HAL_GPIO_WritePin>
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <ResetKeyFunction>:

void ResetKeyFunction(void) {
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
	RstKeyControl(On);
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ffdc 	bl	8000698 <RstKeyControl>
	HAL_Delay(100);
 80006e0:	2064      	movs	r0, #100	; 0x64
 80006e2:	f001 fc5b 	bl	8001f9c <HAL_Delay>
	RstKeyControl(Off);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ffd6 	bl	8000698 <RstKeyControl>
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <Echo_Disable>:

void Echo_Disable(void) {
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
	char buf[20];
	uint16_t size = 0;
 80006fa:	2416      	movs	r4, #22
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	801a      	strh	r2, [r3, #0]
	sprintf(buf, "ATE0\r\n");
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <Echo_Disable+0x48>)
 8000704:	003b      	movs	r3, r7
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f004 ffb3 	bl	8005674 <siprintf>
	size = strlen(buf);
 800070e:	003b      	movs	r3, r7
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff fcf7 	bl	8000104 <strlen>
 8000716:	0002      	movs	r2, r0
 8000718:	193b      	adds	r3, r7, r4
 800071a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	881a      	ldrh	r2, [r3, #0]
 8000720:	0039      	movs	r1, r7
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <Echo_Disable+0x4c>)
 8000724:	230a      	movs	r3, #10
 8000726:	f002 febd 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 800072a:	23fa      	movs	r3, #250	; 0xfa
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	0018      	movs	r0, r3
 8000730:	f001 fc34 	bl	8001f9c <HAL_Delay>
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b007      	add	sp, #28
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	08005ffc 	.word	0x08005ffc
 8000740:	20000884 	.word	0x20000884

08000744 <Clear_Buffer>:

void Clear_Buffer(char *buf, uint16_t len) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	000a      	movs	r2, r1
 800074e:	1cbb      	adds	r3, r7, #2
 8000750:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000752:	210e      	movs	r1, #14
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	801a      	strh	r2, [r3, #0]
 8000760:	e00b      	b.n	800077a <Clear_Buffer+0x36>
		buf[i] = 0;
 8000762:	210e      	movs	r1, #14
 8000764:	187b      	adds	r3, r7, r1
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	18d3      	adds	r3, r2, r3
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 8000770:	187b      	adds	r3, r7, r1
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	187b      	adds	r3, r7, r1
 8000776:	3201      	adds	r2, #1
 8000778:	801a      	strh	r2, [r3, #0]
 800077a:	230e      	movs	r3, #14
 800077c:	18fa      	adds	r2, r7, r3
 800077e:	1cbb      	adds	r3, r7, #2
 8000780:	8812      	ldrh	r2, [r2, #0]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ec      	bcc.n	8000762 <Clear_Buffer+0x1e>
	}
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b004      	add	sp, #16
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <Alive_Control>:

ErrorStatus Alive_Control(void) {
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	b08d      	sub	sp, #52	; 0x34
 8000798:	af00      	add	r7, sp, #0
	char buf[20];
	char rxBuf[20];
	uint8_t i = 0;
 800079a:	262f      	movs	r6, #47	; 0x2f
 800079c:	19bb      	adds	r3, r7, r6
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 80007a2:	242c      	movs	r4, #44	; 0x2c
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 20);
 80007aa:	2518      	movs	r5, #24
 80007ac:	197b      	adds	r3, r7, r5
 80007ae:	2114      	movs	r1, #20
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff ffc7 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 20);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2114      	movs	r1, #20
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff ffc2 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT\r\n");
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <Alive_Control+0xc8>)
 80007c2:	197b      	adds	r3, r7, r5
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f004 ff54 	bl	8005674 <siprintf>
	size = strlen(buf);
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fc98 	bl	8000104 <strlen>
 80007d4:	0002      	movs	r2, r0
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	801a      	strh	r2, [r3, #0]
	C16QS_Serial_Flush_Queue(&C16QS_Buf);
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <Alive_Control+0xcc>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f8a9 	bl	8001934 <C16QS_Serial_Flush_Queue>
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	881a      	ldrh	r2, [r3, #0]
 80007e6:	1979      	adds	r1, r7, r5
 80007e8:	481e      	ldr	r0, [pc, #120]	; (8000864 <Alive_Control+0xd0>)
 80007ea:	230a      	movs	r3, #10
 80007ec:	f002 fe5a 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 80007f0:	23fa      	movs	r3, #250	; 0xfa
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fbd1 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 80007fa:	193c      	adds	r4, r7, r4
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <Alive_Control+0xcc>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 f8a6 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000804:	0003      	movs	r3, r0
 8000806:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8000808:	19bb      	adds	r3, r7, r6
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	e00d      	b.n	800082c <Alive_Control+0x98>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000810:	252f      	movs	r5, #47	; 0x2f
 8000812:	197b      	adds	r3, r7, r5
 8000814:	781c      	ldrb	r4, [r3, #0]
 8000816:	f001 f8c1 	bl	800199c <C16QS_Get_Data_Byte>
 800081a:	0003      	movs	r3, r0
 800081c:	001a      	movs	r2, r3
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000822:	197b      	adds	r3, r7, r5
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	197b      	adds	r3, r7, r5
 8000828:	3201      	adds	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	232f      	movs	r3, #47	; 0x2f
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b29b      	uxth	r3, r3
 8000834:	222c      	movs	r2, #44	; 0x2c
 8000836:	18ba      	adds	r2, r7, r2
 8000838:	8812      	ldrh	r2, [r2, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	d8e8      	bhi.n	8000810 <Alive_Control+0x7c>
	}

	if (Control_OK_Message(rxBuf) == ERROR)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	0018      	movs	r0, r3
 8000842:	f000 f811 	bl	8000868 <Control_OK_Message>
 8000846:	0003      	movs	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d101      	bne.n	8000850 <Alive_Control+0xbc>
		return ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e000      	b.n	8000852 <Alive_Control+0xbe>

	return SUCCESS;
 8000850:	2300      	movs	r3, #0
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b00d      	add	sp, #52	; 0x34
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	08006004 	.word	0x08006004
 8000860:	2000007c 	.word	0x2000007c
 8000864:	20000884 	.word	0x20000884

08000868 <Control_OK_Message>:

ErrorStatus Control_OK_Message(char *buf) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	int result = -1;
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\nOK\r\n", strlen("\r\nOK\r\n"));
 8000876:	4909      	ldr	r1, [pc, #36]	; (800089c <Control_OK_Message+0x34>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2206      	movs	r2, #6
 800087c:	0018      	movs	r0, r3
 800087e:	f004 ff21 	bl	80056c4 <strncmp>
 8000882:	0003      	movs	r3, r0
 8000884:	60fb      	str	r3, [r7, #12]
	if (result == 0)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <Control_OK_Message+0x28>
		return SUCCESS;
 800088c:	2300      	movs	r3, #0
 800088e:	e000      	b.n	8000892 <Control_OK_Message+0x2a>

	return ERROR;
 8000890:	2301      	movs	r3, #1
}
 8000892:	0018      	movs	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	b004      	add	sp, #16
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	0800600c 	.word	0x0800600c

080008a0 <Modul_Function_Control>:

ErrorStatus Modul_Function_Control(void) {
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	b095      	sub	sp, #84	; 0x54
 80008a4:	af00      	add	r7, sp, #0
	char buf[20];
	char rxBuf[50];
	uint8_t i = 0;
 80008a6:	264f      	movs	r6, #79	; 0x4f
 80008a8:	19bb      	adds	r3, r7, r6
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 80008ae:	244c      	movs	r4, #76	; 0x4c
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 20);
 80008b6:	2538      	movs	r5, #56	; 0x38
 80008b8:	197b      	adds	r3, r7, r5
 80008ba:	2114      	movs	r1, #20
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff41 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 50);
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2132      	movs	r1, #50	; 0x32
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff ff3c 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CFUN?\r\n");
 80008cc:	4a24      	ldr	r2, [pc, #144]	; (8000960 <Modul_Function_Control+0xc0>)
 80008ce:	197b      	adds	r3, r7, r5
 80008d0:	0011      	movs	r1, r2
 80008d2:	0018      	movs	r0, r3
 80008d4:	f004 fece 	bl	8005674 <siprintf>
	size = strlen(buf);
 80008d8:	197b      	adds	r3, r7, r5
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fc12 	bl	8000104 <strlen>
 80008e0:	0002      	movs	r2, r0
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	881a      	ldrh	r2, [r3, #0]
 80008ea:	1979      	adds	r1, r7, r5
 80008ec:	481d      	ldr	r0, [pc, #116]	; (8000964 <Modul_Function_Control+0xc4>)
 80008ee:	230a      	movs	r3, #10
 80008f0:	f002 fdd8 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 80008f4:	23fa      	movs	r3, #250	; 0xfa
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fb4f 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 80008fe:	193c      	adds	r4, r7, r4
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <Modul_Function_Control+0xc8>)
 8000902:	0018      	movs	r0, r3
 8000904:	f001 f824 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000908:	0003      	movs	r3, r0
 800090a:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 800090c:	19bb      	adds	r3, r7, r6
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	e00d      	b.n	8000930 <Modul_Function_Control+0x90>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000914:	254f      	movs	r5, #79	; 0x4f
 8000916:	197b      	adds	r3, r7, r5
 8000918:	781c      	ldrb	r4, [r3, #0]
 800091a:	f001 f83f 	bl	800199c <C16QS_Get_Data_Byte>
 800091e:	0003      	movs	r3, r0
 8000920:	001a      	movs	r2, r3
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000926:	197b      	adds	r3, r7, r5
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	197b      	adds	r3, r7, r5
 800092c:	3201      	adds	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	234f      	movs	r3, #79	; 0x4f
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b29b      	uxth	r3, r3
 8000938:	224c      	movs	r2, #76	; 0x4c
 800093a:	18ba      	adds	r2, r7, r2
 800093c:	8812      	ldrh	r2, [r2, #0]
 800093e:	429a      	cmp	r2, r3
 8000940:	d8e8      	bhi.n	8000914 <Modul_Function_Control+0x74>
	}

	if (Control_FunctionEnable_Message(rxBuf) == ERROR)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	0018      	movs	r0, r3
 8000946:	f000 f811 	bl	800096c <Control_FunctionEnable_Message>
 800094a:	0003      	movs	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d101      	bne.n	8000954 <Modul_Function_Control+0xb4>
		return ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e000      	b.n	8000956 <Modul_Function_Control+0xb6>

	return SUCCESS;
 8000954:	2300      	movs	r3, #0
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b015      	add	sp, #84	; 0x54
 800095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	08006014 	.word	0x08006014
 8000964:	20000884 	.word	0x20000884
 8000968:	2000007c 	.word	0x2000007c

0800096c <Control_FunctionEnable_Message>:

ErrorStatus Control_FunctionEnable_Message(char *buf) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	int result = -1;
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n+CFUN:1\r\n\r\nOK\r\n",
 800097a:	4909      	ldr	r1, [pc, #36]	; (80009a0 <Control_FunctionEnable_Message+0x34>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2211      	movs	r2, #17
 8000980:	0018      	movs	r0, r3
 8000982:	f004 fe9f 	bl	80056c4 <strncmp>
 8000986:	0003      	movs	r3, r0
 8000988:	60fb      	str	r3, [r7, #12]
			strlen("\r\n+CFUN:1\r\n\r\nOK\r\n"));
	if (result == 0)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <Control_FunctionEnable_Message+0x28>
		return SUCCESS;
 8000990:	2300      	movs	r3, #0
 8000992:	e000      	b.n	8000996 <Control_FunctionEnable_Message+0x2a>

	return ERROR;
 8000994:	2301      	movs	r3, #1
}
 8000996:	0018      	movs	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	b004      	add	sp, #16
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	08006020 	.word	0x08006020

080009a4 <Modul_Function_Enable>:

ErrorStatus Modul_Function_Enable(void) {
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	b095      	sub	sp, #84	; 0x54
 80009a8:	af00      	add	r7, sp, #0
	char buf[20];
	char rxBuf[50];
	uint8_t i = 0;
 80009aa:	264f      	movs	r6, #79	; 0x4f
 80009ac:	19bb      	adds	r3, r7, r6
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 80009b2:	244c      	movs	r4, #76	; 0x4c
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 20);
 80009ba:	2538      	movs	r5, #56	; 0x38
 80009bc:	197b      	adds	r3, r7, r5
 80009be:	2114      	movs	r1, #20
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff febf 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 50);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2132      	movs	r1, #50	; 0x32
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff feba 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CFUN=1\r\n");
 80009d0:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <Modul_Function_Enable+0xc0>)
 80009d2:	197b      	adds	r3, r7, r5
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f004 fe4c 	bl	8005674 <siprintf>
	size = strlen(buf);
 80009dc:	197b      	adds	r3, r7, r5
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fb90 	bl	8000104 <strlen>
 80009e4:	0002      	movs	r2, r0
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	881a      	ldrh	r2, [r3, #0]
 80009ee:	1979      	adds	r1, r7, r5
 80009f0:	481d      	ldr	r0, [pc, #116]	; (8000a68 <Modul_Function_Enable+0xc4>)
 80009f2:	230a      	movs	r3, #10
 80009f4:	f002 fd56 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 80009f8:	23fa      	movs	r3, #250	; 0xfa
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 facd 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8000a02:	193c      	adds	r4, r7, r4
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <Modul_Function_Enable+0xc8>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 ffa2 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8000a10:	19bb      	adds	r3, r7, r6
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e00d      	b.n	8000a34 <Modul_Function_Enable+0x90>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000a18:	254f      	movs	r5, #79	; 0x4f
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781c      	ldrb	r4, [r3, #0]
 8000a1e:	f000 ffbd 	bl	800199c <C16QS_Get_Data_Byte>
 8000a22:	0003      	movs	r3, r0
 8000a24:	001a      	movs	r2, r3
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000a2a:	197b      	adds	r3, r7, r5
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	197b      	adds	r3, r7, r5
 8000a30:	3201      	adds	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	234f      	movs	r3, #79	; 0x4f
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	224c      	movs	r2, #76	; 0x4c
 8000a3e:	18ba      	adds	r2, r7, r2
 8000a40:	8812      	ldrh	r2, [r2, #0]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d8e8      	bhi.n	8000a18 <Modul_Function_Enable+0x74>
	}

	if (Control_OK_Message(rxBuf) == ERROR)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff0d 	bl	8000868 <Control_OK_Message>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d101      	bne.n	8000a58 <Modul_Function_Enable+0xb4>
		return ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e000      	b.n	8000a5a <Modul_Function_Enable+0xb6>

	return SUCCESS;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b015      	add	sp, #84	; 0x54
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	08006034 	.word	0x08006034
 8000a68:	20000884 	.word	0x20000884
 8000a6c:	2000007c 	.word	0x2000007c

08000a70 <Network_Register_Control>:

ErrorStatus Network_Register_Control(void) {
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	b095      	sub	sp, #84	; 0x54
 8000a74:	af00      	add	r7, sp, #0
	char buf[20];
	char rxBuf[50];
	uint8_t i = 0;
 8000a76:	264f      	movs	r6, #79	; 0x4f
 8000a78:	19bb      	adds	r3, r7, r6
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8000a7e:	244c      	movs	r4, #76	; 0x4c
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 20);
 8000a86:	2538      	movs	r5, #56	; 0x38
 8000a88:	197b      	adds	r3, r7, r5
 8000a8a:	2114      	movs	r1, #20
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff fe59 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 50);
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2132      	movs	r1, #50	; 0x32
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff fe54 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CEREG?\r\n");
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <Network_Register_Control+0xc0>)
 8000a9e:	197b      	adds	r3, r7, r5
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f004 fde6 	bl	8005674 <siprintf>
	size = strlen(buf);
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fb2a 	bl	8000104 <strlen>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	881a      	ldrh	r2, [r3, #0]
 8000aba:	1979      	adds	r1, r7, r5
 8000abc:	481d      	ldr	r0, [pc, #116]	; (8000b34 <Network_Register_Control+0xc4>)
 8000abe:	230a      	movs	r3, #10
 8000ac0:	f002 fcf0 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ac4:	23fa      	movs	r3, #250	; 0xfa
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 fa67 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <Network_Register_Control+0xc8>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ff3c 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8000adc:	19bb      	adds	r3, r7, r6
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e00d      	b.n	8000b00 <Network_Register_Control+0x90>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000ae4:	254f      	movs	r5, #79	; 0x4f
 8000ae6:	197b      	adds	r3, r7, r5
 8000ae8:	781c      	ldrb	r4, [r3, #0]
 8000aea:	f000 ff57 	bl	800199c <C16QS_Get_Data_Byte>
 8000aee:	0003      	movs	r3, r0
 8000af0:	001a      	movs	r2, r3
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000af6:	197b      	adds	r3, r7, r5
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	197b      	adds	r3, r7, r5
 8000afc:	3201      	adds	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	234f      	movs	r3, #79	; 0x4f
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	224c      	movs	r2, #76	; 0x4c
 8000b0a:	18ba      	adds	r2, r7, r2
 8000b0c:	8812      	ldrh	r2, [r2, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d8e8      	bhi.n	8000ae4 <Network_Register_Control+0x74>
	}

	if (Control_NetworReg_Message(rxBuf) == ERROR)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 f811 	bl	8000b3c <Control_NetworReg_Message>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <Network_Register_Control+0xb4>
		return ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e000      	b.n	8000b26 <Network_Register_Control+0xb6>

	return SUCCESS;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b015      	add	sp, #84	; 0x54
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	08006040 	.word	0x08006040
 8000b34:	20000884 	.word	0x20000884
 8000b38:	2000007c 	.word	0x2000007c

08000b3c <Control_NetworReg_Message>:

ErrorStatus Control_NetworReg_Message(char *buf) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	int result = -1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	425b      	negs	r3, r3
 8000b48:	60fb      	str	r3, [r7, #12]

	result = strncmp(buf, "\r\n+CEREG: 0,1\r\n\r\nOK\r\n",
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <Control_NetworReg_Message+0x44>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2215      	movs	r2, #21
 8000b50:	0018      	movs	r0, r3
 8000b52:	f004 fdb7 	bl	80056c4 <strncmp>
 8000b56:	0003      	movs	r3, r0
 8000b58:	60fb      	str	r3, [r7, #12]
			strlen("\r\n+CEREG: 0,1\r\n\r\nOK\r\n"));
	if (result == 0)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <Control_NetworReg_Message+0x28>
		return SUCCESS;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e008      	b.n	8000b76 <Control_NetworReg_Message+0x3a>

	result = strncmp(buf, "\r\n+CEREG: 0,5\r\n\r\nOK\r\n",
 8000b64:	4907      	ldr	r1, [pc, #28]	; (8000b84 <Control_NetworReg_Message+0x48>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2215      	movs	r2, #21
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f004 fdaa 	bl	80056c4 <strncmp>
 8000b70:	0003      	movs	r3, r0
 8000b72:	60fb      	str	r3, [r7, #12]
			strlen("\r\n+CEREG: 0,5\r\n\r\nOK\r\n"));

	return ERROR;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	0800604c 	.word	0x0800604c
 8000b84:	08006064 	.word	0x08006064

08000b88 <Internet_Control>:

ErrorStatus Internet_Control(void) {
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	b095      	sub	sp, #84	; 0x54
 8000b8c:	af00      	add	r7, sp, #0
	char buf[20];
	char rxBuf[50];
	uint8_t i = 0;
 8000b8e:	264f      	movs	r6, #79	; 0x4f
 8000b90:	19bb      	adds	r3, r7, r6
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8000b96:	244c      	movs	r4, #76	; 0x4c
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 20);
 8000b9e:	2538      	movs	r5, #56	; 0x38
 8000ba0:	197b      	adds	r3, r7, r5
 8000ba2:	2114      	movs	r1, #20
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff fdcd 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 50);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2132      	movs	r1, #50	; 0x32
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fdc8 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CGACT?\r\n");
 8000bb4:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <Internet_Control+0xc0>)
 8000bb6:	197b      	adds	r3, r7, r5
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f004 fd5a 	bl	8005674 <siprintf>
	size = strlen(buf);
 8000bc0:	197b      	adds	r3, r7, r5
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fa9e 	bl	8000104 <strlen>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	1979      	adds	r1, r7, r5
 8000bd4:	481d      	ldr	r0, [pc, #116]	; (8000c4c <Internet_Control+0xc4>)
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	f002 fc64 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000bdc:	23fa      	movs	r3, #250	; 0xfa
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 f9db 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8000be6:	193c      	adds	r4, r7, r4
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <Internet_Control+0xc8>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 feb0 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8000bf4:	19bb      	adds	r3, r7, r6
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e00d      	b.n	8000c18 <Internet_Control+0x90>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000bfc:	254f      	movs	r5, #79	; 0x4f
 8000bfe:	197b      	adds	r3, r7, r5
 8000c00:	781c      	ldrb	r4, [r3, #0]
 8000c02:	f000 fecb 	bl	800199c <C16QS_Get_Data_Byte>
 8000c06:	0003      	movs	r3, r0
 8000c08:	001a      	movs	r2, r3
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000c0e:	197b      	adds	r3, r7, r5
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	197b      	adds	r3, r7, r5
 8000c14:	3201      	adds	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	234f      	movs	r3, #79	; 0x4f
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	224c      	movs	r2, #76	; 0x4c
 8000c22:	18ba      	adds	r2, r7, r2
 8000c24:	8812      	ldrh	r2, [r2, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d8e8      	bhi.n	8000bfc <Internet_Control+0x74>
	}

	if (Control_Internet_Message(rxBuf) == ERROR)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 f811 	bl	8000c54 <Control_Internet_Message>
 8000c32:	0003      	movs	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d101      	bne.n	8000c3c <Internet_Control+0xb4>
		return ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <Internet_Control+0xb6>

	return SUCCESS;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b015      	add	sp, #84	; 0x54
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	0800607c 	.word	0x0800607c
 8000c4c:	20000884 	.word	0x20000884
 8000c50:	2000007c 	.word	0x2000007c

08000c54 <Control_Internet_Message>:

ErrorStatus Control_Internet_Message(char *buf) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	int result = -1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	425b      	negs	r3, r3
 8000c60:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n+CGACT: 1,1\r\n", strlen("\r\n+CGACT: 1,1\r\n"));
 8000c62:	4909      	ldr	r1, [pc, #36]	; (8000c88 <Control_Internet_Message+0x34>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	220f      	movs	r2, #15
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f004 fd2b 	bl	80056c4 <strncmp>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	60fb      	str	r3, [r7, #12]
	if (result == 0)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <Control_Internet_Message+0x28>
		return SUCCESS;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e000      	b.n	8000c7e <Control_Internet_Message+0x2a>

	return ERROR;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	08006088 	.word	0x08006088

08000c8c <CIPMUX_setting>:

/* C16QS modulunu tek bir IP adresine TCP baglantisi yapilacaginin
 * bildirilmesi icin kullanilan fonksiyon */
ErrorStatus CIPMUX_setting(void) {
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	b0cd      	sub	sp, #308	; 0x134
 8000c90:	af00      	add	r7, sp, #0
	char buf[200];
	char rxBuf[100];
	uint8_t i = 0;
 8000c92:	2630      	movs	r6, #48	; 0x30
 8000c94:	36ff      	adds	r6, #255	; 0xff
 8000c96:	19bb      	adds	r3, r7, r6
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8000c9c:	2496      	movs	r4, #150	; 0x96
 8000c9e:	0064      	lsls	r4, r4, #1
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 200);
 8000ca6:	2564      	movs	r5, #100	; 0x64
 8000ca8:	197b      	adds	r3, r7, r5
 8000caa:	21c8      	movs	r1, #200	; 0xc8
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fd49 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 100);
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	2164      	movs	r1, #100	; 0x64
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fd44 	bl	8000744 <Clear_Buffer>

	C16QS_Serial_Flush_Queue(&C16QS_Buf);
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <CIPMUX_setting+0xd4>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fe38 	bl	8001934 <C16QS_Serial_Flush_Queue>

	sprintf(buf, "AT+CIPMUX=0\r\n");
 8000cc4:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <CIPMUX_setting+0xd8>)
 8000cc6:	197b      	adds	r3, r7, r5
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f004 fcd2 	bl	8005674 <siprintf>

	size = strlen(buf);
 8000cd0:	197b      	adds	r3, r7, r5
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fa16 	bl	8000104 <strlen>
 8000cd8:	0002      	movs	r2, r0
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	881a      	ldrh	r2, [r3, #0]
 8000ce2:	1979      	adds	r1, r7, r5
 8000ce4:	4820      	ldr	r0, [pc, #128]	; (8000d68 <CIPMUX_setting+0xdc>)
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	f002 fbdc 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000cec:	2064      	movs	r0, #100	; 0x64
 8000cee:	f001 f955 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8000cf2:	193c      	adds	r4, r7, r4
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <CIPMUX_setting+0xd4>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fe2a 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8000d00:	19bb      	adds	r3, r7, r6
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e012      	b.n	8000d2e <CIPMUX_setting+0xa2>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000d08:	2530      	movs	r5, #48	; 0x30
 8000d0a:	35ff      	adds	r5, #255	; 0xff
 8000d0c:	197b      	adds	r3, r7, r5
 8000d0e:	781c      	ldrb	r4, [r3, #0]
 8000d10:	f000 fe44 	bl	800199c <C16QS_Get_Data_Byte>
 8000d14:	0003      	movs	r3, r0
 8000d16:	001a      	movs	r2, r3
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <CIPMUX_setting+0xe0>)
 8000d1a:	2198      	movs	r1, #152	; 0x98
 8000d1c:	0049      	lsls	r1, r1, #1
 8000d1e:	185b      	adds	r3, r3, r1
 8000d20:	19db      	adds	r3, r3, r7
 8000d22:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000d24:	197b      	adds	r3, r7, r5
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	197b      	adds	r3, r7, r5
 8000d2a:	3201      	adds	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	2330      	movs	r3, #48	; 0x30
 8000d30:	33ff      	adds	r3, #255	; 0xff
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	2296      	movs	r2, #150	; 0x96
 8000d3a:	0052      	lsls	r2, r2, #1
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	8812      	ldrh	r2, [r2, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8e1      	bhi.n	8000d08 <CIPMUX_setting+0x7c>
	}

	if (Control_CIPMUX_OK_Message(rxBuf) == ERROR)
 8000d44:	003b      	movs	r3, r7
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f812 	bl	8000d70 <Control_CIPMUX_OK_Message>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <CIPMUX_setting+0xca>
		return ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <CIPMUX_setting+0xcc>

	return SUCCESS;
 8000d56:	2300      	movs	r3, #0

}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b04d      	add	sp, #308	; 0x134
 8000d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d60:	2000007c 	.word	0x2000007c
 8000d64:	08006098 	.word	0x08006098
 8000d68:	20000884 	.word	0x20000884
 8000d6c:	fffffed0 	.word	0xfffffed0

08000d70 <Control_CIPMUX_OK_Message>:

ErrorStatus Control_CIPMUX_OK_Message(char *buf) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	int result = -1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n\r\nOK\r\n", strlen("\r\n\r\nOK\r\n"));
 8000d7e:	4909      	ldr	r1, [pc, #36]	; (8000da4 <Control_CIPMUX_OK_Message+0x34>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2208      	movs	r2, #8
 8000d84:	0018      	movs	r0, r3
 8000d86:	f004 fc9d 	bl	80056c4 <strncmp>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	60fb      	str	r3, [r7, #12]
	if (result == 0)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <Control_CIPMUX_OK_Message+0x28>
		return SUCCESS;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e000      	b.n	8000d9a <Control_CIPMUX_OK_Message+0x2a>

	return ERROR;
 8000d98:	2301      	movs	r3, #1
}
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b004      	add	sp, #16
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	080060a8 	.word	0x080060a8

08000da8 <CIPSTART_setting>:

/* Sunucu tarafinda dinlemeye alinmis olan bir porta IP ve port
 * numarasini kullanarak AT komut portu
 * uzerinden bu fonsiyon ile baglanti kurulur.*/
ErrorStatus CIPSTART_setting(char *IP, uint16_t Port) {
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b0cf      	sub	sp, #316	; 0x13c
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	000a      	movs	r2, r1
 8000db2:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <CIPSTART_setting+0xec>)
 8000db4:	269c      	movs	r6, #156	; 0x9c
 8000db6:	0076      	lsls	r6, r6, #1
 8000db8:	199b      	adds	r3, r3, r6
 8000dba:	19db      	adds	r3, r3, r7
 8000dbc:	801a      	strh	r2, [r3, #0]
	char buf[200];
	char rxBuf[100];
	uint8_t i = 0;
 8000dbe:	2338      	movs	r3, #56	; 0x38
 8000dc0:	33ff      	adds	r3, #255	; 0xff
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8000dc8:	249a      	movs	r4, #154	; 0x9a
 8000dca:	0064      	lsls	r4, r4, #1
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 200);
 8000dd2:	256c      	movs	r5, #108	; 0x6c
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	21c8      	movs	r1, #200	; 0xc8
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fcb3 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 100);
 8000dde:	2208      	movs	r2, #8
 8000de0:	18bb      	adds	r3, r7, r2
 8000de2:	2164      	movs	r1, #100	; 0x64
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff fcad 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", IP, Port);
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <CIPSTART_setting+0xec>)
 8000dec:	199a      	adds	r2, r3, r6
 8000dee:	19d3      	adds	r3, r2, r7
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	4928      	ldr	r1, [pc, #160]	; (8000e98 <CIPSTART_setting+0xf0>)
 8000df6:	1978      	adds	r0, r7, r5
 8000df8:	f004 fc3c 	bl	8005674 <siprintf>

	size = strlen(buf);
 8000dfc:	197b      	adds	r3, r7, r5
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff f980 	bl	8000104 <strlen>
 8000e04:	0002      	movs	r2, r0
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	1979      	adds	r1, r7, r5
 8000e10:	4822      	ldr	r0, [pc, #136]	; (8000e9c <CIPSTART_setting+0xf4>)
 8000e12:	230a      	movs	r3, #10
 8000e14:	f002 fb46 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(10000);
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <CIPSTART_setting+0xf8>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f001 f8be 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <CIPSTART_setting+0xfc>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fd93 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8000e2e:	2338      	movs	r3, #56	; 0x38
 8000e30:	33ff      	adds	r3, #255	; 0xff
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e012      	b.n	8000e60 <CIPSTART_setting+0xb8>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000e3a:	2538      	movs	r5, #56	; 0x38
 8000e3c:	35ff      	adds	r5, #255	; 0xff
 8000e3e:	197b      	adds	r3, r7, r5
 8000e40:	781c      	ldrb	r4, [r3, #0]
 8000e42:	f000 fdab 	bl	800199c <C16QS_Get_Data_Byte>
 8000e46:	0003      	movs	r3, r0
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <CIPSTART_setting+0x100>)
 8000e4c:	219c      	movs	r1, #156	; 0x9c
 8000e4e:	0049      	lsls	r1, r1, #1
 8000e50:	185b      	adds	r3, r3, r1
 8000e52:	19db      	adds	r3, r3, r7
 8000e54:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	197b      	adds	r3, r7, r5
 8000e5c:	3201      	adds	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	2338      	movs	r3, #56	; 0x38
 8000e62:	33ff      	adds	r3, #255	; 0xff
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	229a      	movs	r2, #154	; 0x9a
 8000e6c:	0052      	lsls	r2, r2, #1
 8000e6e:	18ba      	adds	r2, r7, r2
 8000e70:	8812      	ldrh	r2, [r2, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d8e1      	bhi.n	8000e3a <CIPSTART_setting+0x92>
	}

	if (Control_CIPSTART_response(rxBuf) == ERROR)
 8000e76:	2308      	movs	r3, #8
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f816 	bl	8000eac <Control_CIPSTART_response>
 8000e80:	0003      	movs	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <CIPSTART_setting+0xe2>
		return ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <CIPSTART_setting+0xe4>

	return SUCCESS;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b04f      	add	sp, #316	; 0x13c
 8000e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e94:	fffffeca 	.word	0xfffffeca
 8000e98:	080060b4 	.word	0x080060b4
 8000e9c:	20000884 	.word	0x20000884
 8000ea0:	00002710 	.word	0x00002710
 8000ea4:	2000007c 	.word	0x2000007c
 8000ea8:	fffffed0 	.word	0xfffffed0

08000eac <Control_CIPSTART_response>:

ErrorStatus Control_CIPSTART_response(char *buf) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	int result = -1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n\r\n+CIPSTART: CONNECT OK\r\n\r\nOK\r\n",
 8000eba:	4909      	ldr	r1, [pc, #36]	; (8000ee0 <Control_CIPSTART_response+0x34>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2221      	movs	r2, #33	; 0x21
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f004 fbff 	bl	80056c4 <strncmp>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	60fb      	str	r3, [r7, #12]
			strlen("\r\n\r\n+CIPSTART: CONNECT OK\r\n\r\nOK\r\n"));
	if (result == 0)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <Control_CIPSTART_response+0x28>
		return SUCCESS;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e000      	b.n	8000ed6 <Control_CIPSTART_response+0x2a>

	return ERROR;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	080060d0 	.word	0x080060d0

08000ee4 <Control_TCP_connection>:

/* Baglantinin durumunu herhangi bir zamanda kontrol edebilirsiniz.
 * Bunun icin AT komut portu uzerinden bu fonksiyon kullanilir.*/
ErrorStatus Control_TCP_connection(void) {
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b0cd      	sub	sp, #308	; 0x134
 8000ee8:	af00      	add	r7, sp, #0
	char buf[200];
	char rxBuf[100];
	uint8_t i = 0;
 8000eea:	2630      	movs	r6, #48	; 0x30
 8000eec:	36ff      	adds	r6, #255	; 0xff
 8000eee:	19bb      	adds	r3, r7, r6
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8000ef4:	2496      	movs	r4, #150	; 0x96
 8000ef6:	0064      	lsls	r4, r4, #1
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2200      	movs	r2, #0
 8000efc:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 200);
 8000efe:	2564      	movs	r5, #100	; 0x64
 8000f00:	197b      	adds	r3, r7, r5
 8000f02:	21c8      	movs	r1, #200	; 0xc8
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff fc1d 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 100);
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2164      	movs	r1, #100	; 0x64
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff fc18 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CIPSTATUS\r\n");
 8000f14:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <Control_TCP_connection+0xd4>)
 8000f16:	197b      	adds	r3, r7, r5
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f004 fbaa 	bl	8005674 <siprintf>

	size = strlen(buf);
 8000f20:	197b      	adds	r3, r7, r5
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff f8ee 	bl	8000104 <strlen>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	881a      	ldrh	r2, [r3, #0]
 8000f32:	1979      	adds	r1, r7, r5
 8000f34:	4821      	ldr	r0, [pc, #132]	; (8000fbc <Control_TCP_connection+0xd8>)
 8000f36:	230a      	movs	r3, #10
 8000f38:	f002 fab4 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000f3c:	23fa      	movs	r3, #250	; 0xfa
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 f82b 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <Control_TCP_connection+0xdc>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fd00 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8000f50:	0003      	movs	r3, r0
 8000f52:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8000f54:	19bb      	adds	r3, r7, r6
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e012      	b.n	8000f82 <Control_TCP_connection+0x9e>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8000f5c:	2530      	movs	r5, #48	; 0x30
 8000f5e:	35ff      	adds	r5, #255	; 0xff
 8000f60:	197b      	adds	r3, r7, r5
 8000f62:	781c      	ldrb	r4, [r3, #0]
 8000f64:	f000 fd1a 	bl	800199c <C16QS_Get_Data_Byte>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <Control_TCP_connection+0xe0>)
 8000f6e:	2198      	movs	r1, #152	; 0x98
 8000f70:	0049      	lsls	r1, r1, #1
 8000f72:	185b      	adds	r3, r3, r1
 8000f74:	19db      	adds	r3, r3, r7
 8000f76:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8000f78:	197b      	adds	r3, r7, r5
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	197b      	adds	r3, r7, r5
 8000f7e:	3201      	adds	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	2330      	movs	r3, #48	; 0x30
 8000f84:	33ff      	adds	r3, #255	; 0xff
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	2296      	movs	r2, #150	; 0x96
 8000f8e:	0052      	lsls	r2, r2, #1
 8000f90:	18ba      	adds	r2, r7, r2
 8000f92:	8812      	ldrh	r2, [r2, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8e1      	bhi.n	8000f5c <Control_TCP_connection+0x78>
	}

	if (Control_TCP_Connection_Message(rxBuf, DestinationIP, DestinationPort)
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <Control_TCP_connection+0xe4>)
 8000f9a:	490c      	ldr	r1, [pc, #48]	; (8000fcc <Control_TCP_connection+0xe8>)
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f816 	bl	8000fd0 <Control_TCP_Connection_Message>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <Control_TCP_connection+0xca>
			== ERROR)
		return ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <Control_TCP_connection+0xcc>

	return SUCCESS;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b04d      	add	sp, #308	; 0x134
 8000fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb8:	080060f4 	.word	0x080060f4
 8000fbc:	20000884 	.word	0x20000884
 8000fc0:	2000007c 	.word	0x2000007c
 8000fc4:	fffffed0 	.word	0xfffffed0
 8000fc8:	000015b3 	.word	0x000015b3
 8000fcc:	08006104 	.word	0x08006104

08000fd0 <Control_TCP_Connection_Message>:

ErrorStatus Control_TCP_Connection_Message(char *buf, char *IP, uint16_t Port) {
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b093      	sub	sp, #76	; 0x4c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	801a      	strh	r2, [r3, #0]
	char tbuf[50];
	int result = -1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44

	Clear_Buffer(tbuf, 50);
 8000fe4:	2410      	movs	r4, #16
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	2132      	movs	r1, #50	; 0x32
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fbaa 	bl	8000744 <Clear_Buffer>

	sprintf(tbuf, "\r\n\r\nC:0,TCP,%s,%d,CONNECTED\r\n\r\nOK\r\n", IP, Port);
 8000ff0:	1dbb      	adds	r3, r7, #6
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <Control_TCP_Connection_Message+0x5c>)
 8000ff8:	1938      	adds	r0, r7, r4
 8000ffa:	f004 fb3b 	bl	8005674 <siprintf>

	result = strncmp(buf, tbuf, strlen(tbuf));
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff f87f 	bl	8000104 <strlen>
 8001006:	0002      	movs	r2, r0
 8001008:	1939      	adds	r1, r7, r4
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	0018      	movs	r0, r3
 800100e:	f004 fb59 	bl	80056c4 <strncmp>
 8001012:	0003      	movs	r3, r0
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
	if (result == 0)
 8001016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <Control_TCP_Connection_Message+0x50>
		return SUCCESS;
 800101c:	2300      	movs	r3, #0
 800101e:	e000      	b.n	8001022 <Control_TCP_Connection_Message+0x52>

	return ERROR;
 8001020:	2301      	movs	r3, #1

}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b013      	add	sp, #76	; 0x4c
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	08006114 	.word	0x08006114

08001030 <Send_Data_to_TCP>:

/* Baglanti kurdugunuz TCP portuna belirli sayida
 * veri gondermek icin kullanilan fonksiyon */
ErrorStatus Send_Data_to_TCP(char *message, uint16_t length) {
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	b0cf      	sub	sp, #316	; 0x13c
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	000a      	movs	r2, r1
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <Send_Data_to_TCP+0x198>)
 800103c:	269c      	movs	r6, #156	; 0x9c
 800103e:	0076      	lsls	r6, r6, #1
 8001040:	199b      	adds	r3, r3, r6
 8001042:	19db      	adds	r3, r3, r7
 8001044:	801a      	strh	r2, [r3, #0]
	char buf[200];
	char rxBuf[100];
	uint8_t i = 0;
 8001046:	2338      	movs	r3, #56	; 0x38
 8001048:	33ff      	adds	r3, #255	; 0xff
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8001050:	249a      	movs	r4, #154	; 0x9a
 8001052:	0064      	lsls	r4, r4, #1
 8001054:	193b      	adds	r3, r7, r4
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 200);
 800105a:	256c      	movs	r5, #108	; 0x6c
 800105c:	197b      	adds	r3, r7, r5
 800105e:	21c8      	movs	r1, #200	; 0xc8
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff fb6f 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 100);
 8001066:	2208      	movs	r2, #8
 8001068:	18bb      	adds	r3, r7, r2
 800106a:	2164      	movs	r1, #100	; 0x64
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fb69 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CIPSEND=%d\r\n", length);
 8001072:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <Send_Data_to_TCP+0x198>)
 8001074:	199a      	adds	r2, r3, r6
 8001076:	19d3      	adds	r3, r2, r7
 8001078:	881a      	ldrh	r2, [r3, #0]
 800107a:	4954      	ldr	r1, [pc, #336]	; (80011cc <Send_Data_to_TCP+0x19c>)
 800107c:	197b      	adds	r3, r7, r5
 800107e:	0018      	movs	r0, r3
 8001080:	f004 faf8 	bl	8005674 <siprintf>

	size = strlen(buf);
 8001084:	197b      	adds	r3, r7, r5
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff f83c 	bl	8000104 <strlen>
 800108c:	0002      	movs	r2, r0
 800108e:	193b      	adds	r3, r7, r4
 8001090:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8001092:	193b      	adds	r3, r7, r4
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	1979      	adds	r1, r7, r5
 8001098:	484d      	ldr	r0, [pc, #308]	; (80011d0 <Send_Data_to_TCP+0x1a0>)
 800109a:	230a      	movs	r3, #10
 800109c:	f002 fa02 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 80010a0:	23fa      	movs	r3, #250	; 0xfa
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 ff79 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 80010aa:	193c      	adds	r4, r7, r4
 80010ac:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <Send_Data_to_TCP+0x1a4>)
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 fc4e 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 80010b4:	0003      	movs	r3, r0
 80010b6:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 80010b8:	2338      	movs	r3, #56	; 0x38
 80010ba:	33ff      	adds	r3, #255	; 0xff
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e012      	b.n	80010ea <Send_Data_to_TCP+0xba>
		rxBuf[i] = C16QS_Get_Data_Byte();
 80010c4:	2538      	movs	r5, #56	; 0x38
 80010c6:	35ff      	adds	r5, #255	; 0xff
 80010c8:	197b      	adds	r3, r7, r5
 80010ca:	781c      	ldrb	r4, [r3, #0]
 80010cc:	f000 fc66 	bl	800199c <C16QS_Get_Data_Byte>
 80010d0:	0003      	movs	r3, r0
 80010d2:	001a      	movs	r2, r3
 80010d4:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <Send_Data_to_TCP+0x1a8>)
 80010d6:	219c      	movs	r1, #156	; 0x9c
 80010d8:	0049      	lsls	r1, r1, #1
 80010da:	185b      	adds	r3, r3, r1
 80010dc:	19db      	adds	r3, r3, r7
 80010de:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	197b      	adds	r3, r7, r5
 80010e6:	3201      	adds	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	2338      	movs	r3, #56	; 0x38
 80010ec:	33ff      	adds	r3, #255	; 0xff
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	229a      	movs	r2, #154	; 0x9a
 80010f6:	0052      	lsls	r2, r2, #1
 80010f8:	18ba      	adds	r2, r7, r2
 80010fa:	8812      	ldrh	r2, [r2, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8e1      	bhi.n	80010c4 <Send_Data_to_TCP+0x94>
	}

	if (Control_Data_Enter(rxBuf) == ERROR)
 8001100:	2308      	movs	r3, #8
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	0018      	movs	r0, r3
 8001106:	f000 f86b 	bl	80011e0 <Control_Data_Enter>
 800110a:	0003      	movs	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <Send_Data_to_TCP+0xe4>
		return ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e055      	b.n	80011c0 <Send_Data_to_TCP+0x190>

	Clear_Buffer(rxBuf, 100);
 8001114:	2308      	movs	r3, #8
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	2164      	movs	r1, #100	; 0x64
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fb12 	bl	8000744 <Clear_Buffer>
	sprintf(buf, "%s", message);
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	492e      	ldr	r1, [pc, #184]	; (80011dc <Send_Data_to_TCP+0x1ac>)
 8001124:	246c      	movs	r4, #108	; 0x6c
 8001126:	193b      	adds	r3, r7, r4
 8001128:	0018      	movs	r0, r3
 800112a:	f004 faa3 	bl	8005674 <siprintf>

	size = strlen(buf);
 800112e:	193b      	adds	r3, r7, r4
 8001130:	0018      	movs	r0, r3
 8001132:	f7fe ffe7 	bl	8000104 <strlen>
 8001136:	0002      	movs	r2, r0
 8001138:	259a      	movs	r5, #154	; 0x9a
 800113a:	006d      	lsls	r5, r5, #1
 800113c:	197b      	adds	r3, r7, r5
 800113e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8001140:	197b      	adds	r3, r7, r5
 8001142:	881a      	ldrh	r2, [r3, #0]
 8001144:	1939      	adds	r1, r7, r4
 8001146:	4822      	ldr	r0, [pc, #136]	; (80011d0 <Send_Data_to_TCP+0x1a0>)
 8001148:	230a      	movs	r3, #10
 800114a:	f002 f9ab 	bl	80034a4 <HAL_UART_Transmit>

	HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	; 0x64
 8001150:	f000 ff24 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8001154:	197c      	adds	r4, r7, r5
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <Send_Data_to_TCP+0x1a4>)
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fbf9 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 800115e:	0003      	movs	r3, r0
 8001160:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8001162:	2338      	movs	r3, #56	; 0x38
 8001164:	33ff      	adds	r3, #255	; 0xff
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e012      	b.n	8001194 <Send_Data_to_TCP+0x164>
		rxBuf[i] = C16QS_Get_Data_Byte();
 800116e:	2538      	movs	r5, #56	; 0x38
 8001170:	35ff      	adds	r5, #255	; 0xff
 8001172:	197b      	adds	r3, r7, r5
 8001174:	781c      	ldrb	r4, [r3, #0]
 8001176:	f000 fc11 	bl	800199c <C16QS_Get_Data_Byte>
 800117a:	0003      	movs	r3, r0
 800117c:	001a      	movs	r2, r3
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <Send_Data_to_TCP+0x1a8>)
 8001180:	219c      	movs	r1, #156	; 0x9c
 8001182:	0049      	lsls	r1, r1, #1
 8001184:	185b      	adds	r3, r3, r1
 8001186:	19db      	adds	r3, r3, r7
 8001188:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 800118a:	197b      	adds	r3, r7, r5
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	197b      	adds	r3, r7, r5
 8001190:	3201      	adds	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	2338      	movs	r3, #56	; 0x38
 8001196:	33ff      	adds	r3, #255	; 0xff
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	229a      	movs	r2, #154	; 0x9a
 80011a0:	0052      	lsls	r2, r2, #1
 80011a2:	18ba      	adds	r2, r7, r2
 80011a4:	8812      	ldrh	r2, [r2, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d8e1      	bhi.n	800116e <Send_Data_to_TCP+0x13e>
	}

	if (Control_Send_OK(rxBuf) == ERROR)
 80011aa:	2308      	movs	r3, #8
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f832 	bl	8001218 <Control_Send_OK>
 80011b4:	0003      	movs	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <Send_Data_to_TCP+0x18e>
		return ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <Send_Data_to_TCP+0x190>
	return SUCCESS;
 80011be:	2300      	movs	r3, #0

}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b04f      	add	sp, #316	; 0x13c
 80011c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c8:	fffffeca 	.word	0xfffffeca
 80011cc:	08006138 	.word	0x08006138
 80011d0:	20000884 	.word	0x20000884
 80011d4:	2000007c 	.word	0x2000007c
 80011d8:	fffffed0 	.word	0xfffffed0
 80011dc:	08006148 	.word	0x08006148

080011e0 <Control_Data_Enter>:

ErrorStatus Control_Data_Enter(char *buf) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	int result = -1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	425b      	negs	r3, r3
 80011ec:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n\r\n> ", strlen("\r\n\r\n> "));
 80011ee:	4909      	ldr	r1, [pc, #36]	; (8001214 <Control_Data_Enter+0x34>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2206      	movs	r2, #6
 80011f4:	0018      	movs	r0, r3
 80011f6:	f004 fa65 	bl	80056c4 <strncmp>
 80011fa:	0003      	movs	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
	if (result == 0)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <Control_Data_Enter+0x28>
		return SUCCESS;
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <Control_Data_Enter+0x2a>

	return ERROR;
 8001208:	2301      	movs	r3, #1
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	0800614c 	.word	0x0800614c

08001218 <Control_Send_OK>:

ErrorStatus Control_Send_OK(char *buf) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	int result = -1;
 8001220:	2301      	movs	r3, #1
 8001222:	425b      	negs	r3, r3
 8001224:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n+CIPSEND: SEND OK\r\n",
 8001226:	4909      	ldr	r1, [pc, #36]	; (800124c <Control_Send_OK+0x34>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2215      	movs	r2, #21
 800122c:	0018      	movs	r0, r3
 800122e:	f004 fa49 	bl	80056c4 <strncmp>
 8001232:	0003      	movs	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]
			strlen("\r\n+CIPSEND: SEND OK\r\n"));
	if (result == 0)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <Control_Send_OK+0x28>
		return SUCCESS;
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <Control_Send_OK+0x2a>

	return ERROR;
 8001240:	2301      	movs	r3, #1
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	08006154 	.word	0x08006154

08001250 <Send_Data_to_TCP_2>:

ErrorStatus Send_Data_to_TCP_2(char *message) {
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	b0cf      	sub	sp, #316	; 0x13c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	char buf[200];
	char rxBuf[100];
	uint8_t i = 0;
 8001258:	2638      	movs	r6, #56	; 0x38
 800125a:	36ff      	adds	r6, #255	; 0xff
 800125c:	19bb      	adds	r3, r7, r6
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8001262:	249a      	movs	r4, #154	; 0x9a
 8001264:	0064      	lsls	r4, r4, #1
 8001266:	193b      	adds	r3, r7, r4
 8001268:	2200      	movs	r2, #0
 800126a:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 200);
 800126c:	256c      	movs	r5, #108	; 0x6c
 800126e:	197b      	adds	r3, r7, r5
 8001270:	21c8      	movs	r1, #200	; 0xc8
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff fa66 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 100);
 8001278:	2308      	movs	r3, #8
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	2164      	movs	r1, #100	; 0x64
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff fa60 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CIPSEND\r\n");
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <Send_Data_to_TCP_2+0x194>)
 8001286:	197b      	adds	r3, r7, r5
 8001288:	0011      	movs	r1, r2
 800128a:	0018      	movs	r0, r3
 800128c:	f004 f9f2 	bl	8005674 <siprintf>

	size = strlen(buf);
 8001290:	197b      	adds	r3, r7, r5
 8001292:	0018      	movs	r0, r3
 8001294:	f7fe ff36 	bl	8000104 <strlen>
 8001298:	0002      	movs	r2, r0
 800129a:	193b      	adds	r3, r7, r4
 800129c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	1979      	adds	r1, r7, r5
 80012a4:	4850      	ldr	r0, [pc, #320]	; (80013e8 <Send_Data_to_TCP_2+0x198>)
 80012a6:	230a      	movs	r3, #10
 80012a8:	f002 f8fc 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 80012ac:	23fa      	movs	r3, #250	; 0xfa
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 fe73 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 80012b6:	193c      	adds	r4, r7, r4
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <Send_Data_to_TCP_2+0x19c>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fb48 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 80012c0:	0003      	movs	r3, r0
 80012c2:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 80012c4:	19bb      	adds	r3, r7, r6
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e012      	b.n	80012f2 <Send_Data_to_TCP_2+0xa2>
		rxBuf[i] = C16QS_Get_Data_Byte();
 80012cc:	2538      	movs	r5, #56	; 0x38
 80012ce:	35ff      	adds	r5, #255	; 0xff
 80012d0:	197b      	adds	r3, r7, r5
 80012d2:	781c      	ldrb	r4, [r3, #0]
 80012d4:	f000 fb62 	bl	800199c <C16QS_Get_Data_Byte>
 80012d8:	0003      	movs	r3, r0
 80012da:	001a      	movs	r2, r3
 80012dc:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <Send_Data_to_TCP_2+0x1a0>)
 80012de:	219c      	movs	r1, #156	; 0x9c
 80012e0:	0049      	lsls	r1, r1, #1
 80012e2:	185b      	adds	r3, r3, r1
 80012e4:	19db      	adds	r3, r3, r7
 80012e6:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 80012e8:	197b      	adds	r3, r7, r5
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	197b      	adds	r3, r7, r5
 80012ee:	3201      	adds	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	2338      	movs	r3, #56	; 0x38
 80012f4:	33ff      	adds	r3, #255	; 0xff
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	229a      	movs	r2, #154	; 0x9a
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	18ba      	adds	r2, r7, r2
 8001302:	8812      	ldrh	r2, [r2, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8e1      	bhi.n	80012cc <Send_Data_to_TCP_2+0x7c>
	}

	if (Control_Data_Enter(rxBuf) == ERROR)
 8001308:	2308      	movs	r3, #8
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff ff67 	bl	80011e0 <Control_Data_Enter>
 8001312:	0003      	movs	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <Send_Data_to_TCP_2+0xcc>
		return ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e05e      	b.n	80013da <Send_Data_to_TCP_2+0x18a>

	sprintf(buf, "%s", message);
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4935      	ldr	r1, [pc, #212]	; (80013f4 <Send_Data_to_TCP_2+0x1a4>)
 8001320:	246c      	movs	r4, #108	; 0x6c
 8001322:	193b      	adds	r3, r7, r4
 8001324:	0018      	movs	r0, r3
 8001326:	f004 f9a5 	bl	8005674 <siprintf>

	size = strlen(buf);
 800132a:	193b      	adds	r3, r7, r4
 800132c:	0018      	movs	r0, r3
 800132e:	f7fe fee9 	bl	8000104 <strlen>
 8001332:	0002      	movs	r2, r0
 8001334:	259a      	movs	r5, #154	; 0x9a
 8001336:	006d      	lsls	r5, r5, #1
 8001338:	197b      	adds	r3, r7, r5
 800133a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 800133c:	197b      	adds	r3, r7, r5
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	1939      	adds	r1, r7, r4
 8001342:	4829      	ldr	r0, [pc, #164]	; (80013e8 <Send_Data_to_TCP_2+0x198>)
 8001344:	230a      	movs	r3, #10
 8001346:	f002 f8ad 	bl	80034a4 <HAL_UART_Transmit>

	Clear_Buffer(rxBuf, 100);
 800134a:	2308      	movs	r3, #8
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2164      	movs	r1, #100	; 0x64
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff f9f7 	bl	8000744 <Clear_Buffer>

	/* veri gondermeyi bitşrmek icin exit komutu */
	buf[0] = 0x1a; // ctrl+z
 8001356:	193b      	adds	r3, r7, r4
 8001358:	221a      	movs	r2, #26
 800135a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, 1, 10);
 800135c:	1939      	adds	r1, r7, r4
 800135e:	4822      	ldr	r0, [pc, #136]	; (80013e8 <Send_Data_to_TCP_2+0x198>)
 8001360:	230a      	movs	r3, #10
 8001362:	2201      	movs	r2, #1
 8001364:	f002 f89e 	bl	80034a4 <HAL_UART_Transmit>

	HAL_Delay(100);
 8001368:	2064      	movs	r0, #100	; 0x64
 800136a:	f000 fe17 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 800136e:	197c      	adds	r4, r7, r5
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <Send_Data_to_TCP_2+0x19c>)
 8001372:	0018      	movs	r0, r3
 8001374:	f000 faec 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8001378:	0003      	movs	r3, r0
 800137a:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 800137c:	2338      	movs	r3, #56	; 0x38
 800137e:	33ff      	adds	r3, #255	; 0xff
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e012      	b.n	80013ae <Send_Data_to_TCP_2+0x15e>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8001388:	2538      	movs	r5, #56	; 0x38
 800138a:	35ff      	adds	r5, #255	; 0xff
 800138c:	197b      	adds	r3, r7, r5
 800138e:	781c      	ldrb	r4, [r3, #0]
 8001390:	f000 fb04 	bl	800199c <C16QS_Get_Data_Byte>
 8001394:	0003      	movs	r3, r0
 8001396:	001a      	movs	r2, r3
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <Send_Data_to_TCP_2+0x1a0>)
 800139a:	219c      	movs	r1, #156	; 0x9c
 800139c:	0049      	lsls	r1, r1, #1
 800139e:	185b      	adds	r3, r3, r1
 80013a0:	19db      	adds	r3, r3, r7
 80013a2:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 80013a4:	197b      	adds	r3, r7, r5
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	197b      	adds	r3, r7, r5
 80013aa:	3201      	adds	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	2338      	movs	r3, #56	; 0x38
 80013b0:	33ff      	adds	r3, #255	; 0xff
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	229a      	movs	r2, #154	; 0x9a
 80013ba:	0052      	lsls	r2, r2, #1
 80013bc:	18ba      	adds	r2, r7, r2
 80013be:	8812      	ldrh	r2, [r2, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8e1      	bhi.n	8001388 <Send_Data_to_TCP_2+0x138>
	}

	if (Control_Send_OK(rxBuf) == ERROR)
 80013c4:	2308      	movs	r3, #8
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ff25 	bl	8001218 <Control_Send_OK>
 80013ce:	0003      	movs	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <Send_Data_to_TCP_2+0x188>
		return ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <Send_Data_to_TCP_2+0x18a>

	return SUCCESS;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b04f      	add	sp, #316	; 0x13c
 80013e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	0800616c 	.word	0x0800616c
 80013e8:	20000884 	.word	0x20000884
 80013ec:	2000007c 	.word	0x2000007c
 80013f0:	fffffed0 	.word	0xfffffed0
 80013f4:	08006148 	.word	0x08006148

080013f8 <TCP_close>:

/* Acik olan TCP portunu kapatmak icin kullanilan fonksiyon */
ErrorStatus TCP_close(void) {
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	b0cd      	sub	sp, #308	; 0x134
 80013fc:	af00      	add	r7, sp, #0
	char buf[200];
	char rxBuf[100];
	uint8_t i = 0;
 80013fe:	2630      	movs	r6, #48	; 0x30
 8001400:	36ff      	adds	r6, #255	; 0xff
 8001402:	19bb      	adds	r3, r7, r6
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8001408:	2496      	movs	r4, #150	; 0x96
 800140a:	0064      	lsls	r4, r4, #1
 800140c:	193b      	adds	r3, r7, r4
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 200);
 8001412:	2564      	movs	r5, #100	; 0x64
 8001414:	197b      	adds	r3, r7, r5
 8001416:	21c8      	movs	r1, #200	; 0xc8
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff f993 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 100);
 800141e:	003b      	movs	r3, r7
 8001420:	2164      	movs	r1, #100	; 0x64
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff f98e 	bl	8000744 <Clear_Buffer>
	C16QS_Serial_Flush_Queue(&C16QS_Buf);
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <TCP_close+0xd8>)
 800142a:	0018      	movs	r0, r3
 800142c:	f000 fa82 	bl	8001934 <C16QS_Serial_Flush_Queue>

	sprintf(buf, "AT+CIPCLOSE\r\n");
 8001430:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <TCP_close+0xdc>)
 8001432:	197b      	adds	r3, r7, r5
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f004 f91c 	bl	8005674 <siprintf>

	size = strlen(buf);
 800143c:	197b      	adds	r3, r7, r5
 800143e:	0018      	movs	r0, r3
 8001440:	f7fe fe60 	bl	8000104 <strlen>
 8001444:	0002      	movs	r2, r0
 8001446:	193b      	adds	r3, r7, r4
 8001448:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 800144a:	193b      	adds	r3, r7, r4
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	1979      	adds	r1, r7, r5
 8001450:	4821      	ldr	r0, [pc, #132]	; (80014d8 <TCP_close+0xe0>)
 8001452:	230a      	movs	r3, #10
 8001454:	f002 f826 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001458:	23fa      	movs	r3, #250	; 0xfa
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fd9d 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8001462:	193c      	adds	r4, r7, r4
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <TCP_close+0xd8>)
 8001466:	0018      	movs	r0, r3
 8001468:	f000 fa72 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 800146c:	0003      	movs	r3, r0
 800146e:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8001470:	19bb      	adds	r3, r7, r6
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e012      	b.n	800149e <TCP_close+0xa6>
		rxBuf[i] = C16QS_Get_Data_Byte();
 8001478:	2530      	movs	r5, #48	; 0x30
 800147a:	35ff      	adds	r5, #255	; 0xff
 800147c:	197b      	adds	r3, r7, r5
 800147e:	781c      	ldrb	r4, [r3, #0]
 8001480:	f000 fa8c 	bl	800199c <C16QS_Get_Data_Byte>
 8001484:	0003      	movs	r3, r0
 8001486:	001a      	movs	r2, r3
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <TCP_close+0xe4>)
 800148a:	2198      	movs	r1, #152	; 0x98
 800148c:	0049      	lsls	r1, r1, #1
 800148e:	185b      	adds	r3, r3, r1
 8001490:	19db      	adds	r3, r3, r7
 8001492:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 8001494:	197b      	adds	r3, r7, r5
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	197b      	adds	r3, r7, r5
 800149a:	3201      	adds	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	2330      	movs	r3, #48	; 0x30
 80014a0:	33ff      	adds	r3, #255	; 0xff
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	2296      	movs	r2, #150	; 0x96
 80014aa:	0052      	lsls	r2, r2, #1
 80014ac:	18ba      	adds	r2, r7, r2
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8e1      	bhi.n	8001478 <TCP_close+0x80>
	}

	if (Control_TCP_Close_Message(rxBuf) == ERROR)
 80014b4:	003b      	movs	r3, r7
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 f812 	bl	80014e0 <Control_TCP_Close_Message>
 80014bc:	0003      	movs	r3, r0
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <TCP_close+0xce>
		return ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <TCP_close+0xd0>

	return SUCCESS;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b04d      	add	sp, #308	; 0x134
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	2000007c 	.word	0x2000007c
 80014d4:	0800617c 	.word	0x0800617c
 80014d8:	20000884 	.word	0x20000884
 80014dc:	fffffed0 	.word	0xfffffed0

080014e0 <Control_TCP_Close_Message>:

ErrorStatus Control_TCP_Close_Message(char *buf) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	int result = -1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	425b      	negs	r3, r3
 80014ec:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n\r\nCLOSE OK\r\n\r\nOK\r\n",
 80014ee:	4909      	ldr	r1, [pc, #36]	; (8001514 <Control_TCP_Close_Message+0x34>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2214      	movs	r2, #20
 80014f4:	0018      	movs	r0, r3
 80014f6:	f004 f8e5 	bl	80056c4 <strncmp>
 80014fa:	0003      	movs	r3, r0
 80014fc:	60fb      	str	r3, [r7, #12]
			strlen("\r\n\r\nCLOSE OK\r\n\r\nOK\r\n"));
	if (result == 0)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <Control_TCP_Close_Message+0x28>
		return SUCCESS;
 8001504:	2300      	movs	r3, #0
 8001506:	e000      	b.n	800150a <Control_TCP_Close_Message+0x2a>

	return ERROR;
 8001508:	2301      	movs	r3, #1
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b004      	add	sp, #16
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	0800618c 	.word	0x0800618c

08001518 <All_TCP_close>:

/*Tum TCP wireless baglantilarinin kapatilmasi icin kullanilan fonksiyondur.*/
ErrorStatus All_TCP_close(void) {
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b0cd      	sub	sp, #308	; 0x134
 800151c:	af00      	add	r7, sp, #0
	char buf[200];
	char rxBuf[100];
	uint8_t i = 0;
 800151e:	2630      	movs	r6, #48	; 0x30
 8001520:	36ff      	adds	r6, #255	; 0xff
 8001522:	19bb      	adds	r3, r7, r6
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
	uint16_t size = 0;
 8001528:	2496      	movs	r4, #150	; 0x96
 800152a:	0064      	lsls	r4, r4, #1
 800152c:	193b      	adds	r3, r7, r4
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]

	Clear_Buffer(buf, 200);
 8001532:	2564      	movs	r5, #100	; 0x64
 8001534:	197b      	adds	r3, r7, r5
 8001536:	21c8      	movs	r1, #200	; 0xc8
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff f903 	bl	8000744 <Clear_Buffer>
	Clear_Buffer(rxBuf, 100);
 800153e:	003b      	movs	r3, r7
 8001540:	2164      	movs	r1, #100	; 0x64
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff f8fe 	bl	8000744 <Clear_Buffer>

	sprintf(buf, "AT+CIPSHUT\r\n");
 8001548:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <All_TCP_close+0xcc>)
 800154a:	197b      	adds	r3, r7, r5
 800154c:	0011      	movs	r1, r2
 800154e:	0018      	movs	r0, r3
 8001550:	f004 f890 	bl	8005674 <siprintf>

	size = strlen(buf);
 8001554:	197b      	adds	r3, r7, r5
 8001556:	0018      	movs	r0, r3
 8001558:	f7fe fdd4 	bl	8000104 <strlen>
 800155c:	0002      	movs	r2, r0
 800155e:	193b      	adds	r3, r7, r4
 8001560:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
 8001562:	193b      	adds	r3, r7, r4
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	1979      	adds	r1, r7, r5
 8001568:	481f      	ldr	r0, [pc, #124]	; (80015e8 <All_TCP_close+0xd0>)
 800156a:	230a      	movs	r3, #10
 800156c:	f001 ff9a 	bl	80034a4 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f000 fd13 	bl	8001f9c <HAL_Delay>

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
 8001576:	193c      	adds	r4, r7, r4
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <All_TCP_close+0xd4>)
 800157a:	0018      	movs	r0, r3
 800157c:	f000 f9e8 	bl	8001950 <C16QS_Serial_Get_Item_Count_in_Queue>
 8001580:	0003      	movs	r3, r0
 8001582:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < size; i++) {
 8001584:	19bb      	adds	r3, r7, r6
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e012      	b.n	80015b2 <All_TCP_close+0x9a>
		rxBuf[i] = C16QS_Get_Data_Byte();
 800158c:	2530      	movs	r5, #48	; 0x30
 800158e:	35ff      	adds	r5, #255	; 0xff
 8001590:	197b      	adds	r3, r7, r5
 8001592:	781c      	ldrb	r4, [r3, #0]
 8001594:	f000 fa02 	bl	800199c <C16QS_Get_Data_Byte>
 8001598:	0003      	movs	r3, r0
 800159a:	001a      	movs	r2, r3
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <All_TCP_close+0xd8>)
 800159e:	2198      	movs	r1, #152	; 0x98
 80015a0:	0049      	lsls	r1, r1, #1
 80015a2:	185b      	adds	r3, r3, r1
 80015a4:	19db      	adds	r3, r3, r7
 80015a6:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < size; i++) {
 80015a8:	197b      	adds	r3, r7, r5
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	3201      	adds	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	2330      	movs	r3, #48	; 0x30
 80015b4:	33ff      	adds	r3, #255	; 0xff
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	2296      	movs	r2, #150	; 0x96
 80015be:	0052      	lsls	r2, r2, #1
 80015c0:	18ba      	adds	r2, r7, r2
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8e1      	bhi.n	800158c <All_TCP_close+0x74>
	}

	if (Control_All_TCP_Close_Message(rxBuf) == ERROR)
 80015c8:	003b      	movs	r3, r7
 80015ca:	0018      	movs	r0, r3
 80015cc:	f000 f812 	bl	80015f4 <Control_All_TCP_Close_Message>
 80015d0:	0003      	movs	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <All_TCP_close+0xc2>
		return ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <All_TCP_close+0xc4>

	return SUCCESS;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b04d      	add	sp, #308	; 0x134
 80015e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e4:	080061a4 	.word	0x080061a4
 80015e8:	20000884 	.word	0x20000884
 80015ec:	2000007c 	.word	0x2000007c
 80015f0:	fffffed0 	.word	0xfffffed0

080015f4 <Control_All_TCP_Close_Message>:

ErrorStatus Control_All_TCP_Close_Message(char *buf) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	int result = -1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	425b      	negs	r3, r3
 8001600:	60fb      	str	r3, [r7, #12]
	result = strncmp(buf, "\r\n\r\nSHUT OK\r\n\r\nOK\r\n",
 8001602:	4909      	ldr	r1, [pc, #36]	; (8001628 <Control_All_TCP_Close_Message+0x34>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2213      	movs	r2, #19
 8001608:	0018      	movs	r0, r3
 800160a:	f004 f85b 	bl	80056c4 <strncmp>
 800160e:	0003      	movs	r3, r0
 8001610:	60fb      	str	r3, [r7, #12]
			strlen("\r\n\r\nSHUT OK\r\n\r\nOK\r\n"));
	if (result == 0)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <Control_All_TCP_Close_Message+0x28>
		return SUCCESS;
 8001618:	2300      	movs	r3, #0
 800161a:	e000      	b.n	800161e <Control_All_TCP_Close_Message+0x2a>

	return ERROR;
 800161c:	2301      	movs	r3, #1
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b004      	add	sp, #16
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	080061b4 	.word	0x080061b4

0800162c <C16QS_TCP_Sequence>:

/* TCP NORMAL MOD UYGULAMASI */
void C16QS_TCP_Sequence(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	uint8_t try_counter = 0;
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]

	switch (StepStatus) {
 8001638:	4b89      	ldr	r3, [pc, #548]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b10      	cmp	r3, #16
 800163e:	d900      	bls.n	8001642 <C16QS_TCP_Sequence+0x16>
 8001640:	e108      	b.n	8001854 <C16QS_TCP_Sequence+0x228>
 8001642:	009a      	lsls	r2, r3, #2
 8001644:	4b87      	ldr	r3, [pc, #540]	; (8001864 <C16QS_TCP_Sequence+0x238>)
 8001646:	18d3      	adds	r3, r2, r3
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	469f      	mov	pc, r3
	case step_pwrkey:
		PowerKeyFunction();
 800164c:	f7ff f816 	bl	800067c <PowerKeyFunction>
		HAL_Delay(500);
 8001650:	23fa      	movs	r3, #250	; 0xfa
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	0018      	movs	r0, r3
 8001656:	f000 fca1 	bl	8001f9c <HAL_Delay>
		StepStatus = step_rst;
 800165a:	4b81      	ldr	r3, [pc, #516]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
		break;
 8001660:	e0f9      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	case step_rst:
		ResetKeyFunction();
 8001662:	f7ff f838 	bl	80006d6 <ResetKeyFunction>
		StepStatus = step_echo_dis;
 8001666:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001668:	2202      	movs	r2, #2
 800166a:	701a      	strb	r2, [r3, #0]
		break;
 800166c:	e0f3      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	case step_echo_dis:
		Echo_Disable();
 800166e:	f7ff f841 	bl	80006f4 <Echo_Disable>
		StepStatus = step_alive_control;
 8001672:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001674:	2203      	movs	r2, #3
 8001676:	701a      	strb	r2, [r3, #0]
		break;
 8001678:	e0ed      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	case step_alive_control:
		if (Alive_Control() == ERROR)
 800167a:	f7ff f88b 	bl	8000794 <Alive_Control>
 800167e:	0003      	movs	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d103      	bne.n	800168c <C16QS_TCP_Sequence+0x60>
			StepStatus = step_pwrkey;
 8001684:	4b76      	ldr	r3, [pc, #472]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
		else
			StepStatus = step_func_control;
		break;
 800168a:	e0e4      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			StepStatus = step_func_control;
 800168c:	4b74      	ldr	r3, [pc, #464]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 800168e:	2204      	movs	r2, #4
 8001690:	701a      	strb	r2, [r3, #0]
		break;
 8001692:	e0e0      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	case step_func_control:
		if (Modul_Function_Control() == ERROR)
 8001694:	f7ff f904 	bl	80008a0 <Modul_Function_Control>
 8001698:	0003      	movs	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	d103      	bne.n	80016a6 <C16QS_TCP_Sequence+0x7a>
			StepStatus = step_func_enable;
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80016a0:	2205      	movs	r2, #5
 80016a2:	701a      	strb	r2, [r3, #0]
		else
			StepStatus = step_NetworkReg;
		break;
 80016a4:	e0d7      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			StepStatus = step_NetworkReg;
 80016a6:	4b6e      	ldr	r3, [pc, #440]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80016a8:	2206      	movs	r2, #6
 80016aa:	701a      	strb	r2, [r3, #0]
		break;
 80016ac:	e0d3      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	case step_func_enable:
		if (Modul_Function_Enable() == ERROR)
 80016ae:	f7ff f979 	bl	80009a4 <Modul_Function_Enable>
 80016b2:	0003      	movs	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d103      	bne.n	80016c0 <C16QS_TCP_Sequence+0x94>
			StepStatus = step_pwrkey;
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
		else
			StepStatus = step_NetworkReg;
		break;
 80016be:	e0ca      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			StepStatus = step_NetworkReg;
 80016c0:	4b67      	ldr	r3, [pc, #412]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80016c2:	2206      	movs	r2, #6
 80016c4:	701a      	strb	r2, [r3, #0]
		break;
 80016c6:	e0c6      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	case step_NetworkReg:
		if (Network_Register_Control() == ERROR) {
 80016c8:	f7ff f9d2 	bl	8000a70 <Network_Register_Control>
 80016cc:	0003      	movs	r3, r0
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d115      	bne.n	80016fe <C16QS_TCP_Sequence+0xd2>
			try_counter++;
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	3201      	adds	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
			if (try_counter == 10) {
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b0a      	cmp	r3, #10
 80016e2:	d103      	bne.n	80016ec <C16QS_TCP_Sequence+0xc0>
				StepStatus = step_pwrkey;
 80016e4:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
				break;
 80016ea:	e0b4      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			} else {
				HAL_Delay(2000);
 80016ec:	23fa      	movs	r3, #250	; 0xfa
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	0018      	movs	r0, r3
 80016f2:	f000 fc53 	bl	8001f9c <HAL_Delay>
				StepStatus = step_NetworkReg;
 80016f6:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80016f8:	2206      	movs	r2, #6
 80016fa:	701a      	strb	r2, [r3, #0]
				break;
 80016fc:	e0ab      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			}
		} else {
			try_counter = 0;
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
			StepStatus = step_internet_control;
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001706:	2208      	movs	r2, #8
 8001708:	701a      	strb	r2, [r3, #0]
			break;
 800170a:	e0a4      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

	case step_internet_control:
		if (Internet_Control() == ERROR) {
 800170c:	f7ff fa3c 	bl	8000b88 <Internet_Control>
 8001710:	0003      	movs	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	d115      	bne.n	8001742 <C16QS_TCP_Sequence+0x116>
			try_counter++;
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	3201      	adds	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
			if (try_counter == 10) {
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b0a      	cmp	r3, #10
 8001726:	d103      	bne.n	8001730 <C16QS_TCP_Sequence+0x104>
				StepStatus = step_pwrkey;
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
				break;
 800172e:	e092      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			} else {
				HAL_Delay(2000);
 8001730:	23fa      	movs	r3, #250	; 0xfa
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	0018      	movs	r0, r3
 8001736:	f000 fc31 	bl	8001f9c <HAL_Delay>
				StepStatus = step_internet_control;
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 800173c:	2208      	movs	r2, #8
 800173e:	701a      	strb	r2, [r3, #0]
				break;
 8001740:	e089      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			}
		}
		StepStatus = step_cipmux_setting;
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001744:	2209      	movs	r2, #9
 8001746:	701a      	strb	r2, [r3, #0]
		break;
 8001748:	e085      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	case step_cipmux_setting:
		if (CIPMUX_setting() == ERROR) {
 800174a:	f7ff fa9f 	bl	8000c8c <CIPMUX_setting>
 800174e:	0003      	movs	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d103      	bne.n	800175c <C16QS_TCP_Sequence+0x130>
			StepStatus = step_pwrkey;
 8001754:	4b42      	ldr	r3, [pc, #264]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
			break;
 800175a:	e07c      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		} else {
			try_counter =0;
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
			StepStatus = step_cipstart;
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001764:	220a      	movs	r2, #10
 8001766:	701a      	strb	r2, [r3, #0]
			break;
 8001768:	e075      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

	case step_cipstart:
		if (CIPSTART_setting(DestinationIP, DestinationPort) == ERROR) {
 800176a:	4a3f      	ldr	r2, [pc, #252]	; (8001868 <C16QS_TCP_Sequence+0x23c>)
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <C16QS_TCP_Sequence+0x240>)
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fb19 	bl	8000da8 <CIPSTART_setting>
 8001776:	0003      	movs	r3, r0
 8001778:	2b01      	cmp	r3, #1
 800177a:	d115      	bne.n	80017a8 <C16QS_TCP_Sequence+0x17c>
			try_counter++;
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	3201      	adds	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
			if (try_counter == 10) {
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d103      	bne.n	8001796 <C16QS_TCP_Sequence+0x16a>
				StepStatus = step_pwrkey;
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
				break;
 8001794:	e05f      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			} else {
				HAL_Delay(2000);
 8001796:	23fa      	movs	r3, #250	; 0xfa
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fbfe 	bl	8001f9c <HAL_Delay>
				StepStatus = step_cipstart;
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80017a2:	220a      	movs	r2, #10
 80017a4:	701a      	strb	r2, [r3, #0]
				break;
 80017a6:	e056      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
			}
		} else {
			StepStatus = step_Control_TCP_connection;
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80017aa:	220b      	movs	r2, #11
 80017ac:	701a      	strb	r2, [r3, #0]
			break;
 80017ae:	e052      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

	case step_Control_TCP_connection:
		if (Control_TCP_connection() == ERROR) {
 80017b0:	f7ff fb98 	bl	8000ee4 <Control_TCP_connection>
 80017b4:	0003      	movs	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d103      	bne.n	80017c2 <C16QS_TCP_Sequence+0x196>
			StepStatus = step_pwrkey;
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
			break;
 80017c0:	e049      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		} else {
			StepStatus = step_Send_data_to_TCP;
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80017c4:	220c      	movs	r2, #12
 80017c6:	701a      	strb	r2, [r3, #0]
			break;
 80017c8:	e045      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

		/* Belirli sayida veri gonderme */
	case step_Send_data_to_TCP:
		if (Send_Data_to_TCP("Merhaba Cavli Wireless", 22) == ERROR) {
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <C16QS_TCP_Sequence+0x244>)
 80017cc:	2116      	movs	r1, #22
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff fc2e 	bl	8001030 <Send_Data_to_TCP>
 80017d4:	0003      	movs	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d103      	bne.n	80017e2 <C16QS_TCP_Sequence+0x1b6>
			StepStatus = step_pwrkey;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
			break;
 80017e0:	e039      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		} else {
			StepStatus = step_Send_data_to_TCP_2;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80017e4:	220d      	movs	r2, #13
 80017e6:	701a      	strb	r2, [r3, #0]
			break;
 80017e8:	e035      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

	case step_Send_data_to_TCP_2:
		if (Send_Data_to_TCP_2("Merhaba Cavli Wireless") == ERROR) {
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <C16QS_TCP_Sequence+0x244>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff fd2f 	bl	8001250 <Send_Data_to_TCP_2>
 80017f2:	0003      	movs	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d103      	bne.n	8001800 <C16QS_TCP_Sequence+0x1d4>
			StepStatus = step_pwrkey;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
			break;
 80017fe:	e02a      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		} else {
			StepStatus = step_Close_TCP;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001802:	220e      	movs	r2, #14
 8001804:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8001806:	23fa      	movs	r3, #250	; 0xfa
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fbc6 	bl	8001f9c <HAL_Delay>
			break;
 8001810:	e021      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

	case step_Close_TCP:
		if (TCP_close() == ERROR) {
 8001812:	f7ff fdf1 	bl	80013f8 <TCP_close>
 8001816:	0003      	movs	r3, r0
 8001818:	2b01      	cmp	r3, #1
 800181a:	d103      	bne.n	8001824 <C16QS_TCP_Sequence+0x1f8>
			StepStatus = step_pwrkey;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
			break;
 8001822:	e018      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		} else {
			StepStatus = step_All_TCP_Close;
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001826:	220f      	movs	r2, #15
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e014      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

	case step_All_TCP_Close:
		if (All_TCP_close() == ERROR) {
 800182c:	f7ff fe74 	bl	8001518 <All_TCP_close>
 8001830:	0003      	movs	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d103      	bne.n	800183e <C16QS_TCP_Sequence+0x212>
			StepStatus = step_pwrkey;
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
			break;
 800183c:	e00b      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		} else {
			StepStatus = step_listen;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 8001840:	2210      	movs	r2, #16
 8001842:	701a      	strb	r2, [r3, #0]
			break;
 8001844:	e007      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>
		}
		break;

	case step_listen:
		HAL_Delay(10);
 8001846:	200a      	movs	r0, #10
 8001848:	f000 fba8 	bl	8001f9c <HAL_Delay>
		StepStatus = step_listen;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <C16QS_TCP_Sequence+0x234>)
 800184e:	2210      	movs	r2, #16
 8001850:	701a      	strb	r2, [r3, #0]
		break;
 8001852:	e000      	b.n	8001856 <C16QS_TCP_Sequence+0x22a>

	default:
		break;
 8001854:	46c0      	nop			; (mov r8, r8)
	}

}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	20000078 	.word	0x20000078
 8001864:	080061e0 	.word	0x080061e0
 8001868:	000015b3 	.word	0x000015b3
 800186c:	08006104 	.word	0x08006104
 8001870:	080061c8 	.word	0x080061c8

08001874 <C16QS_Serial_Enqueue_Queue>:
		return SUCCESS;
	}
	return ERROR;
}

ErrorStatus C16QS_Serial_Enqueue_Queue(C16QS_Buf_s *pointer, uint8_t *data) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	pointer->data_buf[pointer->write_pointer] = *data;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	885b      	ldrh	r3, [r3, #2]
 8001882:	0019      	movs	r1, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	185b      	adds	r3, r3, r1
 800188c:	711a      	strb	r2, [r3, #4]
	pointer->write_pointer = (pointer->write_pointer + 1) % C16QS_Buf_Size;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	885b      	ldrh	r3, [r3, #2]
 8001892:	3301      	adds	r3, #1
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <C16QS_Serial_Enqueue_Queue+0x40>)
 8001896:	4013      	ands	r3, r2
 8001898:	d503      	bpl.n	80018a2 <C16QS_Serial_Enqueue_Queue+0x2e>
 800189a:	3b01      	subs	r3, #1
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <C16QS_Serial_Enqueue_Queue+0x44>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	3301      	adds	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	805a      	strh	r2, [r3, #2]
	return SUCCESS;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	800007ff 	.word	0x800007ff
 80018b8:	fffff800 	.word	0xfffff800

080018bc <C16QS_Serial_Dequeue_Queue>:

void C16QS_Serial_Dequeue_Queue(C16QS_Buf_s *pointer) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if (pointer->read_pointer == pointer->write_pointer) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	885b      	ldrh	r3, [r3, #2]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d106      	bne.n	80018de <C16QS_Serial_Dequeue_Queue+0x22>
		pointer->read_pointer = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	801a      	strh	r2, [r3, #0]
		pointer->write_pointer = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	805a      	strh	r2, [r3, #2]
	} else {
		pointer->read_pointer = (pointer->read_pointer + 1) % C16QS_Buf_Size;
	}
}
 80018dc:	e00c      	b.n	80018f8 <C16QS_Serial_Dequeue_Queue+0x3c>
		pointer->read_pointer = (pointer->read_pointer + 1) % C16QS_Buf_Size;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <C16QS_Serial_Dequeue_Queue+0x44>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	d503      	bpl.n	80018f2 <C16QS_Serial_Dequeue_Queue+0x36>
 80018ea:	3b01      	subs	r3, #1
 80018ec:	4a05      	ldr	r2, [pc, #20]	; (8001904 <C16QS_Serial_Dequeue_Queue+0x48>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	3301      	adds	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	801a      	strh	r2, [r3, #0]
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	800007ff 	.word	0x800007ff
 8001904:	fffff800 	.word	0xfffff800

08001908 <C16QS_Serial_Front_of_Queue>:

uint8_t C16QS_Serial_Front_of_Queue(C16QS_Buf_s *pointer) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	uint8_t r_byte = 0;
 8001910:	200f      	movs	r0, #15
 8001912:	183b      	adds	r3, r7, r0
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	r_byte = pointer->data_buf[pointer->read_pointer];
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	0019      	movs	r1, r3
 800191e:	183b      	adds	r3, r7, r0
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	1852      	adds	r2, r2, r1
 8001924:	7912      	ldrb	r2, [r2, #4]
 8001926:	701a      	strb	r2, [r3, #0]
	return r_byte;
 8001928:	183b      	adds	r3, r7, r0
 800192a:	781b      	ldrb	r3, [r3, #0]
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b004      	add	sp, #16
 8001932:	bd80      	pop	{r7, pc}

08001934 <C16QS_Serial_Flush_Queue>:

void C16QS_Serial_Flush_Queue(C16QS_Buf_s *pointer) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	pointer->read_pointer = 0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	801a      	strh	r2, [r3, #0]
	pointer->write_pointer = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	805a      	strh	r2, [r3, #2]
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <C16QS_Serial_Get_Item_Count_in_Queue>:

uint16_t C16QS_Serial_Get_Item_Count_in_Queue(C16QS_Buf_s *pointer) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	uint16_t r_count = 0;
 8001958:	230e      	movs	r3, #14
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2200      	movs	r2, #0
 800195e:	801a      	strh	r2, [r3, #0]
	r_count = ((pointer->write_pointer + C16QS_Buf_Size)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	885b      	ldrh	r3, [r3, #2]
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	4694      	mov	ip, r2
 800196a:	4463      	add	r3, ip
			- (pointer->read_pointer)) % C16QS_Buf_Size;
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	8812      	ldrh	r2, [r2, #0]
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <C16QS_Serial_Get_Item_Count_in_Queue+0x44>)
 8001974:	4013      	ands	r3, r2
 8001976:	d503      	bpl.n	8001980 <C16QS_Serial_Get_Item_Count_in_Queue+0x30>
 8001978:	3b01      	subs	r3, #1
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <C16QS_Serial_Get_Item_Count_in_Queue+0x48>)
 800197c:	4313      	orrs	r3, r2
 800197e:	3301      	adds	r3, #1
 8001980:	001a      	movs	r2, r3
	r_count = ((pointer->write_pointer + C16QS_Buf_Size)
 8001982:	210e      	movs	r1, #14
 8001984:	187b      	adds	r3, r7, r1
 8001986:	801a      	strh	r2, [r3, #0]
	return r_count;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	881b      	ldrh	r3, [r3, #0]
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}
 8001994:	800007ff 	.word	0x800007ff
 8001998:	fffff800 	.word	0xfffff800

0800199c <C16QS_Get_Data_Byte>:

char C16QS_Get_Data_Byte(void) {
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
	uint8_t d_byte = C16QS_Serial_Front_of_Queue(&C16QS_Buf);
 80019a2:	1dfc      	adds	r4, r7, #7
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <C16QS_Get_Data_Byte+0x28>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff ffae 	bl	8001908 <C16QS_Serial_Front_of_Queue>
 80019ac:	0003      	movs	r3, r0
 80019ae:	7023      	strb	r3, [r4, #0]
	C16QS_Serial_Dequeue_Queue(&C16QS_Buf);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <C16QS_Get_Data_Byte+0x28>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff ff82 	bl	80018bc <C16QS_Serial_Dequeue_Queue>
	return d_byte;
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	781b      	ldrb	r3, [r3, #0]
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b003      	add	sp, #12
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	2000007c 	.word	0x2000007c

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019cc:	f000 fa60 	bl	8001e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d0:	f000 f814 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d4:	f000 f8a8 	bl	8001b28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019d8:	f000 f858 	bl	8001a8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &C16QS_rx, 1);
 80019dc:	4905      	ldr	r1, [pc, #20]	; (80019f4 <main+0x2c>)
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <main+0x30>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	0018      	movs	r0, r3
 80019e4:	f001 fe02 	bl	80035ec <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  C16QS_TCP_Sequence();
 80019e8:	f7ff fe20 	bl	800162c <C16QS_TCP_Sequence>
	  HAL_Delay(10);
 80019ec:	200a      	movs	r0, #10
 80019ee:	f000 fad5 	bl	8001f9c <HAL_Delay>
	  C16QS_TCP_Sequence();
 80019f2:	e7f9      	b.n	80019e8 <main+0x20>
 80019f4:	20000880 	.word	0x20000880
 80019f8:	20000884 	.word	0x20000884

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b093      	sub	sp, #76	; 0x4c
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	2410      	movs	r4, #16
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	0018      	movs	r0, r3
 8001a08:	2338      	movs	r3, #56	; 0x38
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f003 fe51 	bl	80056b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a12:	003b      	movs	r3, r7
 8001a14:	0018      	movs	r0, r3
 8001a16:	2310      	movs	r3, #16
 8001a18:	001a      	movs	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f003 fe4a 	bl	80056b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f000 fe1f 	bl	8002668 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	0052      	lsls	r2, r2, #1
 8001a36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 fe57 	bl	8002700 <HAL_RCC_OscConfig>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001a56:	f000 f8e9 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	003b      	movs	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a72:	003b      	movs	r3, r7
 8001a74:	2100      	movs	r1, #0
 8001a76:	0018      	movs	r0, r3
 8001a78:	f001 f95c 	bl	8002d34 <HAL_RCC_ClockConfig>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001a80:	f000 f8d4 	bl	8001c2c <Error_Handler>
  }
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b013      	add	sp, #76	; 0x4c
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001a92:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <MX_USART1_UART_Init+0x98>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001a98:	22e1      	movs	r2, #225	; 0xe1
 8001a9a:	0252      	lsls	r2, r2, #9
 8001a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f001 fc8e 	bl	80033f8 <HAL_UART_Init>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ae0:	f000 f8a4 	bl	8001c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f003 fce3 	bl	80054b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001af2:	f000 f89b 	bl	8001c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001af8:	2100      	movs	r1, #0
 8001afa:	0018      	movs	r0, r3
 8001afc:	f003 fd1a 	bl	8005534 <HAL_UARTEx_SetRxFifoThreshold>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b04:	f000 f892 	bl	8001c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <MX_USART1_UART_Init+0x94>)
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f003 fc98 	bl	8005440 <HAL_UARTEx_DisableFifoMode>
 8001b10:	1e03      	subs	r3, r0, #0
 8001b12:	d001      	beq.n	8001b18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b14:	f000 f88a 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	20000884 	.word	0x20000884
 8001b24:	40013800 	.word	0x40013800

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	240c      	movs	r4, #12
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	0018      	movs	r0, r3
 8001b34:	2314      	movs	r3, #20
 8001b36:	001a      	movs	r2, r3
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f003 fdbb 	bl	80056b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b44:	2104      	movs	r1, #4
 8001b46:	430a      	orrs	r2, r1
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	2204      	movs	r2, #4
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b56:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	2220      	movs	r2, #32
 8001b68:	4013      	ands	r3, r2
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <MX_GPIO_Init+0xfc>)
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4013      	ands	r3, r2
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|RstKey_Pin, GPIO_PIN_RESET);
 8001b86:	2390      	movs	r3, #144	; 0x90
 8001b88:	0059      	lsls	r1, r3, #1
 8001b8a:	23a0      	movs	r3, #160	; 0xa0
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	2200      	movs	r2, #0
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 fd4b 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PowerKey_GPIO_Port, PowerKey_Pin, GPIO_PIN_RESET);
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <MX_GPIO_Init+0x100>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 fd45 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	2201      	movs	r2, #1
 8001bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001bba:	193a      	adds	r2, r7, r4
 8001bbc:	23a0      	movs	r3, #160	; 0xa0
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fbce 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : RstKey_Pin */
  GPIO_InitStruct.Pin = RstKey_Pin;
 8001bc8:	0021      	movs	r1, r4
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	0052      	lsls	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	000c      	movs	r4, r1
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RstKey_GPIO_Port, &GPIO_InitStruct);
 8001be6:	193a      	adds	r2, r7, r4
 8001be8:	23a0      	movs	r3, #160	; 0xa0
 8001bea:	05db      	lsls	r3, r3, #23
 8001bec:	0011      	movs	r1, r2
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 fbb8 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerKey_Pin */
  GPIO_InitStruct.Pin = PowerKey_Pin;
 8001bf4:	0021      	movs	r1, r4
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2201      	movs	r2, #1
 8001c00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PowerKey_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <MX_GPIO_Init+0x100>)
 8001c12:	0019      	movs	r1, r3
 8001c14:	0010      	movs	r0, r2
 8001c16:	f000 fba5 	bl	8002364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b009      	add	sp, #36	; 0x24
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000
 8001c28:	50000800 	.word	0x50000800

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <Error_Handler+0x8>
	...

08001c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0549      	lsls	r1, r1, #21
 8001c60:	430a      	orrs	r2, r1
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	055b      	lsls	r3, r3, #21
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001c72:	23c0      	movs	r3, #192	; 0xc0
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 f9b4 	bl	8001fe4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b002      	add	sp, #8
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b097      	sub	sp, #92	; 0x5c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	2344      	movs	r3, #68	; 0x44
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	0018      	movs	r0, r3
 8001c96:	2314      	movs	r3, #20
 8001c98:	001a      	movs	r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f003 fd0a 	bl	80056b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca0:	2410      	movs	r4, #16
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	2334      	movs	r3, #52	; 0x34
 8001ca8:	001a      	movs	r2, r3
 8001caa:	2100      	movs	r1, #0
 8001cac:	f003 fd02 	bl	80056b4 <memset>
  if(huart->Instance==USART1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a26      	ldr	r2, [pc, #152]	; (8001d50 <HAL_UART_MspInit+0xc8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d145      	bne.n	8001d46 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cba:	193b      	adds	r3, r7, r4
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f001 f9dd 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cd2:	f7ff ffab 	bl	8001c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_UART_MspInit+0xcc>)
 8001cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_UART_MspInit+0xcc>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	01c9      	lsls	r1, r1, #7
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_UART_MspInit+0xcc>)
 8001ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	01db      	lsls	r3, r3, #7
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_UART_MspInit+0xcc>)
 8001cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_UART_MspInit+0xcc>)
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_UART_MspInit+0xcc>)
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d0a:	2144      	movs	r1, #68	; 0x44
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2230      	movs	r2, #48	; 0x30
 8001d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2202      	movs	r2, #2
 8001d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2201      	movs	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_UART_MspInit+0xd0>)
 8001d2e:	0019      	movs	r1, r3
 8001d30:	0010      	movs	r0, r2
 8001d32:	f000 fb17 	bl	8002364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	201b      	movs	r0, #27
 8001d3c:	f000 fa14 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d40:	201b      	movs	r0, #27
 8001d42:	f000 fa26 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b017      	add	sp, #92	; 0x5c
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	50000800 	.word	0x50000800

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 f8f0 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <USART1_IRQHandler+0x2c>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f001 fc88 	bl	80036a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	C16QS_Serial_Enqueue_Queue(&C16QS_Buf, &C16QS_rx);
 8001d98:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <USART1_IRQHandler+0x30>)
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <USART1_IRQHandler+0x34>)
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7ff fd68 	bl	8001874 <C16QS_Serial_Enqueue_Queue>
	HAL_UART_Receive_IT(&huart1, &C16QS_rx, 1);
 8001da4:	4905      	ldr	r1, [pc, #20]	; (8001dbc <USART1_IRQHandler+0x30>)
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <USART1_IRQHandler+0x2c>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	0018      	movs	r0, r3
 8001dac:	f001 fc1e 	bl	80035ec <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	20000884 	.word	0x20000884
 8001dbc:	20000880 	.word	0x20000880
 8001dc0:	2000007c 	.word	0x2000007c

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f003 fc78 	bl	80056e8 <__errno>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	425b      	negs	r3, r3
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	18d2      	adds	r2, r2, r3
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b006      	add	sp, #24
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20009000 	.word	0x20009000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	20000918 	.word	0x20000918
 8001e2c:	20000a68 	.word	0x20000a68

08001e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e40:	f7ff fff6 	bl	8001e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e46:	490d      	ldr	r1, [pc, #52]	; (8001e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <LoopForever+0xe>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	; (8001e88 <LoopForever+0x16>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e6a:	f003 fc43 	bl	80056f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e6e:	f7ff fdab 	bl	80019c8 <main>

08001e72 <LoopForever>:

LoopForever:
  b LoopForever
 8001e72:	e7fe      	b.n	8001e72 <LoopForever>
  ldr   r0, =_estack
 8001e74:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e80:	080062f0 	.word	0x080062f0
  ldr r2, =_sbss
 8001e84:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e88:	20000a68 	.word	0x20000a68

08001e8c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC1_COMP_IRQHandler>
	...

08001e90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e96:	1dfb      	adds	r3, r7, #7
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_Init+0x3c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Init+0x3c>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	0049      	lsls	r1, r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 f810 	bl	8001ed0 <HAL_InitTick>
 8001eb0:	1e03      	subs	r3, r0, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e001      	b.n	8001ec0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ebc:	f7ff febc 	bl	8001c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ec0:	1dfb      	adds	r3, r7, #7
 8001ec2:	781b      	ldrb	r3, [r3, #0]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_InitTick+0x88>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d02b      	beq.n	8001f40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_InitTick+0x8c>)
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_InitTick+0x88>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	23fa      	movs	r3, #250	; 0xfa
 8001ef4:	0098      	lsls	r0, r3, #2
 8001ef6:	f7fe f917 	bl	8000128 <__udivsi3>
 8001efa:	0003      	movs	r3, r0
 8001efc:	0019      	movs	r1, r3
 8001efe:	0020      	movs	r0, r4
 8001f00:	f7fe f912 	bl	8000128 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 f953 	bl	80021b2 <HAL_SYSTICK_Config>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d112      	bne.n	8001f36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d80a      	bhi.n	8001f2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	425b      	negs	r3, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 f922 	bl	8002168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_InitTick+0x90>)
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e00d      	b.n	8001f48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e008      	b.n	8001f48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f36:	230f      	movs	r3, #15
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e003      	b.n	8001f48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f40:	230f      	movs	r3, #15
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f48:	230f      	movs	r3, #15
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b005      	add	sp, #20
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_IncTick+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_IncTick+0x20>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	18d2      	adds	r2, r2, r3
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_IncTick+0x20>)
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	20000008 	.word	0x20000008
 8001f84:	2000091c 	.word	0x2000091c

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_GetTick+0x10>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	2000091c 	.word	0x2000091c

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	001a      	movs	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	189b      	adds	r3, r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	f7ff ffe0 	bl	8001f88 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	40010000 	.word	0x40010000
 800200c:	fffff9ff 	.word	0xfffff9ff

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	0002      	movs	r2, r0
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b7f      	cmp	r3, #127	; 0x7f
 8002022:	d809      	bhi.n	8002038 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	001a      	movs	r2, r3
 800202a:	231f      	movs	r3, #31
 800202c:	401a      	ands	r2, r3
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <__NVIC_EnableIRQ+0x30>)
 8002030:	2101      	movs	r1, #1
 8002032:	4091      	lsls	r1, r2
 8002034:	000a      	movs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	0002      	movs	r2, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b7f      	cmp	r3, #127	; 0x7f
 8002058:	d828      	bhi.n	80020ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800205a:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <__NVIC_SetPriority+0xd4>)
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b25b      	sxtb	r3, r3
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	33c0      	adds	r3, #192	; 0xc0
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	589b      	ldr	r3, [r3, r2]
 800206a:	1dfa      	adds	r2, r7, #7
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	0011      	movs	r1, r2
 8002070:	2203      	movs	r2, #3
 8002072:	400a      	ands	r2, r1
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	21ff      	movs	r1, #255	; 0xff
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	43d2      	mvns	r2, r2
 800207e:	401a      	ands	r2, r3
 8002080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	401a      	ands	r2, r3
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	2303      	movs	r3, #3
 8002092:	4003      	ands	r3, r0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002098:	481f      	ldr	r0, [pc, #124]	; (8002118 <__NVIC_SetPriority+0xd4>)
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	430a      	orrs	r2, r1
 80020a4:	33c0      	adds	r3, #192	; 0xc0
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020aa:	e031      	b.n	8002110 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <__NVIC_SetPriority+0xd8>)
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	0019      	movs	r1, r3
 80020b4:	230f      	movs	r3, #15
 80020b6:	400b      	ands	r3, r1
 80020b8:	3b08      	subs	r3, #8
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3306      	adds	r3, #6
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	18d3      	adds	r3, r2, r3
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1dfa      	adds	r2, r7, #7
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	0011      	movs	r1, r2
 80020cc:	2203      	movs	r2, #3
 80020ce:	400a      	ands	r2, r1
 80020d0:	00d2      	lsls	r2, r2, #3
 80020d2:	21ff      	movs	r1, #255	; 0xff
 80020d4:	4091      	lsls	r1, r2
 80020d6:	000a      	movs	r2, r1
 80020d8:	43d2      	mvns	r2, r2
 80020da:	401a      	ands	r2, r3
 80020dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	22ff      	movs	r2, #255	; 0xff
 80020e4:	401a      	ands	r2, r3
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	0018      	movs	r0, r3
 80020ec:	2303      	movs	r3, #3
 80020ee:	4003      	ands	r3, r0
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f4:	4809      	ldr	r0, [pc, #36]	; (800211c <__NVIC_SetPriority+0xd8>)
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	001c      	movs	r4, r3
 80020fc:	230f      	movs	r3, #15
 80020fe:	4023      	ands	r3, r4
 8002100:	3b08      	subs	r3, #8
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	430a      	orrs	r2, r1
 8002106:	3306      	adds	r3, #6
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	18c3      	adds	r3, r0, r3
 800210c:	3304      	adds	r3, #4
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b003      	add	sp, #12
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	045b      	lsls	r3, r3, #17
 8002130:	429a      	cmp	r2, r3
 8002132:	d301      	bcc.n	8002138 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002134:	2301      	movs	r3, #1
 8002136:	e010      	b.n	800215a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <SysTick_Config+0x44>)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	3a01      	subs	r2, #1
 800213e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002140:	2301      	movs	r3, #1
 8002142:	425b      	negs	r3, r3
 8002144:	2103      	movs	r1, #3
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff ff7c 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SysTick_Config+0x44>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SysTick_Config+0x44>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	210f      	movs	r1, #15
 8002174:	187b      	adds	r3, r7, r1
 8002176:	1c02      	adds	r2, r0, #0
 8002178:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	187b      	adds	r3, r7, r1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	0011      	movs	r1, r2
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b004      	add	sp, #16
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	0002      	movs	r2, r0
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff ff33 	bl	8002010 <__NVIC_EnableIRQ>
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ffaf 	bl	8002120 <SysTick_Config>
 80021c2:	0003      	movs	r3, r0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e050      	b.n	8002280 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2225      	movs	r2, #37	; 0x25
 80021e2:	5c9b      	ldrb	r3, [r3, r2]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d008      	beq.n	80021fc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2204      	movs	r2, #4
 80021ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2224      	movs	r2, #36	; 0x24
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e041      	b.n	8002280 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	210e      	movs	r1, #14
 8002208:	438a      	bics	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	491c      	ldr	r1, [pc, #112]	; (8002288 <HAL_DMA_Abort+0xbc>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2101      	movs	r1, #1
 8002228:	438a      	bics	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_DMA_Abort+0xc0>)
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	221c      	movs	r2, #28
 8002236:	4013      	ands	r3, r2
 8002238:	2201      	movs	r2, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_DMA_Abort+0xc0>)
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800224a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225e:	490a      	ldr	r1, [pc, #40]	; (8002288 <HAL_DMA_Abort+0xbc>)
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800226c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2225      	movs	r2, #37	; 0x25
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2224      	movs	r2, #36	; 0x24
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}
 8002288:	fffffeff 	.word	0xfffffeff
 800228c:	40020000 	.word	0x40020000

08002290 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	210f      	movs	r1, #15
 800229a:	187b      	adds	r3, r7, r1
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2225      	movs	r2, #37	; 0x25
 80022a4:	5c9b      	ldrb	r3, [r3, r2]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d006      	beq.n	80022ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2204      	movs	r2, #4
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e049      	b.n	800234e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	210e      	movs	r1, #14
 80022c6:	438a      	bics	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	438a      	bics	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	491d      	ldr	r1, [pc, #116]	; (800235c <HAL_DMA_Abort_IT+0xcc>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_DMA_Abort_IT+0xd0>)
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	221c      	movs	r2, #28
 80022f4:	4013      	ands	r3, r2
 80022f6:	2201      	movs	r2, #1
 80022f8:	409a      	lsls	r2, r3
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_DMA_Abort_IT+0xd0>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002308:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	490f      	ldr	r1, [pc, #60]	; (800235c <HAL_DMA_Abort_IT+0xcc>)
 800231e:	400a      	ands	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800232a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2225      	movs	r2, #37	; 0x25
 8002330:	2101      	movs	r1, #1
 8002332:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	; 0x24
 8002338:	2100      	movs	r1, #0
 800233a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	0010      	movs	r0, r2
 800234c:	4798      	blx	r3
    }
  }
  return status;
 800234e:	230f      	movs	r3, #15
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	781b      	ldrb	r3, [r3, #0]
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fffffeff 	.word	0xfffffeff
 8002360:	40020000 	.word	0x40020000

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e147      	b.n	8002604 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4091      	lsls	r1, r2
 800237e:	000a      	movs	r2, r1
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d100      	bne.n	800238c <HAL_GPIO_Init+0x28>
 800238a:	e138      	b.n	80025fe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	4013      	ands	r3, r2
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2203      	movs	r2, #3
 800239e:	4013      	ands	r3, r2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	409a      	lsls	r2, r3
 80023b2:	0013      	movs	r3, r2
 80023b4:	43da      	mvns	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	409a      	lsls	r2, r3
 80023c6:	0013      	movs	r3, r2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	43da      	mvns	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	2201      	movs	r2, #1
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
 80023f8:	0013      	movs	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2203      	movs	r2, #3
 800240c:	4013      	ands	r3, r2
 800240e:	2b03      	cmp	r3, #3
 8002410:	d017      	beq.n	8002442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	409a      	lsls	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	43da      	mvns	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	0013      	movs	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2203      	movs	r2, #3
 8002448:	4013      	ands	r3, r2
 800244a:	2b02      	cmp	r3, #2
 800244c:	d123      	bne.n	8002496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	58d3      	ldr	r3, [r2, r3]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2207      	movs	r2, #7
 8002460:	4013      	ands	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2107      	movs	r1, #7
 800247a:	400b      	ands	r3, r1
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	409a      	lsls	r2, r3
 80024a4:	0013      	movs	r3, r2
 80024a6:	43da      	mvns	r2, r3
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2203      	movs	r2, #3
 80024b4:	401a      	ands	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	23c0      	movs	r3, #192	; 0xc0
 80024d0:	029b      	lsls	r3, r3, #10
 80024d2:	4013      	ands	r3, r2
 80024d4:	d100      	bne.n	80024d8 <HAL_GPIO_Init+0x174>
 80024d6:	e092      	b.n	80025fe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024d8:	4a50      	ldr	r2, [pc, #320]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3318      	adds	r3, #24
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	589b      	ldr	r3, [r3, r2]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2203      	movs	r2, #3
 80024ea:	4013      	ands	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	220f      	movs	r2, #15
 80024f0:	409a      	lsls	r2, r3
 80024f2:	0013      	movs	r3, r2
 80024f4:	43da      	mvns	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	429a      	cmp	r2, r3
 8002504:	d013      	beq.n	800252e <HAL_GPIO_Init+0x1ca>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a45      	ldr	r2, [pc, #276]	; (8002620 <HAL_GPIO_Init+0x2bc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00d      	beq.n	800252a <HAL_GPIO_Init+0x1c6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a44      	ldr	r2, [pc, #272]	; (8002624 <HAL_GPIO_Init+0x2c0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x1c2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a43      	ldr	r2, [pc, #268]	; (8002628 <HAL_GPIO_Init+0x2c4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_GPIO_Init+0x1be>
 800251e:	2303      	movs	r3, #3
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x1cc>
 8002522:	2305      	movs	r3, #5
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x1cc>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x1cc>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x1cc>
 800252e:	2300      	movs	r3, #0
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	2103      	movs	r1, #3
 8002534:	400a      	ands	r2, r1
 8002536:	00d2      	lsls	r2, r2, #3
 8002538:	4093      	lsls	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002540:	4936      	ldr	r1, [pc, #216]	; (800261c <HAL_GPIO_Init+0x2b8>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3318      	adds	r3, #24
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_GPIO_Init+0x2b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43da      	mvns	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	035b      	lsls	r3, r3, #13
 8002566:	4013      	ands	r3, r2
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_GPIO_Init+0x2b8>)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_GPIO_Init+0x2b8>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43da      	mvns	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	039b      	lsls	r3, r3, #14
 8002590:	4013      	ands	r3, r2
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800259c:	4b1f      	ldr	r3, [pc, #124]	; (800261c <HAL_GPIO_Init+0x2b8>)
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80025a4:	2384      	movs	r3, #132	; 0x84
 80025a6:	58d3      	ldr	r3, [r2, r3]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	4013      	ands	r3, r2
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c8:	4914      	ldr	r1, [pc, #80]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80025ca:	2284      	movs	r2, #132	; 0x84
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	58d3      	ldr	r3, [r2, r3]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43da      	mvns	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	025b      	lsls	r3, r3, #9
 80025ea:	4013      	ands	r3, r2
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f6:	4909      	ldr	r1, [pc, #36]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	40da      	lsrs	r2, r3
 800260c:	1e13      	subs	r3, r2, #0
 800260e:	d000      	beq.n	8002612 <HAL_GPIO_Init+0x2ae>
 8002610:	e6b0      	b.n	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b006      	add	sp, #24
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021800 	.word	0x40021800
 8002620:	50000400 	.word	0x50000400
 8002624:	50000800 	.word	0x50000800
 8002628:	50000c00 	.word	0x50000c00

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	0008      	movs	r0, r1
 8002636:	0011      	movs	r1, r2
 8002638:	1cbb      	adds	r3, r7, #2
 800263a:	1c02      	adds	r2, r0, #0
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	1c7b      	adds	r3, r7, #1
 8002640:	1c0a      	adds	r2, r1, #0
 8002642:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002644:	1c7b      	adds	r3, r7, #1
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264c:	1cbb      	adds	r3, r7, #2
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002656:	1cbb      	adds	r3, r7, #2
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d11f      	bne.n	80026cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	0013      	movs	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	189b      	adds	r3, r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4912      	ldr	r1, [pc, #72]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800269a:	0018      	movs	r0, r3
 800269c:	f7fd fd44 	bl	8000128 <__udivsi3>
 80026a0:	0003      	movs	r3, r0
 80026a2:	3301      	adds	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a6:	e008      	b.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e001      	b.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e009      	b.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	401a      	ands	r2, r3
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d0ed      	beq.n	80026a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	40007000 	.word	0x40007000
 80026dc:	fffff9ff 	.word	0xfffff9ff
 80026e0:	20000000 	.word	0x20000000
 80026e4:	000f4240 	.word	0x000f4240

080026e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	23e0      	movs	r3, #224	; 0xe0
 80026f2:	01db      	lsls	r3, r3, #7
 80026f4:	4013      	ands	r3, r2
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e2fe      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	d100      	bne.n	800271e <HAL_RCC_OscConfig+0x1e>
 800271c:	e07c      	b.n	8002818 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271e:	4bc3      	ldr	r3, [pc, #780]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2238      	movs	r2, #56	; 0x38
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002728:	4bc0      	ldr	r3, [pc, #768]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2203      	movs	r2, #3
 800272e:	4013      	ands	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b10      	cmp	r3, #16
 8002736:	d102      	bne.n	800273e <HAL_RCC_OscConfig+0x3e>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d002      	beq.n	8002744 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d10b      	bne.n	800275c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	4bb9      	ldr	r3, [pc, #740]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	4013      	ands	r3, r2
 800274e:	d062      	beq.n	8002816 <HAL_RCC_OscConfig+0x116>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d15e      	bne.n	8002816 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e2d9      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	025b      	lsls	r3, r3, #9
 8002764:	429a      	cmp	r2, r3
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x78>
 8002768:	4bb0      	ldr	r3, [pc, #704]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4baf      	ldr	r3, [pc, #700]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	0249      	lsls	r1, r1, #9
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e020      	b.n	80027ba <HAL_RCC_OscConfig+0xba>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	23a0      	movs	r3, #160	; 0xa0
 800277e:	02db      	lsls	r3, r3, #11
 8002780:	429a      	cmp	r2, r3
 8002782:	d10e      	bne.n	80027a2 <HAL_RCC_OscConfig+0xa2>
 8002784:	4ba9      	ldr	r3, [pc, #676]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4ba8      	ldr	r3, [pc, #672]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	02c9      	lsls	r1, r1, #11
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	4ba6      	ldr	r3, [pc, #664]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4ba5      	ldr	r3, [pc, #660]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	0249      	lsls	r1, r1, #9
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e00b      	b.n	80027ba <HAL_RCC_OscConfig+0xba>
 80027a2:	4ba2      	ldr	r3, [pc, #648]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4ba1      	ldr	r3, [pc, #644]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027a8:	49a1      	ldr	r1, [pc, #644]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	4b9f      	ldr	r3, [pc, #636]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b9e      	ldr	r3, [pc, #632]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027b4:	499f      	ldr	r1, [pc, #636]	; (8002a34 <HAL_RCC_OscConfig+0x334>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d014      	beq.n	80027ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7ff fbe1 	bl	8001f88 <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff fbdc 	bl	8001f88 <HAL_GetTick>
 80027d0:	0002      	movs	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e298      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027de:	4b93      	ldr	r3, [pc, #588]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	029b      	lsls	r3, r3, #10
 80027e6:	4013      	ands	r3, r2
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0xcc>
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7ff fbcc 	bl	8001f88 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f6:	f7ff fbc7 	bl	8001f88 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e283      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002808:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	4013      	ands	r3, r2
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0xf6>
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2202      	movs	r2, #2
 800281e:	4013      	ands	r3, r2
 8002820:	d100      	bne.n	8002824 <HAL_RCC_OscConfig+0x124>
 8002822:	e099      	b.n	8002958 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002824:	4b81      	ldr	r3, [pc, #516]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2238      	movs	r2, #56	; 0x38
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282e:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2203      	movs	r2, #3
 8002834:	4013      	ands	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b10      	cmp	r3, #16
 800283c:	d102      	bne.n	8002844 <HAL_RCC_OscConfig+0x144>
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d002      	beq.n	800284a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d135      	bne.n	80028b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284a:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4013      	ands	r3, r2
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x162>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e256      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002862:	4b72      	ldr	r3, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a74      	ldr	r2, [pc, #464]	; (8002a38 <HAL_RCC_OscConfig+0x338>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	021a      	lsls	r2, r3, #8
 8002872:	4b6e      	ldr	r3, [pc, #440]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6e      	ldr	r2, [pc, #440]	; (8002a3c <HAL_RCC_OscConfig+0x33c>)
 8002884:	4013      	ands	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002892:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0adb      	lsrs	r3, r3, #11
 8002898:	2207      	movs	r2, #7
 800289a:	4013      	ands	r3, r2
 800289c:	4a68      	ldr	r2, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x340>)
 800289e:	40da      	lsrs	r2, r3
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x344>)
 80028a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028a4:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x348>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fb11 	bl	8001ed0 <HAL_InitTick>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d051      	beq.n	8002956 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e22c      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d030      	beq.n	8002920 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a5e      	ldr	r2, [pc, #376]	; (8002a3c <HAL_RCC_OscConfig+0x33c>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	4b57      	ldr	r3, [pc, #348]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	0049      	lsls	r1, r1, #1
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7ff fb52 	bl	8001f88 <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7ff fb4d 	bl	8001f88 <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e209      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fc:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4013      	ands	r3, r2
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b48      	ldr	r3, [pc, #288]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a4a      	ldr	r2, [pc, #296]	; (8002a38 <HAL_RCC_OscConfig+0x338>)
 800290e:	4013      	ands	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	021a      	lsls	r2, r3, #8
 8002918:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e01b      	b.n	8002958 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002920:	4b42      	ldr	r3, [pc, #264]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002926:	4949      	ldr	r1, [pc, #292]	; (8002a4c <HAL_RCC_OscConfig+0x34c>)
 8002928:	400a      	ands	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff fb2c 	bl	8001f88 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7ff fb27 	bl	8001f88 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1e3      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002948:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4013      	ands	r3, r2
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x236>
 8002954:	e000      	b.n	8002958 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002956:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	4013      	ands	r3, r2
 8002960:	d047      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002962:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2238      	movs	r2, #56	; 0x38
 8002968:	4013      	ands	r3, r2
 800296a:	2b18      	cmp	r3, #24
 800296c:	d10a      	bne.n	8002984 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800296e:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d03c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2f2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d138      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e1c5      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d019      	beq.n	80029c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800298e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002992:	2101      	movs	r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff faf6 	bl	8001f88 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a2:	f7ff faf1 	bl	8001f88 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1ad      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b8:	2202      	movs	r2, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d0f1      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2a2>
 80029be:	e018      	b.n	80029f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	438a      	bics	r2, r1
 80029ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7ff fadc 	bl	8001f88 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d6:	f7ff fad7 	bl	8001f88 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e193      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d1f1      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2204      	movs	r2, #4
 80029f8:	4013      	ands	r3, r2
 80029fa:	d100      	bne.n	80029fe <HAL_RCC_OscConfig+0x2fe>
 80029fc:	e0c6      	b.n	8002b8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	231f      	movs	r3, #31
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2238      	movs	r2, #56	; 0x38
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d11e      	bne.n	8002a50 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <HAL_RCC_OscConfig+0x31e>
 8002a1c:	e0b6      	b.n	8002b8c <HAL_RCC_OscConfig+0x48c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d000      	beq.n	8002a28 <HAL_RCC_OscConfig+0x328>
 8002a26:	e0b1      	b.n	8002b8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e171      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	fffeffff 	.word	0xfffeffff
 8002a34:	fffbffff 	.word	0xfffbffff
 8002a38:	ffff80ff 	.word	0xffff80ff
 8002a3c:	ffffc7ff 	.word	0xffffc7ff
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a50:	4bb1      	ldr	r3, [pc, #708]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	055b      	lsls	r3, r3, #21
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x360>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x362>
 8002a60:	2300      	movs	r3, #0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d011      	beq.n	8002a8a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	4bac      	ldr	r3, [pc, #688]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6a:	4bab      	ldr	r3, [pc, #684]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	0549      	lsls	r1, r1, #21
 8002a70:	430a      	orrs	r2, r1
 8002a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a74:	4ba8      	ldr	r3, [pc, #672]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	055b      	lsls	r3, r3, #21
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a82:	231f      	movs	r3, #31
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8a:	4ba4      	ldr	r3, [pc, #656]	; (8002d1c <HAL_RCC_OscConfig+0x61c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	d11a      	bne.n	8002acc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a96:	4ba1      	ldr	r3, [pc, #644]	; (8002d1c <HAL_RCC_OscConfig+0x61c>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4ba0      	ldr	r3, [pc, #640]	; (8002d1c <HAL_RCC_OscConfig+0x61c>)
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	0049      	lsls	r1, r1, #1
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff fa70 	bl	8001f88 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7ff fa6b 	bl	8001f88 <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e127      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac0:	4b96      	ldr	r3, [pc, #600]	; (8002d1c <HAL_RCC_OscConfig+0x61c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3e2>
 8002ad4:	4b90      	ldr	r3, [pc, #576]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002ada:	2101      	movs	r1, #1
 8002adc:	430a      	orrs	r2, r1
 8002ade:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x41c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x404>
 8002aea:	4b8b      	ldr	r3, [pc, #556]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aee:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002af0:	2104      	movs	r1, #4
 8002af2:	430a      	orrs	r2, r1
 8002af4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002afa:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	430a      	orrs	r2, r1
 8002b00:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x41c>
 8002b04:	4b84      	ldr	r3, [pc, #528]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b08:	4b83      	ldr	r3, [pc, #524]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b10:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b14:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b16:	2104      	movs	r1, #4
 8002b18:	438a      	bics	r2, r1
 8002b1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d014      	beq.n	8002b4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7ff fa30 	bl	8001f88 <HAL_GetTick>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2c:	e009      	b.n	8002b42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7ff fa2b 	bl	8001f88 <HAL_GetTick>
 8002b32:	0002      	movs	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	4a79      	ldr	r2, [pc, #484]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0e6      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	4b75      	ldr	r3, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x42e>
 8002b4c:	e013      	b.n	8002b76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7ff fa1b 	bl	8001f88 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b56:	e009      	b.n	8002b6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7ff fa16 	bl	8001f88 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	4a6f      	ldr	r2, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0d1      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6c:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	2202      	movs	r2, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b86:	4967      	ldr	r1, [pc, #412]	; (8002d24 <HAL_RCC_OscConfig+0x624>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d100      	bne.n	8002b96 <HAL_RCC_OscConfig+0x496>
 8002b94:	e0bb      	b.n	8002d0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b96:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2238      	movs	r2, #56	; 0x38
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d100      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4a4>
 8002ba2:	e07b      	b.n	8002c9c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d156      	bne.n	8002c5a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b5a      	ldr	r3, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002bb2:	495d      	ldr	r1, [pc, #372]	; (8002d28 <HAL_RCC_OscConfig+0x628>)
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f9e6 	bl	8001f88 <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7ff f9e1 	bl	8001f88 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e09d      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	049b      	lsls	r3, r3, #18
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be0:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_RCC_OscConfig+0x62c>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	0449      	lsls	r1, r1, #17
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	0549      	lsls	r1, r1, #21
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff f9aa 	bl	8001f88 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7ff f9a5 	bl	8001f88 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e061      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	049b      	lsls	r3, r3, #18
 8002c54:	4013      	ands	r3, r2
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x53a>
 8002c58:	e059      	b.n	8002d0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c60:	4931      	ldr	r1, [pc, #196]	; (8002d28 <HAL_RCC_OscConfig+0x628>)
 8002c62:	400a      	ands	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff f98f 	bl	8001f88 <HAL_GetTick>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff f98a 	bl	8001f88 <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e046      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	049b      	lsls	r3, r3, #18
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002c94:	4926      	ldr	r1, [pc, #152]	; (8002d30 <HAL_RCC_OscConfig+0x630>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	e038      	b.n	8002d0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e033      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x618>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d126      	bne.n	8002d0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2270      	movs	r2, #112	; 0x70
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d11f      	bne.n	8002d0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	23fe      	movs	r3, #254	; 0xfe
 8002cce:	01db      	lsls	r3, r3, #7
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d116      	bne.n	8002d0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	23f8      	movs	r3, #248	; 0xf8
 8002ce0:	039b      	lsls	r3, r3, #14
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d10e      	bne.n	8002d0a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	23e0      	movs	r3, #224	; 0xe0
 8002cf0:	051b      	lsls	r3, r3, #20
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	0f5b      	lsrs	r3, r3, #29
 8002d00:	075a      	lsls	r2, r3, #29
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b008      	add	sp, #32
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	00001388 	.word	0x00001388
 8002d24:	efffffff 	.word	0xefffffff
 8002d28:	feffffff 	.word	0xfeffffff
 8002d2c:	11c1808c 	.word	0x11c1808c
 8002d30:	eefefffc 	.word	0xeefefffc

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0e9      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	4013      	ands	r3, r2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d91e      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d68:	f7ff f90e 	bl	8001f88 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d70:	e009      	b.n	8002d86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d72:	f7ff f909 	bl	8001f88 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <HAL_RCC_ClockConfig+0x1f4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0ca      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d86:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d015      	beq.n	8002dca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2204      	movs	r2, #4
 8002da4:	4013      	ands	r3, r2
 8002da6:	d006      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002da8:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b5f      	ldr	r3, [pc, #380]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	21e0      	movs	r1, #224	; 0xe0
 8002db0:	01c9      	lsls	r1, r1, #7
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db6:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_RCC_ClockConfig+0x1fc>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d057      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ddc:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	4013      	ands	r3, r2
 8002de6:	d12b      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e097      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	049b      	lsls	r3, r3, #18
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d11f      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e08b      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e0c:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4013      	ands	r3, r2
 8002e16:	d113      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e07f      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e074      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e32:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e06d      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2207      	movs	r2, #7
 8002e46:	4393      	bics	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e54:	f7ff f898 	bl	8001f88 <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5c:	e009      	b.n	8002e72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5e:	f7ff f893 	bl	8001f88 <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <HAL_RCC_ClockConfig+0x1f4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e054      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2238      	movs	r2, #56	; 0x38
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1ec      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2207      	movs	r2, #7
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d21e      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2207      	movs	r2, #7
 8002e98:	4393      	bics	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ea4:	f7ff f870 	bl	8001f88 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eac:	e009      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eae:	f7ff f86b 	bl	8001f88 <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_RCC_ClockConfig+0x1f4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e02c      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	4013      	ands	r3, r2
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1ee      	bne.n	8002eae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <HAL_RCC_ClockConfig+0x200>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eee:	f000 f829 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002ef2:	0001      	movs	r1, r0
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	220f      	movs	r2, #15
 8002efc:	401a      	ands	r2, r3
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x204>)
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	58d3      	ldr	r3, [r2, r3]
 8002f04:	221f      	movs	r2, #31
 8002f06:	4013      	ands	r3, r2
 8002f08:	000a      	movs	r2, r1
 8002f0a:	40da      	lsrs	r2, r3
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x208>)
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x20c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fe ffdb 	bl	8001ed0 <HAL_InitTick>
 8002f1a:	0003      	movs	r3, r0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40022000 	.word	0x40022000
 8002f28:	00001388 	.word	0x00001388
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	fffff0ff 	.word	0xfffff0ff
 8002f34:	ffff8fff 	.word	0xffff8fff
 8002f38:	08006224 	.word	0x08006224
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	20000004 	.word	0x20000004

08002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2238      	movs	r2, #56	; 0x38
 8002f50:	4013      	ands	r3, r2
 8002f52:	d10f      	bne.n	8002f74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f54:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0adb      	lsrs	r3, r3, #11
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	0013      	movs	r3, r2
 8002f64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	4835      	ldr	r0, [pc, #212]	; (8003040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f6a:	f7fd f8dd 	bl	8000128 <__udivsi3>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e05d      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2238      	movs	r2, #56	; 0x38
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d102      	bne.n	8002f86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e054      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f86:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2238      	movs	r2, #56	; 0x38
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d138      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2203      	movs	r2, #3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d10d      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4824      	ldr	r0, [pc, #144]	; (8003044 <HAL_RCC_GetSysClockFreq+0x100>)
 8002fb4:	f7fd f8b8 	bl	8000128 <__udivsi3>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	0019      	movs	r1, r3
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	227f      	movs	r2, #127	; 0x7f
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	434b      	muls	r3, r1
 8002fc8:	617b      	str	r3, [r7, #20]
        break;
 8002fca:	e00d      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	481c      	ldr	r0, [pc, #112]	; (8003040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fd0:	f7fd f8aa 	bl	8000128 <__udivsi3>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	227f      	movs	r2, #127	; 0x7f
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	434b      	muls	r3, r1
 8002fe4:	617b      	str	r3, [r7, #20]
        break;
 8002fe6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0f5b      	lsrs	r3, r3, #29
 8002fee:	2207      	movs	r2, #7
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	6978      	ldr	r0, [r7, #20]
 8002ffa:	f7fd f895 	bl	8000128 <__udivsi3>
 8002ffe:	0003      	movs	r3, r0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e015      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003004:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2238      	movs	r2, #56	; 0x38
 800300a:	4013      	ands	r3, r2
 800300c:	2b20      	cmp	r3, #32
 800300e:	d103      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_RCC_GetSysClockFreq+0xf8>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2238      	movs	r2, #56	; 0x38
 800301e:	4013      	ands	r3, r2
 8003020:	2b18      	cmp	r3, #24
 8003022:	d103      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003024:	23fa      	movs	r3, #250	; 0xfa
 8003026:	01db      	lsls	r3, r3, #7
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	e001      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003030:	693b      	ldr	r3, [r7, #16]
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b006      	add	sp, #24
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	40021000 	.word	0x40021000
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <HAL_RCC_GetHCLKFreq+0x10>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000000 	.word	0x20000000

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003060:	f7ff fff2 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003064:	0004      	movs	r4, r0
 8003066:	f7ff fb3f 	bl	80026e8 <LL_RCC_GetAPB1Prescaler>
 800306a:	0003      	movs	r3, r0
 800306c:	0b1a      	lsrs	r2, r3, #12
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003070:	0092      	lsls	r2, r2, #2
 8003072:	58d3      	ldr	r3, [r2, r3]
 8003074:	221f      	movs	r2, #31
 8003076:	4013      	ands	r3, r2
 8003078:	40dc      	lsrs	r4, r3
 800307a:	0023      	movs	r3, r4
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bdb0      	pop	{r4, r5, r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	08006264 	.word	0x08006264

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003090:	2313      	movs	r3, #19
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003098:	2312      	movs	r3, #18
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	4013      	ands	r3, r2
 80030aa:	d100      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030ac:	e0a3      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2011      	movs	r0, #17
 80030b0:	183b      	adds	r3, r7, r0
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b6:	4bc3      	ldr	r3, [pc, #780]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	055b      	lsls	r3, r3, #21
 80030be:	4013      	ands	r3, r2
 80030c0:	d110      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	4bc0      	ldr	r3, [pc, #768]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c6:	4bbf      	ldr	r3, [pc, #764]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0549      	lsls	r1, r1, #21
 80030cc:	430a      	orrs	r2, r1
 80030ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80030d0:	4bbc      	ldr	r3, [pc, #752]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	055b      	lsls	r3, r3, #21
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	183b      	adds	r3, r7, r0
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e4:	4bb8      	ldr	r3, [pc, #736]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4bb7      	ldr	r3, [pc, #732]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	0049      	lsls	r1, r1, #1
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030f2:	f7fe ff49 	bl	8001f88 <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030fa:	e00b      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fc:	f7fe ff44 	bl	8001f88 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d904      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800310a:	2313      	movs	r3, #19
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2203      	movs	r2, #3
 8003110:	701a      	strb	r2, [r3, #0]
        break;
 8003112:	e005      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003114:	4bac      	ldr	r3, [pc, #688]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d0ed      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003120:	2313      	movs	r3, #19
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d154      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800312a:	4ba6      	ldr	r3, [pc, #664]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800312c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800312e:	23c0      	movs	r3, #192	; 0xc0
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4013      	ands	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d019      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	429a      	cmp	r2, r3
 8003144:	d014      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003146:	4b9f      	ldr	r3, [pc, #636]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	4aa0      	ldr	r2, [pc, #640]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800314c:	4013      	ands	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003150:	4b9c      	ldr	r3, [pc, #624]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003154:	4b9b      	ldr	r3, [pc, #620]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	0249      	lsls	r1, r1, #9
 800315a:	430a      	orrs	r2, r1
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800315e:	4b99      	ldr	r3, [pc, #612]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003160:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003162:	4b98      	ldr	r3, [pc, #608]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003164:	499a      	ldr	r1, [pc, #616]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003166:	400a      	ands	r2, r1
 8003168:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800316a:	4b96      	ldr	r3, [pc, #600]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2201      	movs	r2, #1
 8003174:	4013      	ands	r3, r2
 8003176:	d016      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe ff06 	bl	8001f88 <HAL_GetTick>
 800317c:	0003      	movs	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003180:	e00c      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fe ff01 	bl	8001f88 <HAL_GetTick>
 8003186:	0002      	movs	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	4a91      	ldr	r2, [pc, #580]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d904      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003192:	2313      	movs	r3, #19
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2203      	movs	r2, #3
 8003198:	701a      	strb	r2, [r3, #0]
            break;
 800319a:	e004      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319c:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	2202      	movs	r2, #2
 80031a2:	4013      	ands	r3, r2
 80031a4:	d0ed      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80031a6:	2313      	movs	r3, #19
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b0:	4b84      	ldr	r3, [pc, #528]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	4a85      	ldr	r2, [pc, #532]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031be:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c4:	e00c      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031c6:	2312      	movs	r3, #18
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2213      	movs	r2, #19
 80031cc:	18ba      	adds	r2, r7, r2
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e005      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d4:	2312      	movs	r3, #18
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2213      	movs	r2, #19
 80031da:	18ba      	adds	r2, r7, r2
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031e0:	2311      	movs	r3, #17
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ee:	4b75      	ldr	r3, [pc, #468]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f0:	4979      	ldr	r1, [pc, #484]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2201      	movs	r2, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003200:	4b70      	ldr	r3, [pc, #448]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	2203      	movs	r2, #3
 8003206:	4393      	bics	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	4b6d      	ldr	r3, [pc, #436]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003210:	430a      	orrs	r2, r1
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2202      	movs	r2, #2
 800321a:	4013      	ands	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800321e:	4b69      	ldr	r3, [pc, #420]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	220c      	movs	r2, #12
 8003224:	4393      	bics	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800322e:	430a      	orrs	r2, r1
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2210      	movs	r2, #16
 8003238:	4013      	ands	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003242:	4013      	ands	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800324c:	430a      	orrs	r2, r1
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4013      	ands	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	4a5f      	ldr	r2, [pc, #380]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800326c:	430a      	orrs	r2, r1
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4013      	ands	r3, r2
 800327a:	d009      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800327c:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	4a58      	ldr	r2, [pc, #352]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800328c:	430a      	orrs	r2, r1
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2220      	movs	r2, #32
 8003296:	4013      	ands	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	01db      	lsls	r3, r3, #7
 80032b6:	4013      	ands	r3, r2
 80032b8:	d015      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ba:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	0899      	lsrs	r1, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	05db      	lsls	r3, r3, #23
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d106      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	0249      	lsls	r1, r1, #9
 80032e2:	430a      	orrs	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	4013      	ands	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032f2:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	4393      	bics	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003302:	430a      	orrs	r2, r1
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	039b      	lsls	r3, r3, #14
 800330e:	4013      	ands	r3, r2
 8003310:	d016      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	4a35      	ldr	r2, [pc, #212]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003318:	4013      	ands	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003320:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003322:	430a      	orrs	r2, r1
 8003324:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	03db      	lsls	r3, r3, #15
 800332e:	429a      	cmp	r2, r3
 8003330:	d106      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	0449      	lsls	r1, r1, #17
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	03db      	lsls	r3, r3, #15
 8003348:	4013      	ands	r3, r2
 800334a:	d016      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003352:	4013      	ands	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800335c:	430a      	orrs	r2, r1
 800335e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	045b      	lsls	r3, r3, #17
 8003368:	429a      	cmp	r2, r3
 800336a:	d106      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	0449      	lsls	r1, r1, #17
 8003376:	430a      	orrs	r2, r1
 8003378:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	4013      	ands	r3, r2
 8003384:	d016      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800338c:	4013      	ands	r3, r2
 800338e:	0019      	movs	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003396:	430a      	orrs	r2, r1
 8003398:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	01db      	lsls	r3, r3, #7
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d106      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	0249      	lsls	r1, r1, #9
 80033b0:	430a      	orrs	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80033b4:	2312      	movs	r3, #18
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	781b      	ldrb	r3, [r3, #0]
}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	b006      	add	sp, #24
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40007000 	.word	0x40007000
 80033cc:	fffffcff 	.word	0xfffffcff
 80033d0:	fffeffff 	.word	0xfffeffff
 80033d4:	00001388 	.word	0x00001388
 80033d8:	efffffff 	.word	0xefffffff
 80033dc:	fffff3ff 	.word	0xfffff3ff
 80033e0:	fff3ffff 	.word	0xfff3ffff
 80033e4:	ffcfffff 	.word	0xffcfffff
 80033e8:	ffffcfff 	.word	0xffffcfff
 80033ec:	ffbfffff 	.word	0xffbfffff
 80033f0:	feffffff 	.word	0xfeffffff
 80033f4:	ffff3fff 	.word	0xffff3fff

080033f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e046      	b.n	8003498 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2288      	movs	r2, #136	; 0x88
 800340e:	589b      	ldr	r3, [r3, r2]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2284      	movs	r2, #132	; 0x84
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f7fe fc32 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2288      	movs	r2, #136	; 0x88
 8003428:	2124      	movs	r1, #36	; 0x24
 800342a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 ff36 	bl	80042b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f000 fc74 	bl	8003d3c <UART_SetConfig>
 8003454:	0003      	movs	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01c      	b.n	8003498 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	490d      	ldr	r1, [pc, #52]	; (80034a0 <HAL_UART_Init+0xa8>)
 800346a:	400a      	ands	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	212a      	movs	r1, #42	; 0x2a
 800347a:	438a      	bics	r2, r1
 800347c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 ffc5 	bl	8004420 <UART_CheckIdleState>
 8003496:	0003      	movs	r3, r0
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b002      	add	sp, #8
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	ffffb7ff 	.word	0xffffb7ff

080034a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	1dbb      	adds	r3, r7, #6
 80034b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2288      	movs	r2, #136	; 0x88
 80034b8:	589b      	ldr	r3, [r3, r2]
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d000      	beq.n	80034c0 <HAL_UART_Transmit+0x1c>
 80034be:	e090      	b.n	80035e2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_UART_Transmit+0x2a>
 80034c6:	1dbb      	adds	r3, r7, #6
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e088      	b.n	80035e4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	015b      	lsls	r3, r3, #5
 80034da:	429a      	cmp	r2, r3
 80034dc:	d109      	bne.n	80034f2 <HAL_UART_Transmit+0x4e>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	d001      	beq.n	80034f2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e078      	b.n	80035e4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2290      	movs	r2, #144	; 0x90
 80034f6:	2100      	movs	r1, #0
 80034f8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2288      	movs	r2, #136	; 0x88
 80034fe:	2121      	movs	r1, #33	; 0x21
 8003500:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003502:	f7fe fd41 	bl	8001f88 <HAL_GetTick>
 8003506:	0003      	movs	r3, r0
 8003508:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1dba      	adds	r2, r7, #6
 800350e:	2154      	movs	r1, #84	; 0x54
 8003510:	8812      	ldrh	r2, [r2, #0]
 8003512:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1dba      	adds	r2, r7, #6
 8003518:	2156      	movs	r1, #86	; 0x56
 800351a:	8812      	ldrh	r2, [r2, #0]
 800351c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	015b      	lsls	r3, r3, #5
 8003526:	429a      	cmp	r2, r3
 8003528:	d108      	bne.n	800353c <HAL_UART_Transmit+0x98>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e003      	b.n	8003544 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003544:	e030      	b.n	80035a8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	0013      	movs	r3, r2
 8003550:	2200      	movs	r2, #0
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	f001 f80e 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d005      	beq.n	8003568 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2288      	movs	r2, #136	; 0x88
 8003560:	2120      	movs	r1, #32
 8003562:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e03d      	b.n	80035e4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	001a      	movs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	05d2      	lsls	r2, r2, #23
 800357a:	0dd2      	lsrs	r2, r2, #23
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3302      	adds	r3, #2
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e007      	b.n	8003596 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2256      	movs	r2, #86	; 0x56
 800359a:	5a9b      	ldrh	r3, [r3, r2]
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b299      	uxth	r1, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2256      	movs	r2, #86	; 0x56
 80035a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2256      	movs	r2, #86	; 0x56
 80035ac:	5a9b      	ldrh	r3, [r3, r2]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1c8      	bne.n	8003546 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	0013      	movs	r3, r2
 80035be:	2200      	movs	r2, #0
 80035c0:	2140      	movs	r1, #64	; 0x40
 80035c2:	f000 ffd7 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2288      	movs	r2, #136	; 0x88
 80035ce:	2120      	movs	r1, #32
 80035d0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e006      	b.n	80035e4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2288      	movs	r2, #136	; 0x88
 80035da:	2120      	movs	r1, #32
 80035dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b008      	add	sp, #32
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	1dbb      	adds	r3, r7, #6
 80035f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	228c      	movs	r2, #140	; 0x8c
 80035fe:	589b      	ldr	r3, [r3, r2]
 8003600:	2b20      	cmp	r3, #32
 8003602:	d14a      	bne.n	800369a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_UART_Receive_IT+0x26>
 800360a:	1dbb      	adds	r3, r7, #6
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e042      	b.n	800369c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	015b      	lsls	r3, r3, #5
 800361e:	429a      	cmp	r2, r3
 8003620:	d109      	bne.n	8003636 <HAL_UART_Receive_IT+0x4a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2201      	movs	r2, #1
 800362e:	4013      	ands	r3, r2
 8003630:	d001      	beq.n	8003636 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e032      	b.n	800369c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_UART_Receive_IT+0xb8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d020      	beq.n	8003688 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	4013      	ands	r3, r2
 8003652:	d019      	beq.n	8003688 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	613b      	str	r3, [r7, #16]
  return(result);
 800365a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	2301      	movs	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	04c9      	lsls	r1, r1, #19
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003688:	1dbb      	adds	r3, r7, #6
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 ffdf 	bl	8004654 <UART_Start_Receive_IT>
 8003696:	0003      	movs	r3, r0
 8003698:	e000      	b.n	800369c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b008      	add	sp, #32
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40008000 	.word	0x40008000

080036a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036a8:	b5b0      	push	{r4, r5, r7, lr}
 80036aa:	b0aa      	sub	sp, #168	; 0xa8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	22a4      	movs	r2, #164	; 0xa4
 80036b8:	18b9      	adds	r1, r7, r2
 80036ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	20a0      	movs	r0, #160	; 0xa0
 80036c4:	1839      	adds	r1, r7, r0
 80036c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	249c      	movs	r4, #156	; 0x9c
 80036d0:	1939      	adds	r1, r7, r4
 80036d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036d4:	0011      	movs	r1, r2
 80036d6:	18bb      	adds	r3, r7, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4aa2      	ldr	r2, [pc, #648]	; (8003964 <HAL_UART_IRQHandler+0x2bc>)
 80036dc:	4013      	ands	r3, r2
 80036de:	2298      	movs	r2, #152	; 0x98
 80036e0:	18bd      	adds	r5, r7, r2
 80036e2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80036e4:	18bb      	adds	r3, r7, r2
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d11a      	bne.n	8003722 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2220      	movs	r2, #32
 80036f2:	4013      	ands	r3, r2
 80036f4:	d015      	beq.n	8003722 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036f6:	183b      	adds	r3, r7, r0
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2220      	movs	r2, #32
 80036fc:	4013      	ands	r3, r2
 80036fe:	d105      	bne.n	800370c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003700:	193b      	adds	r3, r7, r4
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	055b      	lsls	r3, r3, #21
 8003708:	4013      	ands	r3, r2
 800370a:	d00a      	beq.n	8003722 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	2b00      	cmp	r3, #0
 8003712:	d100      	bne.n	8003716 <HAL_UART_IRQHandler+0x6e>
 8003714:	e2dc      	b.n	8003cd0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	0010      	movs	r0, r2
 800371e:	4798      	blx	r3
      }
      return;
 8003720:	e2d6      	b.n	8003cd0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003722:	2398      	movs	r3, #152	; 0x98
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d100      	bne.n	800372e <HAL_UART_IRQHandler+0x86>
 800372c:	e122      	b.n	8003974 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800372e:	239c      	movs	r3, #156	; 0x9c
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a8c      	ldr	r2, [pc, #560]	; (8003968 <HAL_UART_IRQHandler+0x2c0>)
 8003736:	4013      	ands	r3, r2
 8003738:	d106      	bne.n	8003748 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800373a:	23a0      	movs	r3, #160	; 0xa0
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a8a      	ldr	r2, [pc, #552]	; (800396c <HAL_UART_IRQHandler+0x2c4>)
 8003742:	4013      	ands	r3, r2
 8003744:	d100      	bne.n	8003748 <HAL_UART_IRQHandler+0xa0>
 8003746:	e115      	b.n	8003974 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003748:	23a4      	movs	r3, #164	; 0xa4
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2201      	movs	r2, #1
 8003750:	4013      	ands	r3, r2
 8003752:	d012      	beq.n	800377a <HAL_UART_IRQHandler+0xd2>
 8003754:	23a0      	movs	r3, #160	; 0xa0
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4013      	ands	r3, r2
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2290      	movs	r2, #144	; 0x90
 800376e:	589b      	ldr	r3, [r3, r2]
 8003770:	2201      	movs	r2, #1
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2190      	movs	r1, #144	; 0x90
 8003778:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800377a:	23a4      	movs	r3, #164	; 0xa4
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2202      	movs	r2, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d011      	beq.n	80037aa <HAL_UART_IRQHandler+0x102>
 8003786:	239c      	movs	r3, #156	; 0x9c
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	4013      	ands	r3, r2
 8003790:	d00b      	beq.n	80037aa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2202      	movs	r2, #2
 8003798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2290      	movs	r2, #144	; 0x90
 800379e:	589b      	ldr	r3, [r3, r2]
 80037a0:	2204      	movs	r2, #4
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2190      	movs	r1, #144	; 0x90
 80037a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037aa:	23a4      	movs	r3, #164	; 0xa4
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2204      	movs	r2, #4
 80037b2:	4013      	ands	r3, r2
 80037b4:	d011      	beq.n	80037da <HAL_UART_IRQHandler+0x132>
 80037b6:	239c      	movs	r3, #156	; 0x9c
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2201      	movs	r2, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	d00b      	beq.n	80037da <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2204      	movs	r2, #4
 80037c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2290      	movs	r2, #144	; 0x90
 80037ce:	589b      	ldr	r3, [r3, r2]
 80037d0:	2202      	movs	r2, #2
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2190      	movs	r1, #144	; 0x90
 80037d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037da:	23a4      	movs	r3, #164	; 0xa4
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2208      	movs	r2, #8
 80037e2:	4013      	ands	r3, r2
 80037e4:	d017      	beq.n	8003816 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037e6:	23a0      	movs	r3, #160	; 0xa0
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2220      	movs	r2, #32
 80037ee:	4013      	ands	r3, r2
 80037f0:	d105      	bne.n	80037fe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80037f2:	239c      	movs	r3, #156	; 0x9c
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_UART_IRQHandler+0x2c0>)
 80037fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037fc:	d00b      	beq.n	8003816 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2208      	movs	r2, #8
 8003804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2290      	movs	r2, #144	; 0x90
 800380a:	589b      	ldr	r3, [r3, r2]
 800380c:	2208      	movs	r2, #8
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2190      	movs	r1, #144	; 0x90
 8003814:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003816:	23a4      	movs	r3, #164	; 0xa4
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4013      	ands	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_UART_IRQHandler+0x1a4>
 8003824:	23a0      	movs	r3, #160	; 0xa0
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	04db      	lsls	r3, r3, #19
 800382e:	4013      	ands	r3, r2
 8003830:	d00c      	beq.n	800384c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2280      	movs	r2, #128	; 0x80
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2290      	movs	r2, #144	; 0x90
 8003840:	589b      	ldr	r3, [r3, r2]
 8003842:	2220      	movs	r2, #32
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2190      	movs	r1, #144	; 0x90
 800384a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2290      	movs	r2, #144	; 0x90
 8003850:	589b      	ldr	r3, [r3, r2]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d100      	bne.n	8003858 <HAL_UART_IRQHandler+0x1b0>
 8003856:	e23d      	b.n	8003cd4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003858:	23a4      	movs	r3, #164	; 0xa4
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2220      	movs	r2, #32
 8003860:	4013      	ands	r3, r2
 8003862:	d015      	beq.n	8003890 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003864:	23a0      	movs	r3, #160	; 0xa0
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2220      	movs	r2, #32
 800386c:	4013      	ands	r3, r2
 800386e:	d106      	bne.n	800387e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003870:	239c      	movs	r3, #156	; 0x9c
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	055b      	lsls	r3, r3, #21
 800387a:	4013      	ands	r3, r2
 800387c:	d008      	beq.n	8003890 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	0010      	movs	r0, r2
 800388e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2290      	movs	r2, #144	; 0x90
 8003894:	589b      	ldr	r3, [r3, r2]
 8003896:	2194      	movs	r1, #148	; 0x94
 8003898:	187a      	adds	r2, r7, r1
 800389a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d004      	beq.n	80038b4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2228      	movs	r2, #40	; 0x28
 80038b0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b2:	d04c      	beq.n	800394e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 fff0 	bl	800489c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d13c      	bne.n	8003944 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ca:	f3ef 8310 	mrs	r3, PRIMASK
 80038ce:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80038d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d2:	2090      	movs	r0, #144	; 0x90
 80038d4:	183a      	adds	r2, r7, r0
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	2301      	movs	r3, #1
 80038da:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038de:	f383 8810 	msr	PRIMASK, r3
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	438a      	bics	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038fc:	f383 8810 	msr	PRIMASK, r3
}
 8003900:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	589b      	ldr	r3, [r3, r2]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	589b      	ldr	r3, [r3, r2]
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <HAL_UART_IRQHandler+0x2c8>)
 8003914:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	589b      	ldr	r3, [r3, r2]
 800391c:	0018      	movs	r0, r3
 800391e:	f7fe fcb7 	bl	8002290 <HAL_DMA_Abort_IT>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d01c      	beq.n	8003960 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	589b      	ldr	r3, [r3, r2]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	5852      	ldr	r2, [r2, r1]
 8003934:	0010      	movs	r0, r2
 8003936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e012      	b.n	8003960 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 f9e9 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003942:	e00d      	b.n	8003960 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0018      	movs	r0, r3
 8003948:	f000 f9e4 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	e008      	b.n	8003960 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 f9df 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2290      	movs	r2, #144	; 0x90
 800395a:	2100      	movs	r1, #0
 800395c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800395e:	e1b9      	b.n	8003cd4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	46c0      	nop			; (mov r8, r8)
    return;
 8003962:	e1b7      	b.n	8003cd4 <HAL_UART_IRQHandler+0x62c>
 8003964:	0000080f 	.word	0x0000080f
 8003968:	10000001 	.word	0x10000001
 800396c:	04000120 	.word	0x04000120
 8003970:	08004969 	.word	0x08004969

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d000      	beq.n	800397e <HAL_UART_IRQHandler+0x2d6>
 800397c:	e13e      	b.n	8003bfc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800397e:	23a4      	movs	r3, #164	; 0xa4
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	4013      	ands	r3, r2
 8003988:	d100      	bne.n	800398c <HAL_UART_IRQHandler+0x2e4>
 800398a:	e137      	b.n	8003bfc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800398c:	23a0      	movs	r3, #160	; 0xa0
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2210      	movs	r2, #16
 8003994:	4013      	ands	r3, r2
 8003996:	d100      	bne.n	800399a <HAL_UART_IRQHandler+0x2f2>
 8003998:	e130      	b.n	8003bfc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2210      	movs	r2, #16
 80039a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d000      	beq.n	80039b2 <HAL_UART_IRQHandler+0x30a>
 80039b0:	e0a4      	b.n	8003afc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	217e      	movs	r1, #126	; 0x7e
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d100      	bne.n	80039cc <HAL_UART_IRQHandler+0x324>
 80039ca:	e185      	b.n	8003cd8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	225c      	movs	r2, #92	; 0x5c
 80039d0:	5a9b      	ldrh	r3, [r3, r2]
 80039d2:	187a      	adds	r2, r7, r1
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d300      	bcc.n	80039dc <HAL_UART_IRQHandler+0x334>
 80039da:	e17d      	b.n	8003cd8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	187a      	adds	r2, r7, r1
 80039e0:	215e      	movs	r1, #94	; 0x5e
 80039e2:	8812      	ldrh	r2, [r2, #0]
 80039e4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	589b      	ldr	r3, [r3, r2]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2220      	movs	r2, #32
 80039f2:	4013      	ands	r3, r2
 80039f4:	d170      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f6:	f3ef 8310 	mrs	r3, PRIMASK
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a00:	2301      	movs	r3, #1
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	49b4      	ldr	r1, [pc, #720]	; (8003ce8 <HAL_UART_IRQHandler+0x640>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a28:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a30:	677b      	str	r3, [r7, #116]	; 0x74
 8003a32:	2301      	movs	r3, #1
 8003a34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a54:	f383 8810 	msr	PRIMASK, r3
}
 8003a58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	673b      	str	r3, [r7, #112]	; 0x70
 8003a64:	2301      	movs	r3, #1
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2140      	movs	r1, #64	; 0x40
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a82:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a86:	f383 8810 	msr	PRIMASK, r3
}
 8003a8a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	228c      	movs	r2, #140	; 0x8c
 8003a90:	2120      	movs	r1, #32
 8003a92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2110      	movs	r1, #16
 8003abc:	438a      	bics	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	589b      	ldr	r3, [r3, r2]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7fe fb7a 	bl	80021cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	225c      	movs	r2, #92	; 0x5c
 8003ae2:	5a9a      	ldrh	r2, [r3, r2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	215e      	movs	r1, #94	; 0x5e
 8003ae8:	5a5b      	ldrh	r3, [r3, r1]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	0011      	movs	r1, r2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 f915 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003afa:	e0ed      	b.n	8003cd8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	225c      	movs	r2, #92	; 0x5c
 8003b00:	5a99      	ldrh	r1, [r3, r2]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	225e      	movs	r2, #94	; 0x5e
 8003b06:	5a9b      	ldrh	r3, [r3, r2]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	208e      	movs	r0, #142	; 0x8e
 8003b0c:	183b      	adds	r3, r7, r0
 8003b0e:	1a8a      	subs	r2, r1, r2
 8003b10:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	225e      	movs	r2, #94	; 0x5e
 8003b16:	5a9b      	ldrh	r3, [r3, r2]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d100      	bne.n	8003b20 <HAL_UART_IRQHandler+0x478>
 8003b1e:	e0dd      	b.n	8003cdc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003b20:	183b      	adds	r3, r7, r0
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d100      	bne.n	8003b2a <HAL_UART_IRQHandler+0x482>
 8003b28:	e0d8      	b.n	8003cdc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b30:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b32:	2488      	movs	r4, #136	; 0x88
 8003b34:	193a      	adds	r2, r7, r4
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4967      	ldr	r1, [pc, #412]	; (8003cec <HAL_UART_IRQHandler+0x644>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	193b      	adds	r3, r7, r4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b62:	f3ef 8310 	mrs	r3, PRIMASK
 8003b66:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b6a:	2484      	movs	r4, #132	; 0x84
 8003b6c:	193a      	adds	r2, r7, r4
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	2301      	movs	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f383 8810 	msr	PRIMASK, r3
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	495a      	ldr	r1, [pc, #360]	; (8003cf0 <HAL_UART_IRQHandler+0x648>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f383 8810 	msr	PRIMASK, r3
}
 8003b98:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	228c      	movs	r2, #140	; 0x8c
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb6:	2480      	movs	r4, #128	; 0x80
 8003bb8:	193a      	adds	r2, r7, r4
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bec:	183b      	adds	r3, r7, r0
 8003bee:	881a      	ldrh	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f895 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bfa:	e06f      	b.n	8003cdc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bfc:	23a4      	movs	r3, #164	; 0xa4
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	035b      	lsls	r3, r3, #13
 8003c06:	4013      	ands	r3, r2
 8003c08:	d010      	beq.n	8003c2c <HAL_UART_IRQHandler+0x584>
 8003c0a:	239c      	movs	r3, #156	; 0x9c
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	03db      	lsls	r3, r3, #15
 8003c14:	4013      	ands	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	0352      	lsls	r2, r2, #13
 8003c20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f001 fbf3 	bl	8005410 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c2a:	e05a      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c2c:	23a4      	movs	r3, #164	; 0xa4
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	4013      	ands	r3, r2
 8003c36:	d016      	beq.n	8003c66 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c38:	23a0      	movs	r3, #160	; 0xa0
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	4013      	ands	r3, r2
 8003c42:	d106      	bne.n	8003c52 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c44:	239c      	movs	r3, #156	; 0x9c
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d042      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	0010      	movs	r0, r2
 8003c62:	4798      	blx	r3
    }
    return;
 8003c64:	e03c      	b.n	8003ce0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c66:	23a4      	movs	r3, #164	; 0xa4
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d00a      	beq.n	8003c88 <HAL_UART_IRQHandler+0x5e0>
 8003c72:	23a0      	movs	r3, #160	; 0xa0
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 fe88 	bl	8004996 <UART_EndTransmit_IT>
    return;
 8003c86:	e02c      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c88:	23a4      	movs	r3, #164	; 0xa4
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	4013      	ands	r3, r2
 8003c94:	d00b      	beq.n	8003cae <HAL_UART_IRQHandler+0x606>
 8003c96:	23a0      	movs	r3, #160	; 0xa0
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	05db      	lsls	r3, r3, #23
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f001 fbc2 	bl	8005430 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cac:	e019      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cae:	23a4      	movs	r3, #164	; 0xa4
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	045b      	lsls	r3, r3, #17
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d012      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
 8003cbc:	23a0      	movs	r3, #160	; 0xa0
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	da0d      	bge.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f001 fba9 	bl	8005420 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cce:	e008      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	e006      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	e004      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	e002      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	e000      	b.n	8003ce2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003ce0:	46c0      	nop			; (mov r8, r8)
  }
}
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b02a      	add	sp, #168	; 0xa8
 8003ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce8:	fffffeff 	.word	0xfffffeff
 8003cec:	fffffedf 	.word	0xfffffedf
 8003cf0:	effffffe 	.word	0xeffffffe

08003cf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	000a      	movs	r2, r1
 8003d2e:	1cbb      	adds	r3, r7, #2
 8003d30:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b002      	add	sp, #8
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b090      	sub	sp, #64	; 0x40
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d44:	231a      	movs	r3, #26
 8003d46:	2220      	movs	r2, #32
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	19db      	adds	r3, r3, r7
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4aaf      	ldr	r2, [pc, #700]	; (800402c <UART_SetConfig+0x2f0>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4aaa      	ldr	r2, [pc, #680]	; (8004030 <UART_SetConfig+0x2f4>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	0018      	movs	r0, r3
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	0003      	movs	r3, r0
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4aa4      	ldr	r2, [pc, #656]	; (8004034 <UART_SetConfig+0x2f8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dae:	4313      	orrs	r3, r2
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a9f      	ldr	r2, [pc, #636]	; (8004038 <UART_SetConfig+0x2fc>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	220f      	movs	r2, #15
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	0003      	movs	r3, r0
 8003dde:	430b      	orrs	r3, r1
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a95      	ldr	r2, [pc, #596]	; (800403c <UART_SetConfig+0x300>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d131      	bne.n	8003e50 <UART_SetConfig+0x114>
 8003dec:	4b94      	ldr	r3, [pc, #592]	; (8004040 <UART_SetConfig+0x304>)
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	2203      	movs	r2, #3
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d01d      	beq.n	8003e34 <UART_SetConfig+0xf8>
 8003df8:	d823      	bhi.n	8003e42 <UART_SetConfig+0x106>
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d00c      	beq.n	8003e18 <UART_SetConfig+0xdc>
 8003dfe:	d820      	bhi.n	8003e42 <UART_SetConfig+0x106>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <UART_SetConfig+0xce>
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d00e      	beq.n	8003e26 <UART_SetConfig+0xea>
 8003e08:	e01b      	b.n	8003e42 <UART_SetConfig+0x106>
 8003e0a:	231b      	movs	r3, #27
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	19db      	adds	r3, r3, r7
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e0b4      	b.n	8003f82 <UART_SetConfig+0x246>
 8003e18:	231b      	movs	r3, #27
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	19db      	adds	r3, r3, r7
 8003e20:	2202      	movs	r2, #2
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e0ad      	b.n	8003f82 <UART_SetConfig+0x246>
 8003e26:	231b      	movs	r3, #27
 8003e28:	2220      	movs	r2, #32
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	2204      	movs	r2, #4
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e0a6      	b.n	8003f82 <UART_SetConfig+0x246>
 8003e34:	231b      	movs	r3, #27
 8003e36:	2220      	movs	r2, #32
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	19db      	adds	r3, r3, r7
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e09f      	b.n	8003f82 <UART_SetConfig+0x246>
 8003e42:	231b      	movs	r3, #27
 8003e44:	2220      	movs	r2, #32
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	19db      	adds	r3, r3, r7
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e098      	b.n	8003f82 <UART_SetConfig+0x246>
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a7b      	ldr	r2, [pc, #492]	; (8004044 <UART_SetConfig+0x308>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d131      	bne.n	8003ebe <UART_SetConfig+0x182>
 8003e5a:	4b79      	ldr	r3, [pc, #484]	; (8004040 <UART_SetConfig+0x304>)
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	220c      	movs	r2, #12
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d01d      	beq.n	8003ea2 <UART_SetConfig+0x166>
 8003e66:	d823      	bhi.n	8003eb0 <UART_SetConfig+0x174>
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00c      	beq.n	8003e86 <UART_SetConfig+0x14a>
 8003e6c:	d820      	bhi.n	8003eb0 <UART_SetConfig+0x174>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <UART_SetConfig+0x13c>
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d00e      	beq.n	8003e94 <UART_SetConfig+0x158>
 8003e76:	e01b      	b.n	8003eb0 <UART_SetConfig+0x174>
 8003e78:	231b      	movs	r3, #27
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	19db      	adds	r3, r3, r7
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e07d      	b.n	8003f82 <UART_SetConfig+0x246>
 8003e86:	231b      	movs	r3, #27
 8003e88:	2220      	movs	r2, #32
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	19db      	adds	r3, r3, r7
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e076      	b.n	8003f82 <UART_SetConfig+0x246>
 8003e94:	231b      	movs	r3, #27
 8003e96:	2220      	movs	r2, #32
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	19db      	adds	r3, r3, r7
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e06f      	b.n	8003f82 <UART_SetConfig+0x246>
 8003ea2:	231b      	movs	r3, #27
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	19db      	adds	r3, r3, r7
 8003eaa:	2208      	movs	r2, #8
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e068      	b.n	8003f82 <UART_SetConfig+0x246>
 8003eb0:	231b      	movs	r3, #27
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	2210      	movs	r2, #16
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e061      	b.n	8003f82 <UART_SetConfig+0x246>
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a61      	ldr	r2, [pc, #388]	; (8004048 <UART_SetConfig+0x30c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d106      	bne.n	8003ed6 <UART_SetConfig+0x19a>
 8003ec8:	231b      	movs	r3, #27
 8003eca:	2220      	movs	r2, #32
 8003ecc:	189b      	adds	r3, r3, r2
 8003ece:	19db      	adds	r3, r3, r7
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e055      	b.n	8003f82 <UART_SetConfig+0x246>
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a5c      	ldr	r2, [pc, #368]	; (800404c <UART_SetConfig+0x310>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d106      	bne.n	8003eee <UART_SetConfig+0x1b2>
 8003ee0:	231b      	movs	r3, #27
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	19db      	adds	r3, r3, r7
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e049      	b.n	8003f82 <UART_SetConfig+0x246>
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a50      	ldr	r2, [pc, #320]	; (8004034 <UART_SetConfig+0x2f8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d13e      	bne.n	8003f76 <UART_SetConfig+0x23a>
 8003ef8:	4b51      	ldr	r3, [pc, #324]	; (8004040 <UART_SetConfig+0x304>)
 8003efa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003efc:	23c0      	movs	r3, #192	; 0xc0
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	4013      	ands	r3, r2
 8003f02:	22c0      	movs	r2, #192	; 0xc0
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d027      	beq.n	8003f5a <UART_SetConfig+0x21e>
 8003f0a:	22c0      	movs	r2, #192	; 0xc0
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d82a      	bhi.n	8003f68 <UART_SetConfig+0x22c>
 8003f12:	2280      	movs	r2, #128	; 0x80
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d011      	beq.n	8003f3e <UART_SetConfig+0x202>
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d822      	bhi.n	8003f68 <UART_SetConfig+0x22c>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <UART_SetConfig+0x1f4>
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	00d2      	lsls	r2, r2, #3
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00e      	beq.n	8003f4c <UART_SetConfig+0x210>
 8003f2e:	e01b      	b.n	8003f68 <UART_SetConfig+0x22c>
 8003f30:	231b      	movs	r3, #27
 8003f32:	2220      	movs	r2, #32
 8003f34:	189b      	adds	r3, r3, r2
 8003f36:	19db      	adds	r3, r3, r7
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e021      	b.n	8003f82 <UART_SetConfig+0x246>
 8003f3e:	231b      	movs	r3, #27
 8003f40:	2220      	movs	r2, #32
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	19db      	adds	r3, r3, r7
 8003f46:	2202      	movs	r2, #2
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e01a      	b.n	8003f82 <UART_SetConfig+0x246>
 8003f4c:	231b      	movs	r3, #27
 8003f4e:	2220      	movs	r2, #32
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	19db      	adds	r3, r3, r7
 8003f54:	2204      	movs	r2, #4
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e013      	b.n	8003f82 <UART_SetConfig+0x246>
 8003f5a:	231b      	movs	r3, #27
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	19db      	adds	r3, r3, r7
 8003f62:	2208      	movs	r2, #8
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e00c      	b.n	8003f82 <UART_SetConfig+0x246>
 8003f68:	231b      	movs	r3, #27
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	189b      	adds	r3, r3, r2
 8003f6e:	19db      	adds	r3, r3, r7
 8003f70:	2210      	movs	r2, #16
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e005      	b.n	8003f82 <UART_SetConfig+0x246>
 8003f76:	231b      	movs	r3, #27
 8003f78:	2220      	movs	r2, #32
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	19db      	adds	r3, r3, r7
 8003f7e:	2210      	movs	r2, #16
 8003f80:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <UART_SetConfig+0x2f8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d000      	beq.n	8003f8e <UART_SetConfig+0x252>
 8003f8c:	e0a9      	b.n	80040e2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f8e:	231b      	movs	r3, #27
 8003f90:	2220      	movs	r2, #32
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d015      	beq.n	8003fc8 <UART_SetConfig+0x28c>
 8003f9c:	dc18      	bgt.n	8003fd0 <UART_SetConfig+0x294>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d00d      	beq.n	8003fbe <UART_SetConfig+0x282>
 8003fa2:	dc15      	bgt.n	8003fd0 <UART_SetConfig+0x294>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <UART_SetConfig+0x272>
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d005      	beq.n	8003fb8 <UART_SetConfig+0x27c>
 8003fac:	e010      	b.n	8003fd0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fae:	f7ff f855 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fb6:	e014      	b.n	8003fe2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <UART_SetConfig+0x314>)
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fbc:	e011      	b.n	8003fe2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fbe:	f7fe ffc1 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fc6:	e00c      	b.n	8003fe2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fce:	e008      	b.n	8003fe2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003fd4:	231a      	movs	r3, #26
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
        break;
 8003fe0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d100      	bne.n	8003fea <UART_SetConfig+0x2ae>
 8003fe8:	e14b      	b.n	8004282 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fee:	4b19      	ldr	r3, [pc, #100]	; (8004054 <UART_SetConfig+0x318>)
 8003ff0:	0052      	lsls	r2, r2, #1
 8003ff2:	5ad3      	ldrh	r3, [r2, r3]
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ff8:	f7fc f896 	bl	8000128 <__udivsi3>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	0013      	movs	r3, r2
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	189b      	adds	r3, r3, r2
 800400a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400c:	429a      	cmp	r2, r3
 800400e:	d305      	bcc.n	800401c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004018:	429a      	cmp	r2, r3
 800401a:	d91d      	bls.n	8004058 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800401c:	231a      	movs	r3, #26
 800401e:	2220      	movs	r2, #32
 8004020:	189b      	adds	r3, r3, r2
 8004022:	19db      	adds	r3, r3, r7
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e12b      	b.n	8004282 <UART_SetConfig+0x546>
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	cfff69f3 	.word	0xcfff69f3
 8004030:	ffffcfff 	.word	0xffffcfff
 8004034:	40008000 	.word	0x40008000
 8004038:	11fff4ff 	.word	0x11fff4ff
 800403c:	40013800 	.word	0x40013800
 8004040:	40021000 	.word	0x40021000
 8004044:	40004400 	.word	0x40004400
 8004048:	40004800 	.word	0x40004800
 800404c:	40004c00 	.word	0x40004c00
 8004050:	00f42400 	.word	0x00f42400
 8004054:	08006284 	.word	0x08006284
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004064:	4b92      	ldr	r3, [pc, #584]	; (80042b0 <UART_SetConfig+0x574>)
 8004066:	0052      	lsls	r2, r2, #1
 8004068:	5ad3      	ldrh	r3, [r2, r3]
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	69b8      	ldr	r0, [r7, #24]
 8004076:	69f9      	ldr	r1, [r7, #28]
 8004078:	f7fc f9cc 	bl	8000414 <__aeabi_uldivmod>
 800407c:	0002      	movs	r2, r0
 800407e:	000b      	movs	r3, r1
 8004080:	0e11      	lsrs	r1, r2, #24
 8004082:	021d      	lsls	r5, r3, #8
 8004084:	430d      	orrs	r5, r1
 8004086:	0214      	lsls	r4, r2, #8
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68b8      	ldr	r0, [r7, #8]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	1900      	adds	r0, r0, r4
 800409a:	4169      	adcs	r1, r5
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f7fc f9b3 	bl	8000414 <__aeabi_uldivmod>
 80040ae:	0002      	movs	r2, r0
 80040b0:	000b      	movs	r3, r1
 80040b2:	0013      	movs	r3, r2
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b8:	23c0      	movs	r3, #192	; 0xc0
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d309      	bcc.n	80040d4 <UART_SetConfig+0x398>
 80040c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	035b      	lsls	r3, r3, #13
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d204      	bcs.n	80040d4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	e0d6      	b.n	8004282 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80040d4:	231a      	movs	r3, #26
 80040d6:	2220      	movs	r2, #32
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	19db      	adds	r3, r3, r7
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e0cf      	b.n	8004282 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d000      	beq.n	80040f0 <UART_SetConfig+0x3b4>
 80040ee:	e070      	b.n	80041d2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80040f0:	231b      	movs	r3, #27
 80040f2:	2220      	movs	r2, #32
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d015      	beq.n	800412a <UART_SetConfig+0x3ee>
 80040fe:	dc18      	bgt.n	8004132 <UART_SetConfig+0x3f6>
 8004100:	2b04      	cmp	r3, #4
 8004102:	d00d      	beq.n	8004120 <UART_SetConfig+0x3e4>
 8004104:	dc15      	bgt.n	8004132 <UART_SetConfig+0x3f6>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x3d4>
 800410a:	2b02      	cmp	r3, #2
 800410c:	d005      	beq.n	800411a <UART_SetConfig+0x3de>
 800410e:	e010      	b.n	8004132 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe ffa4 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004114:	0003      	movs	r3, r0
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004118:	e014      	b.n	8004144 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800411a:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <UART_SetConfig+0x578>)
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800411e:	e011      	b.n	8004144 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004120:	f7fe ff10 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8004124:	0003      	movs	r3, r0
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004128:	e00c      	b.n	8004144 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004130:	e008      	b.n	8004144 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004136:	231a      	movs	r3, #26
 8004138:	2220      	movs	r2, #32
 800413a:	189b      	adds	r3, r3, r2
 800413c:	19db      	adds	r3, r3, r7
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
        break;
 8004142:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	2b00      	cmp	r3, #0
 8004148:	d100      	bne.n	800414c <UART_SetConfig+0x410>
 800414a:	e09a      	b.n	8004282 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004150:	4b57      	ldr	r3, [pc, #348]	; (80042b0 <UART_SetConfig+0x574>)
 8004152:	0052      	lsls	r2, r2, #1
 8004154:	5ad3      	ldrh	r3, [r2, r3]
 8004156:	0019      	movs	r1, r3
 8004158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800415a:	f7fb ffe5 	bl	8000128 <__udivsi3>
 800415e:	0003      	movs	r3, r0
 8004160:	005a      	lsls	r2, r3, #1
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	18d2      	adds	r2, r2, r3
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	0019      	movs	r1, r3
 8004170:	0010      	movs	r0, r2
 8004172:	f7fb ffd9 	bl	8000128 <__udivsi3>
 8004176:	0003      	movs	r3, r0
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d921      	bls.n	80041c4 <UART_SetConfig+0x488>
 8004180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	025b      	lsls	r3, r3, #9
 8004186:	429a      	cmp	r2, r3
 8004188:	d21c      	bcs.n	80041c4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	b29a      	uxth	r2, r3
 800418e:	200e      	movs	r0, #14
 8004190:	2420      	movs	r4, #32
 8004192:	1903      	adds	r3, r0, r4
 8004194:	19db      	adds	r3, r3, r7
 8004196:	210f      	movs	r1, #15
 8004198:	438a      	bics	r2, r1
 800419a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2207      	movs	r2, #7
 80041a4:	4013      	ands	r3, r2
 80041a6:	b299      	uxth	r1, r3
 80041a8:	1903      	adds	r3, r0, r4
 80041aa:	19db      	adds	r3, r3, r7
 80041ac:	1902      	adds	r2, r0, r4
 80041ae:	19d2      	adds	r2, r2, r7
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1902      	adds	r2, r0, r4
 80041bc:	19d2      	adds	r2, r2, r7
 80041be:	8812      	ldrh	r2, [r2, #0]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	e05e      	b.n	8004282 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80041c4:	231a      	movs	r3, #26
 80041c6:	2220      	movs	r2, #32
 80041c8:	189b      	adds	r3, r3, r2
 80041ca:	19db      	adds	r3, r3, r7
 80041cc:	2201      	movs	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e057      	b.n	8004282 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d2:	231b      	movs	r3, #27
 80041d4:	2220      	movs	r2, #32
 80041d6:	189b      	adds	r3, r3, r2
 80041d8:	19db      	adds	r3, r3, r7
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d015      	beq.n	800420c <UART_SetConfig+0x4d0>
 80041e0:	dc18      	bgt.n	8004214 <UART_SetConfig+0x4d8>
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d00d      	beq.n	8004202 <UART_SetConfig+0x4c6>
 80041e6:	dc15      	bgt.n	8004214 <UART_SetConfig+0x4d8>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <UART_SetConfig+0x4b6>
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d005      	beq.n	80041fc <UART_SetConfig+0x4c0>
 80041f0:	e010      	b.n	8004214 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f2:	f7fe ff33 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 80041f6:	0003      	movs	r3, r0
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041fa:	e014      	b.n	8004226 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <UART_SetConfig+0x578>)
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004200:	e011      	b.n	8004226 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7fe fe9f 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8004206:	0003      	movs	r3, r0
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800420a:	e00c      	b.n	8004226 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004212:	e008      	b.n	8004226 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004218:	231a      	movs	r3, #26
 800421a:	2220      	movs	r2, #32
 800421c:	189b      	adds	r3, r3, r2
 800421e:	19db      	adds	r3, r3, r7
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
        break;
 8004224:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02a      	beq.n	8004282 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004230:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <UART_SetConfig+0x574>)
 8004232:	0052      	lsls	r2, r2, #1
 8004234:	5ad3      	ldrh	r3, [r2, r3]
 8004236:	0019      	movs	r1, r3
 8004238:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800423a:	f7fb ff75 	bl	8000128 <__udivsi3>
 800423e:	0003      	movs	r3, r0
 8004240:	001a      	movs	r2, r3
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	18d2      	adds	r2, r2, r3
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	0019      	movs	r1, r3
 8004250:	0010      	movs	r0, r2
 8004252:	f7fb ff69 	bl	8000128 <__udivsi3>
 8004256:	0003      	movs	r3, r0
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	2b0f      	cmp	r3, #15
 800425e:	d90a      	bls.n	8004276 <UART_SetConfig+0x53a>
 8004260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	025b      	lsls	r3, r3, #9
 8004266:	429a      	cmp	r2, r3
 8004268:	d205      	bcs.n	8004276 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	b29a      	uxth	r2, r3
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60da      	str	r2, [r3, #12]
 8004274:	e005      	b.n	8004282 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004276:	231a      	movs	r3, #26
 8004278:	2220      	movs	r2, #32
 800427a:	189b      	adds	r3, r3, r2
 800427c:	19db      	adds	r3, r3, r7
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	226a      	movs	r2, #106	; 0x6a
 8004286:	2101      	movs	r1, #1
 8004288:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	2268      	movs	r2, #104	; 0x68
 800428e:	2101      	movs	r1, #1
 8004290:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	2200      	movs	r2, #0
 8004296:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	2200      	movs	r2, #0
 800429c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800429e:	231a      	movs	r3, #26
 80042a0:	2220      	movs	r2, #32
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	19db      	adds	r3, r3, r7
 80042a6:	781b      	ldrb	r3, [r3, #0]
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b010      	add	sp, #64	; 0x40
 80042ae:	bdb0      	pop	{r4, r5, r7, pc}
 80042b0:	08006284 	.word	0x08006284
 80042b4:	00f42400 	.word	0x00f42400

080042b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2208      	movs	r2, #8
 80042c6:	4013      	ands	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a4a      	ldr	r2, [pc, #296]	; (80043fc <UART_AdvFeatureConfig+0x144>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	2201      	movs	r2, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d00b      	beq.n	8004304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a43      	ldr	r2, [pc, #268]	; (8004400 <UART_AdvFeatureConfig+0x148>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	2202      	movs	r2, #2
 800430a:	4013      	ands	r3, r2
 800430c:	d00b      	beq.n	8004326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a3b      	ldr	r2, [pc, #236]	; (8004404 <UART_AdvFeatureConfig+0x14c>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	2204      	movs	r2, #4
 800432c:	4013      	ands	r3, r2
 800432e:	d00b      	beq.n	8004348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4a34      	ldr	r2, [pc, #208]	; (8004408 <UART_AdvFeatureConfig+0x150>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	2210      	movs	r2, #16
 800434e:	4013      	ands	r3, r2
 8004350:	d00b      	beq.n	800436a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a2c      	ldr	r2, [pc, #176]	; (800440c <UART_AdvFeatureConfig+0x154>)
 800435a:	4013      	ands	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2220      	movs	r2, #32
 8004370:	4013      	ands	r3, r2
 8004372:	d00b      	beq.n	800438c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <UART_AdvFeatureConfig+0x158>)
 800437c:	4013      	ands	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	4013      	ands	r3, r2
 8004394:	d01d      	beq.n	80043d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <UART_AdvFeatureConfig+0x15c>)
 800439e:	4013      	ands	r3, r2
 80043a0:	0019      	movs	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	035b      	lsls	r3, r3, #13
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d10b      	bne.n	80043d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <UART_AdvFeatureConfig+0x160>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	2280      	movs	r2, #128	; 0x80
 80043d8:	4013      	ands	r3, r2
 80043da:	d00b      	beq.n	80043f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4a0e      	ldr	r2, [pc, #56]	; (800441c <UART_AdvFeatureConfig+0x164>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	ffff7fff 	.word	0xffff7fff
 8004400:	fffdffff 	.word	0xfffdffff
 8004404:	fffeffff 	.word	0xfffeffff
 8004408:	fffbffff 	.word	0xfffbffff
 800440c:	ffffefff 	.word	0xffffefff
 8004410:	ffffdfff 	.word	0xffffdfff
 8004414:	ffefffff 	.word	0xffefffff
 8004418:	ff9fffff 	.word	0xff9fffff
 800441c:	fff7ffff 	.word	0xfff7ffff

08004420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b092      	sub	sp, #72	; 0x48
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2290      	movs	r2, #144	; 0x90
 800442c:	2100      	movs	r1, #0
 800442e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004430:	f7fd fdaa 	bl	8001f88 <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2208      	movs	r2, #8
 8004440:	4013      	ands	r3, r2
 8004442:	2b08      	cmp	r3, #8
 8004444:	d12d      	bne.n	80044a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004448:	2280      	movs	r2, #128	; 0x80
 800444a:	0391      	lsls	r1, r2, #14
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4a47      	ldr	r2, [pc, #284]	; (800456c <UART_CheckIdleState+0x14c>)
 8004450:	9200      	str	r2, [sp, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	f000 f88e 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 8004458:	1e03      	subs	r3, r0, #0
 800445a:	d022      	beq.n	80044a2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445c:	f3ef 8310 	mrs	r3, PRIMASK
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
 8004466:	2301      	movs	r3, #1
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	f383 8810 	msr	PRIMASK, r3
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2180      	movs	r1, #128	; 0x80
 800447e:	438a      	bics	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	f383 8810 	msr	PRIMASK, r3
}
 800448c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2288      	movs	r2, #136	; 0x88
 8004492:	2120      	movs	r1, #32
 8004494:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2284      	movs	r2, #132	; 0x84
 800449a:	2100      	movs	r1, #0
 800449c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e060      	b.n	8004564 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2204      	movs	r2, #4
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d146      	bne.n	800453e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	03d1      	lsls	r1, r2, #15
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4a2c      	ldr	r2, [pc, #176]	; (800456c <UART_CheckIdleState+0x14c>)
 80044ba:	9200      	str	r2, [sp, #0]
 80044bc:	2200      	movs	r2, #0
 80044be:	f000 f859 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d03b      	beq.n	800453e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c6:	f3ef 8310 	mrs	r3, PRIMASK
 80044ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80044cc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
 80044d0:	2301      	movs	r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f383 8810 	msr	PRIMASK, r3
}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4922      	ldr	r1, [pc, #136]	; (8004570 <UART_CheckIdleState+0x150>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f383 8810 	msr	PRIMASK, r3
}
 80044f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f8:	f3ef 8310 	mrs	r3, PRIMASK
 80044fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80044fe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f383 8810 	msr	PRIMASK, r3
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2101      	movs	r1, #1
 800451a:	438a      	bics	r2, r1
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f383 8810 	msr	PRIMASK, r3
}
 8004528:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	228c      	movs	r2, #140	; 0x8c
 800452e:	2120      	movs	r1, #32
 8004530:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2284      	movs	r2, #132	; 0x84
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e012      	b.n	8004564 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2288      	movs	r2, #136	; 0x88
 8004542:	2120      	movs	r1, #32
 8004544:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	228c      	movs	r2, #140	; 0x8c
 800454a:	2120      	movs	r1, #32
 800454c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2284      	movs	r2, #132	; 0x84
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	0018      	movs	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	b010      	add	sp, #64	; 0x40
 800456a:	bd80      	pop	{r7, pc}
 800456c:	01ffffff 	.word	0x01ffffff
 8004570:	fffffedf 	.word	0xfffffedf

08004574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004584:	e051      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	3301      	adds	r3, #1
 800458a:	d04e      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fd fcfc 	bl	8001f88 <HAL_GetTick>
 8004590:	0002      	movs	r2, r0
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e051      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2204      	movs	r2, #4
 80045ae:	4013      	ands	r3, r2
 80045b0:	d03b      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0xb6>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d038      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0xb6>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d035      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2208      	movs	r2, #8
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d111      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 f960 	bl	800489c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2290      	movs	r2, #144	; 0x90
 80045e0:	2108      	movs	r1, #8
 80045e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2284      	movs	r2, #132	; 0x84
 80045e8:	2100      	movs	r1, #0
 80045ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e02c      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	401a      	ands	r2, r3
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	429a      	cmp	r2, r3
 8004602:	d112      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	0112      	lsls	r2, r2, #4
 800460c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f943 	bl	800489c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2290      	movs	r2, #144	; 0x90
 800461a:	2120      	movs	r1, #32
 800461c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2284      	movs	r2, #132	; 0x84
 8004622:	2100      	movs	r1, #0
 8004624:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e00f      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	425a      	negs	r2, r3
 800463a:	4153      	adcs	r3, r2
 800463c:	b2db      	uxtb	r3, r3
 800463e:	001a      	movs	r2, r3
 8004640:	1dfb      	adds	r3, r7, #7
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d09e      	beq.n	8004586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b004      	add	sp, #16
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b098      	sub	sp, #96	; 0x60
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	1dbb      	adds	r3, r7, #6
 8004660:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1dba      	adds	r2, r7, #6
 800466c:	215c      	movs	r1, #92	; 0x5c
 800466e:	8812      	ldrh	r2, [r2, #0]
 8004670:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1dba      	adds	r2, r7, #6
 8004676:	215e      	movs	r1, #94	; 0x5e
 8004678:	8812      	ldrh	r2, [r2, #0]
 800467a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	015b      	lsls	r3, r3, #5
 800468a:	429a      	cmp	r2, r3
 800468c:	d10d      	bne.n	80046aa <UART_Start_Receive_IT+0x56>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <UART_Start_Receive_IT+0x4c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2260      	movs	r2, #96	; 0x60
 800469a:	497b      	ldr	r1, [pc, #492]	; (8004888 <UART_Start_Receive_IT+0x234>)
 800469c:	5299      	strh	r1, [r3, r2]
 800469e:	e02e      	b.n	80046fe <UART_Start_Receive_IT+0xaa>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2260      	movs	r2, #96	; 0x60
 80046a4:	21ff      	movs	r1, #255	; 0xff
 80046a6:	5299      	strh	r1, [r3, r2]
 80046a8:	e029      	b.n	80046fe <UART_Start_Receive_IT+0xaa>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <UART_Start_Receive_IT+0x7a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <UART_Start_Receive_IT+0x70>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2260      	movs	r2, #96	; 0x60
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	5299      	strh	r1, [r3, r2]
 80046c2:	e01c      	b.n	80046fe <UART_Start_Receive_IT+0xaa>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2260      	movs	r2, #96	; 0x60
 80046c8:	217f      	movs	r1, #127	; 0x7f
 80046ca:	5299      	strh	r1, [r3, r2]
 80046cc:	e017      	b.n	80046fe <UART_Start_Receive_IT+0xaa>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	055b      	lsls	r3, r3, #21
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d10d      	bne.n	80046f6 <UART_Start_Receive_IT+0xa2>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <UART_Start_Receive_IT+0x98>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2260      	movs	r2, #96	; 0x60
 80046e6:	217f      	movs	r1, #127	; 0x7f
 80046e8:	5299      	strh	r1, [r3, r2]
 80046ea:	e008      	b.n	80046fe <UART_Start_Receive_IT+0xaa>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2260      	movs	r2, #96	; 0x60
 80046f0:	213f      	movs	r1, #63	; 0x3f
 80046f2:	5299      	strh	r1, [r3, r2]
 80046f4:	e003      	b.n	80046fe <UART_Start_Receive_IT+0xaa>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2260      	movs	r2, #96	; 0x60
 80046fa:	2100      	movs	r1, #0
 80046fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2290      	movs	r2, #144	; 0x90
 8004702:	2100      	movs	r1, #0
 8004704:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	228c      	movs	r2, #140	; 0x8c
 800470a:	2122      	movs	r1, #34	; 0x22
 800470c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8310 	mrs	r3, PRIMASK
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004714:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004718:	2301      	movs	r3, #1
 800471a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	059b      	lsls	r3, r3, #22
 8004748:	429a      	cmp	r2, r3
 800474a:	d150      	bne.n	80047ee <UART_Start_Receive_IT+0x19a>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2268      	movs	r2, #104	; 0x68
 8004750:	5a9b      	ldrh	r3, [r3, r2]
 8004752:	1dba      	adds	r2, r7, #6
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d349      	bcc.n	80047ee <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	015b      	lsls	r3, r3, #5
 8004762:	429a      	cmp	r2, r3
 8004764:	d107      	bne.n	8004776 <UART_Start_Receive_IT+0x122>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a46      	ldr	r2, [pc, #280]	; (800488c <UART_Start_Receive_IT+0x238>)
 8004772:	675a      	str	r2, [r3, #116]	; 0x74
 8004774:	e002      	b.n	800477c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a45      	ldr	r2, [pc, #276]	; (8004890 <UART_Start_Receive_IT+0x23c>)
 800477a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d019      	beq.n	80047b8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004784:	f3ef 8310 	mrs	r3, PRIMASK
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800478c:	65bb      	str	r3, [r7, #88]	; 0x58
 800478e:	2301      	movs	r3, #1
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	0049      	lsls	r1, r1, #1
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	f383 8810 	msr	PRIMASK, r3
}
 80047b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8310 	mrs	r3, PRIMASK
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047c0:	657b      	str	r3, [r7, #84]	; 0x54
 80047c2:	2301      	movs	r3, #1
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2180      	movs	r1, #128	; 0x80
 80047da:	0549      	lsls	r1, r1, #21
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	e047      	b.n	800487e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	015b      	lsls	r3, r3, #5
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d107      	bne.n	800480a <UART_Start_Receive_IT+0x1b6>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a23      	ldr	r2, [pc, #140]	; (8004894 <UART_Start_Receive_IT+0x240>)
 8004806:	675a      	str	r2, [r3, #116]	; 0x74
 8004808:	e002      	b.n	8004810 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a22      	ldr	r2, [pc, #136]	; (8004898 <UART_Start_Receive_IT+0x244>)
 800480e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004818:	f3ef 8310 	mrs	r3, PRIMASK
 800481c:	61fb      	str	r3, [r7, #28]
  return(result);
 800481e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004822:	2301      	movs	r3, #1
 8004824:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f383 8810 	msr	PRIMASK, r3
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2190      	movs	r1, #144	; 0x90
 800483a:	0049      	lsls	r1, r1, #1
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	e018      	b.n	800487e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484c:	f3ef 8310 	mrs	r3, PRIMASK
 8004850:	613b      	str	r3, [r7, #16]
  return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004854:	653b      	str	r3, [r7, #80]	; 0x50
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f383 8810 	msr	PRIMASK, r3
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2120      	movs	r1, #32
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f383 8810 	msr	PRIMASK, r3
}
 800487c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b018      	add	sp, #96	; 0x60
 8004886:	bd80      	pop	{r7, pc}
 8004888:	000001ff 	.word	0x000001ff
 800488c:	080050b9 	.word	0x080050b9
 8004890:	08004d79 	.word	0x08004d79
 8004894:	08004bb5 	.word	0x08004bb5
 8004898:	080049f1 	.word	0x080049f1

0800489c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08e      	sub	sp, #56	; 0x38
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a4:	f3ef 8310 	mrs	r3, PRIMASK
 80048a8:	617b      	str	r3, [r7, #20]
  return(result);
 80048aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048ac:	637b      	str	r3, [r7, #52]	; 0x34
 80048ae:	2301      	movs	r3, #1
 80048b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f383 8810 	msr	PRIMASK, r3
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4926      	ldr	r1, [pc, #152]	; (8004960 <UART_EndRxTransfer+0xc4>)
 80048c6:	400a      	ands	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f383 8810 	msr	PRIMASK, r3
}
 80048d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	623b      	str	r3, [r7, #32]
  return(result);
 80048dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
 80048e0:	2301      	movs	r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	491b      	ldr	r1, [pc, #108]	; (8004964 <UART_EndRxTransfer+0xc8>)
 80048f8:	400a      	ands	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d118      	bne.n	8004942 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	60bb      	str	r3, [r7, #8]
  return(result);
 8004916:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491a:	2301      	movs	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2110      	movs	r1, #16
 8004932:	438a      	bics	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	228c      	movs	r2, #140	; 0x8c
 8004946:	2120      	movs	r1, #32
 8004948:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	b00e      	add	sp, #56	; 0x38
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	fffffedf 	.word	0xfffffedf
 8004964:	effffffe 	.word	0xeffffffe

08004968 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	225e      	movs	r2, #94	; 0x5e
 800497a:	2100      	movs	r1, #0
 800497c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2256      	movs	r2, #86	; 0x56
 8004982:	2100      	movs	r1, #0
 8004984:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff f9c3 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	b004      	add	sp, #16
 8004994:	bd80      	pop	{r7, pc}

08004996 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499e:	f3ef 8310 	mrs	r3, PRIMASK
 80049a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80049a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	2301      	movs	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2140      	movs	r1, #64	; 0x40
 80049c0:	438a      	bics	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2288      	movs	r2, #136	; 0x88
 80049d4:	2120      	movs	r1, #32
 80049d6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f7ff f987 	bl	8003cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b006      	add	sp, #24
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b094      	sub	sp, #80	; 0x50
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049f8:	204e      	movs	r0, #78	; 0x4e
 80049fa:	183b      	adds	r3, r7, r0
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	2160      	movs	r1, #96	; 0x60
 8004a00:	5a52      	ldrh	r2, [r2, r1]
 8004a02:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	228c      	movs	r2, #140	; 0x8c
 8004a08:	589b      	ldr	r3, [r3, r2]
 8004a0a:	2b22      	cmp	r3, #34	; 0x22
 8004a0c:	d000      	beq.n	8004a10 <UART_RxISR_8BIT+0x20>
 8004a0e:	e0bf      	b.n	8004b90 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a16:	214c      	movs	r1, #76	; 0x4c
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	183b      	adds	r3, r7, r0
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b2d9      	uxtb	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	225e      	movs	r2, #94	; 0x5e
 8004a40:	5a9b      	ldrh	r3, [r3, r2]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b299      	uxth	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	225e      	movs	r2, #94	; 0x5e
 8004a4c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	225e      	movs	r2, #94	; 0x5e
 8004a52:	5a9b      	ldrh	r3, [r3, r2]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d000      	beq.n	8004a5c <UART_RxISR_8BIT+0x6c>
 8004a5a:	e0a1      	b.n	8004ba0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a66:	2301      	movs	r3, #1
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	f383 8810 	msr	PRIMASK, r3
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	494a      	ldr	r1, [pc, #296]	; (8004ba8 <UART_RxISR_8BIT+0x1b8>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	647b      	str	r3, [r7, #68]	; 0x44
 8004a98:	2301      	movs	r3, #1
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	f383 8810 	msr	PRIMASK, r3
}
 8004abe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	228c      	movs	r2, #140	; 0x8c
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a34      	ldr	r2, [pc, #208]	; (8004bac <UART_RxISR_8BIT+0x1bc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01f      	beq.n	8004b1e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d018      	beq.n	8004b1e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aec:	f3ef 8310 	mrs	r3, PRIMASK
 8004af0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004af2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004af4:	643b      	str	r3, [r7, #64]	; 0x40
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f383 8810 	msr	PRIMASK, r3
}
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4928      	ldr	r1, [pc, #160]	; (8004bb0 <UART_RxISR_8BIT+0x1c0>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f383 8810 	msr	PRIMASK, r3
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d12f      	bne.n	8004b86 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b32:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b36:	2301      	movs	r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f383 8810 	msr	PRIMASK, r3
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2110      	movs	r1, #16
 8004b4e:	438a      	bics	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f383 8810 	msr	PRIMASK, r3
}
 8004b5c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2210      	movs	r2, #16
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d103      	bne.n	8004b74 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2210      	movs	r2, #16
 8004b72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	225c      	movs	r2, #92	; 0x5c
 8004b78:	5a9a      	ldrh	r2, [r3, r2]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0011      	movs	r1, r2
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7ff f8d0 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b84:	e00c      	b.n	8004ba0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff f8bb 	bl	8003d04 <HAL_UART_RxCpltCallback>
}
 8004b8e:	e007      	b.n	8004ba0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2108      	movs	r1, #8
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b014      	add	sp, #80	; 0x50
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	fffffedf 	.word	0xfffffedf
 8004bac:	40008000 	.word	0x40008000
 8004bb0:	fbffffff 	.word	0xfbffffff

08004bb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b094      	sub	sp, #80	; 0x50
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004bbc:	204e      	movs	r0, #78	; 0x4e
 8004bbe:	183b      	adds	r3, r7, r0
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	2160      	movs	r1, #96	; 0x60
 8004bc4:	5a52      	ldrh	r2, [r2, r1]
 8004bc6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	228c      	movs	r2, #140	; 0x8c
 8004bcc:	589b      	ldr	r3, [r3, r2]
 8004bce:	2b22      	cmp	r3, #34	; 0x22
 8004bd0:	d000      	beq.n	8004bd4 <UART_RxISR_16BIT+0x20>
 8004bd2:	e0bf      	b.n	8004d54 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bda:	214c      	movs	r1, #76	; 0x4c
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	183a      	adds	r2, r7, r0
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	8812      	ldrh	r2, [r2, #0]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	225e      	movs	r2, #94	; 0x5e
 8004c04:	5a9b      	ldrh	r3, [r3, r2]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b299      	uxth	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	225e      	movs	r2, #94	; 0x5e
 8004c10:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	225e      	movs	r2, #94	; 0x5e
 8004c16:	5a9b      	ldrh	r3, [r3, r2]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d000      	beq.n	8004c20 <UART_RxISR_16BIT+0x6c>
 8004c1e:	e0a1      	b.n	8004d64 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c20:	f3ef 8310 	mrs	r3, PRIMASK
 8004c24:	623b      	str	r3, [r7, #32]
  return(result);
 8004c26:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	f383 8810 	msr	PRIMASK, r3
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	494a      	ldr	r1, [pc, #296]	; (8004d6c <UART_RxISR_16BIT+0x1b8>)
 8004c42:	400a      	ands	r2, r1
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	f383 8810 	msr	PRIMASK, r3
}
 8004c50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c52:	f3ef 8310 	mrs	r3, PRIMASK
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2101      	movs	r1, #1
 8004c74:	438a      	bics	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	f383 8810 	msr	PRIMASK, r3
}
 8004c82:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	228c      	movs	r2, #140	; 0x8c
 8004c88:	2120      	movs	r1, #32
 8004c8a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a34      	ldr	r2, [pc, #208]	; (8004d70 <UART_RxISR_16BIT+0x1bc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01f      	beq.n	8004ce2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	4013      	ands	r3, r2
 8004cae:	d018      	beq.n	8004ce2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4928      	ldr	r1, [pc, #160]	; (8004d74 <UART_RxISR_16BIT+0x1c0>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f383 8810 	msr	PRIMASK, r3
}
 8004ce0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d12f      	bne.n	8004d4a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cf6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2110      	movs	r1, #16
 8004d12:	438a      	bics	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d103      	bne.n	8004d38 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2210      	movs	r2, #16
 8004d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	225c      	movs	r2, #92	; 0x5c
 8004d3c:	5a9a      	ldrh	r2, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0011      	movs	r1, r2
 8004d42:	0018      	movs	r0, r3
 8004d44:	f7fe ffee 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d48:	e00c      	b.n	8004d64 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7fe ffd9 	bl	8003d04 <HAL_UART_RxCpltCallback>
}
 8004d52:	e007      	b.n	8004d64 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2108      	movs	r1, #8
 8004d60:	430a      	orrs	r2, r1
 8004d62:	619a      	str	r2, [r3, #24]
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b014      	add	sp, #80	; 0x50
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	fffffedf 	.word	0xfffffedf
 8004d70:	40008000 	.word	0x40008000
 8004d74:	fbffffff 	.word	0xfbffffff

08004d78 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b0a0      	sub	sp, #128	; 0x80
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004d80:	237a      	movs	r3, #122	; 0x7a
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	2160      	movs	r1, #96	; 0x60
 8004d88:	5a52      	ldrh	r2, [r2, r1]
 8004d8a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	228c      	movs	r2, #140	; 0x8c
 8004da8:	589b      	ldr	r3, [r3, r2]
 8004daa:	2b22      	cmp	r3, #34	; 0x22
 8004dac:	d000      	beq.n	8004db0 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004dae:	e16a      	b.n	8005086 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004db0:	236e      	movs	r3, #110	; 0x6e
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	2168      	movs	r1, #104	; 0x68
 8004db8:	5a52      	ldrh	r2, [r2, r1]
 8004dba:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dbc:	e111      	b.n	8004fe2 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc4:	216c      	movs	r1, #108	; 0x6c
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dca:	187b      	adds	r3, r7, r1
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	237a      	movs	r3, #122	; 0x7a
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b2d9      	uxtb	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	400a      	ands	r2, r1
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	225e      	movs	r2, #94	; 0x5e
 8004df0:	5a9b      	ldrh	r3, [r3, r2]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b299      	uxth	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	225e      	movs	r2, #94	; 0x5e
 8004dfc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e08:	2207      	movs	r2, #7
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d049      	beq.n	8004ea2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	d010      	beq.n	8004e38 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004e16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2290      	movs	r2, #144	; 0x90
 8004e2c:	589b      	ldr	r3, [r3, r2]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2190      	movs	r1, #144	; 0x90
 8004e36:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e42:	2201      	movs	r2, #1
 8004e44:	4013      	ands	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2290      	movs	r2, #144	; 0x90
 8004e54:	589b      	ldr	r3, [r3, r2]
 8004e56:	2204      	movs	r2, #4
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2190      	movs	r1, #144	; 0x90
 8004e5e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e62:	2204      	movs	r2, #4
 8004e64:	4013      	ands	r3, r2
 8004e66:	d00f      	beq.n	8004e88 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2204      	movs	r2, #4
 8004e76:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2290      	movs	r2, #144	; 0x90
 8004e7c:	589b      	ldr	r3, [r3, r2]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2190      	movs	r1, #144	; 0x90
 8004e86:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2290      	movs	r2, #144	; 0x90
 8004e8c:	589b      	ldr	r3, [r3, r2]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7fe ff3d 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2290      	movs	r2, #144	; 0x90
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	225e      	movs	r2, #94	; 0x5e
 8004ea6:	5a9b      	ldrh	r3, [r3, r2]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d000      	beq.n	8004eb0 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004eae:	e098      	b.n	8004fe2 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eba:	2301      	movs	r3, #1
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec0:	f383 8810 	msr	PRIMASK, r3
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4973      	ldr	r1, [pc, #460]	; (80050a0 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004ed2:	400a      	ands	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee6:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eea:	667b      	str	r3, [r7, #100]	; 0x64
 8004eec:	2301      	movs	r3, #1
 8004eee:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4968      	ldr	r1, [pc, #416]	; (80050a4 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0e:	f383 8810 	msr	PRIMASK, r3
}
 8004f12:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	228c      	movs	r2, #140	; 0x8c
 8004f18:	2120      	movs	r1, #32
 8004f1a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a5e      	ldr	r2, [pc, #376]	; (80050a8 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01f      	beq.n	8004f72 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d018      	beq.n	8004f72 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f40:	f3ef 8310 	mrs	r3, PRIMASK
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f48:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4952      	ldr	r1, [pc, #328]	; (80050ac <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	f383 8810 	msr	PRIMASK, r3
}
 8004f70:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d12f      	bne.n	8004fda <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f80:	f3ef 8310 	mrs	r3, PRIMASK
 8004f84:	623b      	str	r3, [r7, #32]
  return(result);
 8004f86:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	46c0      	nop			; (mov r8, r8)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2110      	movs	r1, #16
 8004fa2:	438a      	bics	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	f383 8810 	msr	PRIMASK, r3
}
 8004fb0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d103      	bne.n	8004fc8 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	225c      	movs	r2, #92	; 0x5c
 8004fcc:	5a9a      	ldrh	r2, [r3, r2]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7fe fea6 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
 8004fd8:	e003      	b.n	8004fe2 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7fe fe91 	bl	8003d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fe2:	236e      	movs	r3, #110	; 0x6e
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fee:	2220      	movs	r2, #32
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d000      	beq.n	8004ff6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004ff4:	e6e3      	b.n	8004dbe <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ff6:	205a      	movs	r0, #90	; 0x5a
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	215e      	movs	r1, #94	; 0x5e
 8004ffe:	5a52      	ldrh	r2, [r2, r1]
 8005000:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005002:	0001      	movs	r1, r0
 8005004:	187b      	adds	r3, r7, r1
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d044      	beq.n	8005096 <UART_RxISR_8BIT_FIFOEN+0x31e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2268      	movs	r2, #104	; 0x68
 8005010:	5a9b      	ldrh	r3, [r3, r2]
 8005012:	187a      	adds	r2, r7, r1
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d23d      	bcs.n	8005096 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501a:	f3ef 8310 	mrs	r3, PRIMASK
 800501e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005020:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005022:	657b      	str	r3, [r7, #84]	; 0x54
 8005024:	2301      	movs	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f383 8810 	msr	PRIMASK, r3
}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	491d      	ldr	r1, [pc, #116]	; (80050b0 <UART_RxISR_8BIT_FIFOEN+0x338>)
 800503c:	400a      	ands	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f383 8810 	msr	PRIMASK, r3
}
 800504a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005050:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005052:	f3ef 8310 	mrs	r3, PRIMASK
 8005056:	617b      	str	r3, [r7, #20]
  return(result);
 8005058:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	2301      	movs	r3, #1
 800505e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2120      	movs	r1, #32
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f383 8810 	msr	PRIMASK, r3
}
 8005082:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005084:	e007      	b.n	8005096 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2108      	movs	r1, #8
 8005092:	430a      	orrs	r2, r1
 8005094:	619a      	str	r2, [r3, #24]
}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	46bd      	mov	sp, r7
 800509a:	b020      	add	sp, #128	; 0x80
 800509c:	bd80      	pop	{r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	fffffeff 	.word	0xfffffeff
 80050a4:	effffffe 	.word	0xeffffffe
 80050a8:	40008000 	.word	0x40008000
 80050ac:	fbffffff 	.word	0xfbffffff
 80050b0:	efffffff 	.word	0xefffffff
 80050b4:	080049f1 	.word	0x080049f1

080050b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b0a2      	sub	sp, #136	; 0x88
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80050c0:	2382      	movs	r3, #130	; 0x82
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	2160      	movs	r1, #96	; 0x60
 80050c8:	5a52      	ldrh	r2, [r2, r1]
 80050ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	2284      	movs	r2, #132	; 0x84
 80050d4:	18ba      	adds	r2, r7, r2
 80050d6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	228c      	movs	r2, #140	; 0x8c
 80050ec:	589b      	ldr	r3, [r3, r2]
 80050ee:	2b22      	cmp	r3, #34	; 0x22
 80050f0:	d000      	beq.n	80050f4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80050f2:	e174      	b.n	80053de <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050f4:	2376      	movs	r3, #118	; 0x76
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	2168      	movs	r1, #104	; 0x68
 80050fc:	5a52      	ldrh	r2, [r2, r1]
 80050fe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005100:	e119      	b.n	8005336 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005108:	2174      	movs	r1, #116	; 0x74
 800510a:	187b      	adds	r3, r7, r1
 800510c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005114:	187b      	adds	r3, r7, r1
 8005116:	2282      	movs	r2, #130	; 0x82
 8005118:	18ba      	adds	r2, r7, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	8812      	ldrh	r2, [r2, #0]
 800511e:	4013      	ands	r3, r2
 8005120:	b29a      	uxth	r2, r3
 8005122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005124:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	1c9a      	adds	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	225e      	movs	r2, #94	; 0x5e
 8005134:	5a9b      	ldrh	r3, [r3, r2]
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b299      	uxth	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	225e      	movs	r2, #94	; 0x5e
 8005140:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2184      	movs	r1, #132	; 0x84
 800514a:	187a      	adds	r2, r7, r1
 800514c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800514e:	187b      	adds	r3, r7, r1
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2207      	movs	r2, #7
 8005154:	4013      	ands	r3, r2
 8005156:	d04e      	beq.n	80051f6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005158:	187b      	adds	r3, r7, r1
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2201      	movs	r2, #1
 800515e:	4013      	ands	r3, r2
 8005160:	d010      	beq.n	8005184 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005162:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4013      	ands	r3, r2
 800516a:	d00b      	beq.n	8005184 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2201      	movs	r2, #1
 8005172:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2290      	movs	r2, #144	; 0x90
 8005178:	589b      	ldr	r3, [r3, r2]
 800517a:	2201      	movs	r2, #1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2190      	movs	r1, #144	; 0x90
 8005182:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005184:	2384      	movs	r3, #132	; 0x84
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2202      	movs	r2, #2
 800518c:	4013      	ands	r3, r2
 800518e:	d00f      	beq.n	80051b0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005192:	2201      	movs	r2, #1
 8005194:	4013      	ands	r3, r2
 8005196:	d00b      	beq.n	80051b0 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2202      	movs	r2, #2
 800519e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2290      	movs	r2, #144	; 0x90
 80051a4:	589b      	ldr	r3, [r3, r2]
 80051a6:	2204      	movs	r2, #4
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2190      	movs	r1, #144	; 0x90
 80051ae:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051b0:	2384      	movs	r3, #132	; 0x84
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2204      	movs	r2, #4
 80051b8:	4013      	ands	r3, r2
 80051ba:	d00f      	beq.n	80051dc <UART_RxISR_16BIT_FIFOEN+0x124>
 80051bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051be:	2201      	movs	r2, #1
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00b      	beq.n	80051dc <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2204      	movs	r2, #4
 80051ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2290      	movs	r2, #144	; 0x90
 80051d0:	589b      	ldr	r3, [r3, r2]
 80051d2:	2202      	movs	r2, #2
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2190      	movs	r1, #144	; 0x90
 80051da:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2290      	movs	r2, #144	; 0x90
 80051e0:	589b      	ldr	r3, [r3, r2]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7fe fd93 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2290      	movs	r2, #144	; 0x90
 80051f2:	2100      	movs	r1, #0
 80051f4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	225e      	movs	r2, #94	; 0x5e
 80051fa:	5a9b      	ldrh	r3, [r3, r2]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d000      	beq.n	8005204 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005202:	e098      	b.n	8005336 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005204:	f3ef 8310 	mrs	r3, PRIMASK
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800520a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800520e:	2301      	movs	r3, #1
 8005210:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	f383 8810 	msr	PRIMASK, r3
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4974      	ldr	r1, [pc, #464]	; (80053f8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005226:	400a      	ands	r2, r1
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005230:	f383 8810 	msr	PRIMASK, r3
}
 8005234:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005236:	f3ef 8310 	mrs	r3, PRIMASK
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800523c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800523e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005240:	2301      	movs	r3, #1
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005246:	f383 8810 	msr	PRIMASK, r3
}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4969      	ldr	r1, [pc, #420]	; (80053fc <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005258:	400a      	ands	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005262:	f383 8810 	msr	PRIMASK, r3
}
 8005266:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	228c      	movs	r2, #140	; 0x8c
 800526c:	2120      	movs	r1, #32
 800526e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5f      	ldr	r2, [pc, #380]	; (8005400 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01f      	beq.n	80052c6 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	4013      	ands	r3, r2
 8005292:	d018      	beq.n	80052c6 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005294:	f3ef 8310 	mrs	r3, PRIMASK
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800529c:	667b      	str	r3, [r7, #100]	; 0x64
 800529e:	2301      	movs	r3, #1
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4953      	ldr	r1, [pc, #332]	; (8005404 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80052b6:	400a      	ands	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052bc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	f383 8810 	msr	PRIMASK, r3
}
 80052c4:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d12f      	bne.n	800532e <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d4:	f3ef 8310 	mrs	r3, PRIMASK
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052dc:	663b      	str	r3, [r7, #96]	; 0x60
 80052de:	2301      	movs	r3, #1
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2110      	movs	r1, #16
 80052f6:	438a      	bics	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	f383 8810 	msr	PRIMASK, r3
}
 8005304:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	2210      	movs	r2, #16
 800530e:	4013      	ands	r3, r2
 8005310:	2b10      	cmp	r3, #16
 8005312:	d103      	bne.n	800531c <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2210      	movs	r2, #16
 800531a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	225c      	movs	r2, #92	; 0x5c
 8005320:	5a9a      	ldrh	r2, [r3, r2]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0011      	movs	r1, r2
 8005326:	0018      	movs	r0, r3
 8005328:	f7fe fcfc 	bl	8003d24 <HAL_UARTEx_RxEventCallback>
 800532c:	e003      	b.n	8005336 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0018      	movs	r0, r3
 8005332:	f7fe fce7 	bl	8003d04 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005336:	2376      	movs	r3, #118	; 0x76
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <UART_RxISR_16BIT_FIFOEN+0x296>
 8005340:	2384      	movs	r3, #132	; 0x84
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2220      	movs	r2, #32
 8005348:	4013      	ands	r3, r2
 800534a:	d000      	beq.n	800534e <UART_RxISR_16BIT_FIFOEN+0x296>
 800534c:	e6d9      	b.n	8005102 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800534e:	205e      	movs	r0, #94	; 0x5e
 8005350:	183b      	adds	r3, r7, r0
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	215e      	movs	r1, #94	; 0x5e
 8005356:	5a52      	ldrh	r2, [r2, r1]
 8005358:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800535a:	0001      	movs	r1, r0
 800535c:	187b      	adds	r3, r7, r1
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d044      	beq.n	80053ee <UART_RxISR_16BIT_FIFOEN+0x336>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2268      	movs	r2, #104	; 0x68
 8005368:	5a9b      	ldrh	r3, [r3, r2]
 800536a:	187a      	adds	r2, r7, r1
 800536c:	8812      	ldrh	r2, [r2, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d23d      	bcs.n	80053ee <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005372:	f3ef 8310 	mrs	r3, PRIMASK
 8005376:	60fb      	str	r3, [r7, #12]
  return(result);
 8005378:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800537a:	65bb      	str	r3, [r7, #88]	; 0x58
 800537c:	2301      	movs	r3, #1
 800537e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	491d      	ldr	r1, [pc, #116]	; (8005408 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005394:	400a      	ands	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800539a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a19      	ldr	r2, [pc, #100]	; (800540c <UART_RxISR_16BIT_FIFOEN+0x354>)
 80053a8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053aa:	f3ef 8310 	mrs	r3, PRIMASK
 80053ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80053b0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053b2:	657b      	str	r3, [r7, #84]	; 0x54
 80053b4:	2301      	movs	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2120      	movs	r1, #32
 80053cc:	430a      	orrs	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	f383 8810 	msr	PRIMASK, r3
}
 80053da:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053dc:	e007      	b.n	80053ee <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2108      	movs	r1, #8
 80053ea:	430a      	orrs	r2, r1
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b022      	add	sp, #136	; 0x88
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	fffffeff 	.word	0xfffffeff
 80053fc:	effffffe 	.word	0xeffffffe
 8005400:	40008000 	.word	0x40008000
 8005404:	fbffffff 	.word	0xfbffffff
 8005408:	efffffff 	.word	0xefffffff
 800540c:	08004bb5 	.word	0x08004bb5

08005410 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	b002      	add	sp, #8
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b002      	add	sp, #8
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b002      	add	sp, #8
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2284      	movs	r2, #132	; 0x84
 800544c:	5c9b      	ldrb	r3, [r3, r2]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_UARTEx_DisableFifoMode+0x16>
 8005452:	2302      	movs	r3, #2
 8005454:	e027      	b.n	80054a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2284      	movs	r2, #132	; 0x84
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2288      	movs	r2, #136	; 0x88
 8005462:	2124      	movs	r1, #36	; 0x24
 8005464:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2101      	movs	r1, #1
 800547a:	438a      	bics	r2, r1
 800547c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a0b      	ldr	r2, [pc, #44]	; (80054b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2288      	movs	r2, #136	; 0x88
 8005498:	2120      	movs	r1, #32
 800549a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2284      	movs	r2, #132	; 0x84
 80054a0:	2100      	movs	r1, #0
 80054a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	0018      	movs	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b004      	add	sp, #16
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	dfffffff 	.word	0xdfffffff

080054b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2284      	movs	r2, #132	; 0x84
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e02e      	b.n	800552a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2284      	movs	r2, #132	; 0x84
 80054d0:	2101      	movs	r1, #1
 80054d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2288      	movs	r2, #136	; 0x88
 80054d8:	2124      	movs	r1, #36	; 0x24
 80054da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	438a      	bics	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	08d9      	lsrs	r1, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0018      	movs	r0, r3
 800550c:	f000 f854 	bl	80055b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2288      	movs	r2, #136	; 0x88
 800551c:	2120      	movs	r1, #32
 800551e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2284      	movs	r2, #132	; 0x84
 8005524:	2100      	movs	r1, #0
 8005526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2284      	movs	r2, #132	; 0x84
 8005542:	5c9b      	ldrb	r3, [r3, r2]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e02f      	b.n	80055ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2284      	movs	r2, #132	; 0x84
 8005550:	2101      	movs	r1, #1
 8005552:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2288      	movs	r2, #136	; 0x88
 8005558:	2124      	movs	r1, #36	; 0x24
 800555a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2101      	movs	r1, #1
 8005570:	438a      	bics	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800557c:	4013      	ands	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	0018      	movs	r0, r3
 800558e:	f000 f813 	bl	80055b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2288      	movs	r2, #136	; 0x88
 800559e:	2120      	movs	r1, #32
 80055a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2284      	movs	r2, #132	; 0x84
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b004      	add	sp, #16
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	f1ffffff 	.word	0xf1ffffff

080055b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	226a      	movs	r2, #106	; 0x6a
 80055cc:	2101      	movs	r1, #1
 80055ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2268      	movs	r2, #104	; 0x68
 80055d4:	2101      	movs	r1, #1
 80055d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055d8:	e043      	b.n	8005662 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055da:	260f      	movs	r6, #15
 80055dc:	19bb      	adds	r3, r7, r6
 80055de:	2208      	movs	r2, #8
 80055e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055e2:	200e      	movs	r0, #14
 80055e4:	183b      	adds	r3, r7, r0
 80055e6:	2208      	movs	r2, #8
 80055e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	0e5b      	lsrs	r3, r3, #25
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	240d      	movs	r4, #13
 80055f6:	193b      	adds	r3, r7, r4
 80055f8:	2107      	movs	r1, #7
 80055fa:	400a      	ands	r2, r1
 80055fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	0f5b      	lsrs	r3, r3, #29
 8005606:	b2da      	uxtb	r2, r3
 8005608:	250c      	movs	r5, #12
 800560a:	197b      	adds	r3, r7, r5
 800560c:	2107      	movs	r1, #7
 800560e:	400a      	ands	r2, r1
 8005610:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005612:	183b      	adds	r3, r7, r0
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	197a      	adds	r2, r7, r5
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	4914      	ldr	r1, [pc, #80]	; (800566c <UARTEx_SetNbDataToProcess+0xb4>)
 800561c:	5c8a      	ldrb	r2, [r1, r2]
 800561e:	435a      	muls	r2, r3
 8005620:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005622:	197b      	adds	r3, r7, r5
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	4a12      	ldr	r2, [pc, #72]	; (8005670 <UARTEx_SetNbDataToProcess+0xb8>)
 8005628:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800562a:	0019      	movs	r1, r3
 800562c:	f7fa fe06 	bl	800023c <__divsi3>
 8005630:	0003      	movs	r3, r0
 8005632:	b299      	uxth	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	226a      	movs	r2, #106	; 0x6a
 8005638:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800563a:	19bb      	adds	r3, r7, r6
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	193a      	adds	r2, r7, r4
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	490a      	ldr	r1, [pc, #40]	; (800566c <UARTEx_SetNbDataToProcess+0xb4>)
 8005644:	5c8a      	ldrb	r2, [r1, r2]
 8005646:	435a      	muls	r2, r3
 8005648:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800564a:	193b      	adds	r3, r7, r4
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <UARTEx_SetNbDataToProcess+0xb8>)
 8005650:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005652:	0019      	movs	r1, r3
 8005654:	f7fa fdf2 	bl	800023c <__divsi3>
 8005658:	0003      	movs	r3, r0
 800565a:	b299      	uxth	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2268      	movs	r2, #104	; 0x68
 8005660:	5299      	strh	r1, [r3, r2]
}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	46bd      	mov	sp, r7
 8005666:	b005      	add	sp, #20
 8005668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	0800629c 	.word	0x0800629c
 8005670:	080062a4 	.word	0x080062a4

08005674 <siprintf>:
 8005674:	b40e      	push	{r1, r2, r3}
 8005676:	b500      	push	{lr}
 8005678:	490b      	ldr	r1, [pc, #44]	; (80056a8 <siprintf+0x34>)
 800567a:	b09c      	sub	sp, #112	; 0x70
 800567c:	ab1d      	add	r3, sp, #116	; 0x74
 800567e:	9002      	str	r0, [sp, #8]
 8005680:	9006      	str	r0, [sp, #24]
 8005682:	9107      	str	r1, [sp, #28]
 8005684:	9104      	str	r1, [sp, #16]
 8005686:	4809      	ldr	r0, [pc, #36]	; (80056ac <siprintf+0x38>)
 8005688:	4909      	ldr	r1, [pc, #36]	; (80056b0 <siprintf+0x3c>)
 800568a:	cb04      	ldmia	r3!, {r2}
 800568c:	9105      	str	r1, [sp, #20]
 800568e:	6800      	ldr	r0, [r0, #0]
 8005690:	a902      	add	r1, sp, #8
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	f000 f9b4 	bl	8005a00 <_svfiprintf_r>
 8005698:	2200      	movs	r2, #0
 800569a:	9b02      	ldr	r3, [sp, #8]
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	b01c      	add	sp, #112	; 0x70
 80056a0:	bc08      	pop	{r3}
 80056a2:	b003      	add	sp, #12
 80056a4:	4718      	bx	r3
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	7fffffff 	.word	0x7fffffff
 80056ac:	20000058 	.word	0x20000058
 80056b0:	ffff0208 	.word	0xffff0208

080056b4 <memset>:
 80056b4:	0003      	movs	r3, r0
 80056b6:	1882      	adds	r2, r0, r2
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d100      	bne.n	80056be <memset+0xa>
 80056bc:	4770      	bx	lr
 80056be:	7019      	strb	r1, [r3, #0]
 80056c0:	3301      	adds	r3, #1
 80056c2:	e7f9      	b.n	80056b8 <memset+0x4>

080056c4 <strncmp>:
 80056c4:	b530      	push	{r4, r5, lr}
 80056c6:	0005      	movs	r5, r0
 80056c8:	1e10      	subs	r0, r2, #0
 80056ca:	d00b      	beq.n	80056e4 <strncmp+0x20>
 80056cc:	2400      	movs	r4, #0
 80056ce:	3a01      	subs	r2, #1
 80056d0:	5d2b      	ldrb	r3, [r5, r4]
 80056d2:	5d08      	ldrb	r0, [r1, r4]
 80056d4:	4283      	cmp	r3, r0
 80056d6:	d104      	bne.n	80056e2 <strncmp+0x1e>
 80056d8:	42a2      	cmp	r2, r4
 80056da:	d002      	beq.n	80056e2 <strncmp+0x1e>
 80056dc:	3401      	adds	r4, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f6      	bne.n	80056d0 <strncmp+0xc>
 80056e2:	1a18      	subs	r0, r3, r0
 80056e4:	bd30      	pop	{r4, r5, pc}
	...

080056e8 <__errno>:
 80056e8:	4b01      	ldr	r3, [pc, #4]	; (80056f0 <__errno+0x8>)
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	4770      	bx	lr
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	20000058 	.word	0x20000058

080056f4 <__libc_init_array>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	2600      	movs	r6, #0
 80056f8:	4c0c      	ldr	r4, [pc, #48]	; (800572c <__libc_init_array+0x38>)
 80056fa:	4d0d      	ldr	r5, [pc, #52]	; (8005730 <__libc_init_array+0x3c>)
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	42a6      	cmp	r6, r4
 8005702:	d109      	bne.n	8005718 <__libc_init_array+0x24>
 8005704:	2600      	movs	r6, #0
 8005706:	f000 fc6d 	bl	8005fe4 <_init>
 800570a:	4c0a      	ldr	r4, [pc, #40]	; (8005734 <__libc_init_array+0x40>)
 800570c:	4d0a      	ldr	r5, [pc, #40]	; (8005738 <__libc_init_array+0x44>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	42a6      	cmp	r6, r4
 8005714:	d105      	bne.n	8005722 <__libc_init_array+0x2e>
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	00b3      	lsls	r3, r6, #2
 800571a:	58eb      	ldr	r3, [r5, r3]
 800571c:	4798      	blx	r3
 800571e:	3601      	adds	r6, #1
 8005720:	e7ee      	b.n	8005700 <__libc_init_array+0xc>
 8005722:	00b3      	lsls	r3, r6, #2
 8005724:	58eb      	ldr	r3, [r5, r3]
 8005726:	4798      	blx	r3
 8005728:	3601      	adds	r6, #1
 800572a:	e7f2      	b.n	8005712 <__libc_init_array+0x1e>
 800572c:	080062e8 	.word	0x080062e8
 8005730:	080062e8 	.word	0x080062e8
 8005734:	080062ec 	.word	0x080062ec
 8005738:	080062e8 	.word	0x080062e8

0800573c <__retarget_lock_acquire_recursive>:
 800573c:	4770      	bx	lr

0800573e <__retarget_lock_release_recursive>:
 800573e:	4770      	bx	lr

08005740 <_free_r>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	0005      	movs	r5, r0
 8005744:	2900      	cmp	r1, #0
 8005746:	d010      	beq.n	800576a <_free_r+0x2a>
 8005748:	1f0c      	subs	r4, r1, #4
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	da00      	bge.n	8005752 <_free_r+0x12>
 8005750:	18e4      	adds	r4, r4, r3
 8005752:	0028      	movs	r0, r5
 8005754:	f000 f8e2 	bl	800591c <__malloc_lock>
 8005758:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <_free_r+0x90>)
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <_free_r+0x2c>
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	6014      	str	r4, [r2, #0]
 8005764:	0028      	movs	r0, r5
 8005766:	f000 f8e1 	bl	800592c <__malloc_unlock>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	42a3      	cmp	r3, r4
 800576e:	d908      	bls.n	8005782 <_free_r+0x42>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	1821      	adds	r1, r4, r0
 8005774:	428b      	cmp	r3, r1
 8005776:	d1f3      	bne.n	8005760 <_free_r+0x20>
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	1809      	adds	r1, r1, r0
 800577e:	6021      	str	r1, [r4, #0]
 8005780:	e7ee      	b.n	8005760 <_free_r+0x20>
 8005782:	001a      	movs	r2, r3
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <_free_r+0x4e>
 800578a:	42a3      	cmp	r3, r4
 800578c:	d9f9      	bls.n	8005782 <_free_r+0x42>
 800578e:	6811      	ldr	r1, [r2, #0]
 8005790:	1850      	adds	r0, r2, r1
 8005792:	42a0      	cmp	r0, r4
 8005794:	d10b      	bne.n	80057ae <_free_r+0x6e>
 8005796:	6820      	ldr	r0, [r4, #0]
 8005798:	1809      	adds	r1, r1, r0
 800579a:	1850      	adds	r0, r2, r1
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	4283      	cmp	r3, r0
 80057a0:	d1e0      	bne.n	8005764 <_free_r+0x24>
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	1841      	adds	r1, r0, r1
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	6053      	str	r3, [r2, #4]
 80057ac:	e7da      	b.n	8005764 <_free_r+0x24>
 80057ae:	42a0      	cmp	r0, r4
 80057b0:	d902      	bls.n	80057b8 <_free_r+0x78>
 80057b2:	230c      	movs	r3, #12
 80057b4:	602b      	str	r3, [r5, #0]
 80057b6:	e7d5      	b.n	8005764 <_free_r+0x24>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	1821      	adds	r1, r4, r0
 80057bc:	428b      	cmp	r3, r1
 80057be:	d103      	bne.n	80057c8 <_free_r+0x88>
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	1809      	adds	r1, r1, r0
 80057c6:	6021      	str	r1, [r4, #0]
 80057c8:	6063      	str	r3, [r4, #4]
 80057ca:	6054      	str	r4, [r2, #4]
 80057cc:	e7ca      	b.n	8005764 <_free_r+0x24>
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000a60 	.word	0x20000a60

080057d4 <sbrk_aligned>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4e0f      	ldr	r6, [pc, #60]	; (8005814 <sbrk_aligned+0x40>)
 80057d8:	000d      	movs	r5, r1
 80057da:	6831      	ldr	r1, [r6, #0]
 80057dc:	0004      	movs	r4, r0
 80057de:	2900      	cmp	r1, #0
 80057e0:	d102      	bne.n	80057e8 <sbrk_aligned+0x14>
 80057e2:	f000 fba1 	bl	8005f28 <_sbrk_r>
 80057e6:	6030      	str	r0, [r6, #0]
 80057e8:	0029      	movs	r1, r5
 80057ea:	0020      	movs	r0, r4
 80057ec:	f000 fb9c 	bl	8005f28 <_sbrk_r>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d00a      	beq.n	800580a <sbrk_aligned+0x36>
 80057f4:	2303      	movs	r3, #3
 80057f6:	1cc5      	adds	r5, r0, #3
 80057f8:	439d      	bics	r5, r3
 80057fa:	42a8      	cmp	r0, r5
 80057fc:	d007      	beq.n	800580e <sbrk_aligned+0x3a>
 80057fe:	1a29      	subs	r1, r5, r0
 8005800:	0020      	movs	r0, r4
 8005802:	f000 fb91 	bl	8005f28 <_sbrk_r>
 8005806:	3001      	adds	r0, #1
 8005808:	d101      	bne.n	800580e <sbrk_aligned+0x3a>
 800580a:	2501      	movs	r5, #1
 800580c:	426d      	negs	r5, r5
 800580e:	0028      	movs	r0, r5
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	20000a64 	.word	0x20000a64

08005818 <_malloc_r>:
 8005818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800581a:	2203      	movs	r2, #3
 800581c:	1ccb      	adds	r3, r1, #3
 800581e:	4393      	bics	r3, r2
 8005820:	3308      	adds	r3, #8
 8005822:	0006      	movs	r6, r0
 8005824:	001f      	movs	r7, r3
 8005826:	2b0c      	cmp	r3, #12
 8005828:	d238      	bcs.n	800589c <_malloc_r+0x84>
 800582a:	270c      	movs	r7, #12
 800582c:	42b9      	cmp	r1, r7
 800582e:	d837      	bhi.n	80058a0 <_malloc_r+0x88>
 8005830:	0030      	movs	r0, r6
 8005832:	f000 f873 	bl	800591c <__malloc_lock>
 8005836:	4b38      	ldr	r3, [pc, #224]	; (8005918 <_malloc_r+0x100>)
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	001c      	movs	r4, r3
 800583e:	2c00      	cmp	r4, #0
 8005840:	d133      	bne.n	80058aa <_malloc_r+0x92>
 8005842:	0039      	movs	r1, r7
 8005844:	0030      	movs	r0, r6
 8005846:	f7ff ffc5 	bl	80057d4 <sbrk_aligned>
 800584a:	0004      	movs	r4, r0
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d15e      	bne.n	800590e <_malloc_r+0xf6>
 8005850:	9b00      	ldr	r3, [sp, #0]
 8005852:	681c      	ldr	r4, [r3, #0]
 8005854:	0025      	movs	r5, r4
 8005856:	2d00      	cmp	r5, #0
 8005858:	d14e      	bne.n	80058f8 <_malloc_r+0xe0>
 800585a:	2c00      	cmp	r4, #0
 800585c:	d051      	beq.n	8005902 <_malloc_r+0xea>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	0029      	movs	r1, r5
 8005862:	18e3      	adds	r3, r4, r3
 8005864:	0030      	movs	r0, r6
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	f000 fb5e 	bl	8005f28 <_sbrk_r>
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	4283      	cmp	r3, r0
 8005870:	d147      	bne.n	8005902 <_malloc_r+0xea>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	0030      	movs	r0, r6
 8005876:	1aff      	subs	r7, r7, r3
 8005878:	0039      	movs	r1, r7
 800587a:	f7ff ffab 	bl	80057d4 <sbrk_aligned>
 800587e:	3001      	adds	r0, #1
 8005880:	d03f      	beq.n	8005902 <_malloc_r+0xea>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	19db      	adds	r3, r3, r7
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	9b00      	ldr	r3, [sp, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d040      	beq.n	8005912 <_malloc_r+0xfa>
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	42a2      	cmp	r2, r4
 8005894:	d133      	bne.n	80058fe <_malloc_r+0xe6>
 8005896:	2200      	movs	r2, #0
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	e014      	b.n	80058c6 <_malloc_r+0xae>
 800589c:	2b00      	cmp	r3, #0
 800589e:	dac5      	bge.n	800582c <_malloc_r+0x14>
 80058a0:	230c      	movs	r3, #12
 80058a2:	2500      	movs	r5, #0
 80058a4:	6033      	str	r3, [r6, #0]
 80058a6:	0028      	movs	r0, r5
 80058a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058aa:	6821      	ldr	r1, [r4, #0]
 80058ac:	1bc9      	subs	r1, r1, r7
 80058ae:	d420      	bmi.n	80058f2 <_malloc_r+0xda>
 80058b0:	290b      	cmp	r1, #11
 80058b2:	d918      	bls.n	80058e6 <_malloc_r+0xce>
 80058b4:	19e2      	adds	r2, r4, r7
 80058b6:	6027      	str	r7, [r4, #0]
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d112      	bne.n	80058e2 <_malloc_r+0xca>
 80058bc:	9b00      	ldr	r3, [sp, #0]
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	6011      	str	r1, [r2, #0]
 80058c4:	6053      	str	r3, [r2, #4]
 80058c6:	0030      	movs	r0, r6
 80058c8:	0025      	movs	r5, r4
 80058ca:	f000 f82f 	bl	800592c <__malloc_unlock>
 80058ce:	2207      	movs	r2, #7
 80058d0:	350b      	adds	r5, #11
 80058d2:	1d23      	adds	r3, r4, #4
 80058d4:	4395      	bics	r5, r2
 80058d6:	1aea      	subs	r2, r5, r3
 80058d8:	429d      	cmp	r5, r3
 80058da:	d0e4      	beq.n	80058a6 <_malloc_r+0x8e>
 80058dc:	1b5b      	subs	r3, r3, r5
 80058de:	50a3      	str	r3, [r4, r2]
 80058e0:	e7e1      	b.n	80058a6 <_malloc_r+0x8e>
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	e7ec      	b.n	80058c0 <_malloc_r+0xa8>
 80058e6:	6862      	ldr	r2, [r4, #4]
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d1d5      	bne.n	8005898 <_malloc_r+0x80>
 80058ec:	9b00      	ldr	r3, [sp, #0]
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e7e9      	b.n	80058c6 <_malloc_r+0xae>
 80058f2:	0023      	movs	r3, r4
 80058f4:	6864      	ldr	r4, [r4, #4]
 80058f6:	e7a2      	b.n	800583e <_malloc_r+0x26>
 80058f8:	002c      	movs	r4, r5
 80058fa:	686d      	ldr	r5, [r5, #4]
 80058fc:	e7ab      	b.n	8005856 <_malloc_r+0x3e>
 80058fe:	0013      	movs	r3, r2
 8005900:	e7c4      	b.n	800588c <_malloc_r+0x74>
 8005902:	230c      	movs	r3, #12
 8005904:	0030      	movs	r0, r6
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	f000 f810 	bl	800592c <__malloc_unlock>
 800590c:	e7cb      	b.n	80058a6 <_malloc_r+0x8e>
 800590e:	6027      	str	r7, [r4, #0]
 8005910:	e7d9      	b.n	80058c6 <_malloc_r+0xae>
 8005912:	605b      	str	r3, [r3, #4]
 8005914:	deff      	udf	#255	; 0xff
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	20000a60 	.word	0x20000a60

0800591c <__malloc_lock>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4802      	ldr	r0, [pc, #8]	; (8005928 <__malloc_lock+0xc>)
 8005920:	f7ff ff0c 	bl	800573c <__retarget_lock_acquire_recursive>
 8005924:	bd10      	pop	{r4, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	20000a5c 	.word	0x20000a5c

0800592c <__malloc_unlock>:
 800592c:	b510      	push	{r4, lr}
 800592e:	4802      	ldr	r0, [pc, #8]	; (8005938 <__malloc_unlock+0xc>)
 8005930:	f7ff ff05 	bl	800573e <__retarget_lock_release_recursive>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	20000a5c 	.word	0x20000a5c

0800593c <__ssputs_r>:
 800593c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800593e:	b085      	sub	sp, #20
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	9203      	str	r2, [sp, #12]
 8005944:	688e      	ldr	r6, [r1, #8]
 8005946:	9a01      	ldr	r2, [sp, #4]
 8005948:	0007      	movs	r7, r0
 800594a:	000c      	movs	r4, r1
 800594c:	680b      	ldr	r3, [r1, #0]
 800594e:	4296      	cmp	r6, r2
 8005950:	d831      	bhi.n	80059b6 <__ssputs_r+0x7a>
 8005952:	898a      	ldrh	r2, [r1, #12]
 8005954:	2190      	movs	r1, #144	; 0x90
 8005956:	00c9      	lsls	r1, r1, #3
 8005958:	420a      	tst	r2, r1
 800595a:	d029      	beq.n	80059b0 <__ssputs_r+0x74>
 800595c:	2003      	movs	r0, #3
 800595e:	6921      	ldr	r1, [r4, #16]
 8005960:	1a5b      	subs	r3, r3, r1
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	6963      	ldr	r3, [r4, #20]
 8005966:	4343      	muls	r3, r0
 8005968:	0fdd      	lsrs	r5, r3, #31
 800596a:	18ed      	adds	r5, r5, r3
 800596c:	9b01      	ldr	r3, [sp, #4]
 800596e:	9802      	ldr	r0, [sp, #8]
 8005970:	3301      	adds	r3, #1
 8005972:	181b      	adds	r3, r3, r0
 8005974:	106d      	asrs	r5, r5, #1
 8005976:	42ab      	cmp	r3, r5
 8005978:	d900      	bls.n	800597c <__ssputs_r+0x40>
 800597a:	001d      	movs	r5, r3
 800597c:	0552      	lsls	r2, r2, #21
 800597e:	d529      	bpl.n	80059d4 <__ssputs_r+0x98>
 8005980:	0029      	movs	r1, r5
 8005982:	0038      	movs	r0, r7
 8005984:	f7ff ff48 	bl	8005818 <_malloc_r>
 8005988:	1e06      	subs	r6, r0, #0
 800598a:	d02d      	beq.n	80059e8 <__ssputs_r+0xac>
 800598c:	9a02      	ldr	r2, [sp, #8]
 800598e:	6921      	ldr	r1, [r4, #16]
 8005990:	f000 fae7 	bl	8005f62 <memcpy>
 8005994:	89a2      	ldrh	r2, [r4, #12]
 8005996:	4b19      	ldr	r3, [pc, #100]	; (80059fc <__ssputs_r+0xc0>)
 8005998:	401a      	ands	r2, r3
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	4313      	orrs	r3, r2
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	9b02      	ldr	r3, [sp, #8]
 80059a2:	6126      	str	r6, [r4, #16]
 80059a4:	18f6      	adds	r6, r6, r3
 80059a6:	6026      	str	r6, [r4, #0]
 80059a8:	6165      	str	r5, [r4, #20]
 80059aa:	9e01      	ldr	r6, [sp, #4]
 80059ac:	1aed      	subs	r5, r5, r3
 80059ae:	60a5      	str	r5, [r4, #8]
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	429e      	cmp	r6, r3
 80059b4:	d900      	bls.n	80059b8 <__ssputs_r+0x7c>
 80059b6:	9e01      	ldr	r6, [sp, #4]
 80059b8:	0032      	movs	r2, r6
 80059ba:	9903      	ldr	r1, [sp, #12]
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	f000 fa9f 	bl	8005f00 <memmove>
 80059c2:	2000      	movs	r0, #0
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	1b9b      	subs	r3, r3, r6
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	199b      	adds	r3, r3, r6
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	b005      	add	sp, #20
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d4:	002a      	movs	r2, r5
 80059d6:	0038      	movs	r0, r7
 80059d8:	f000 facc 	bl	8005f74 <_realloc_r>
 80059dc:	1e06      	subs	r6, r0, #0
 80059de:	d1df      	bne.n	80059a0 <__ssputs_r+0x64>
 80059e0:	0038      	movs	r0, r7
 80059e2:	6921      	ldr	r1, [r4, #16]
 80059e4:	f7ff feac 	bl	8005740 <_free_r>
 80059e8:	230c      	movs	r3, #12
 80059ea:	2001      	movs	r0, #1
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	89a2      	ldrh	r2, [r4, #12]
 80059f0:	3334      	adds	r3, #52	; 0x34
 80059f2:	4313      	orrs	r3, r2
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	4240      	negs	r0, r0
 80059f8:	e7ea      	b.n	80059d0 <__ssputs_r+0x94>
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	fffffb7f 	.word	0xfffffb7f

08005a00 <_svfiprintf_r>:
 8005a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a02:	b0a1      	sub	sp, #132	; 0x84
 8005a04:	9003      	str	r0, [sp, #12]
 8005a06:	001d      	movs	r5, r3
 8005a08:	898b      	ldrh	r3, [r1, #12]
 8005a0a:	000f      	movs	r7, r1
 8005a0c:	0016      	movs	r6, r2
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	d511      	bpl.n	8005a36 <_svfiprintf_r+0x36>
 8005a12:	690b      	ldr	r3, [r1, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10e      	bne.n	8005a36 <_svfiprintf_r+0x36>
 8005a18:	2140      	movs	r1, #64	; 0x40
 8005a1a:	f7ff fefd 	bl	8005818 <_malloc_r>
 8005a1e:	6038      	str	r0, [r7, #0]
 8005a20:	6138      	str	r0, [r7, #16]
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d105      	bne.n	8005a32 <_svfiprintf_r+0x32>
 8005a26:	230c      	movs	r3, #12
 8005a28:	9a03      	ldr	r2, [sp, #12]
 8005a2a:	3801      	subs	r0, #1
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	b021      	add	sp, #132	; 0x84
 8005a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a32:	2340      	movs	r3, #64	; 0x40
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	2300      	movs	r3, #0
 8005a38:	ac08      	add	r4, sp, #32
 8005a3a:	6163      	str	r3, [r4, #20]
 8005a3c:	3320      	adds	r3, #32
 8005a3e:	7663      	strb	r3, [r4, #25]
 8005a40:	3310      	adds	r3, #16
 8005a42:	76a3      	strb	r3, [r4, #26]
 8005a44:	9507      	str	r5, [sp, #28]
 8005a46:	0035      	movs	r5, r6
 8005a48:	782b      	ldrb	r3, [r5, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <_svfiprintf_r+0x52>
 8005a4e:	2b25      	cmp	r3, #37	; 0x25
 8005a50:	d148      	bne.n	8005ae4 <_svfiprintf_r+0xe4>
 8005a52:	1bab      	subs	r3, r5, r6
 8005a54:	9305      	str	r3, [sp, #20]
 8005a56:	42b5      	cmp	r5, r6
 8005a58:	d00b      	beq.n	8005a72 <_svfiprintf_r+0x72>
 8005a5a:	0032      	movs	r2, r6
 8005a5c:	0039      	movs	r1, r7
 8005a5e:	9803      	ldr	r0, [sp, #12]
 8005a60:	f7ff ff6c 	bl	800593c <__ssputs_r>
 8005a64:	3001      	adds	r0, #1
 8005a66:	d100      	bne.n	8005a6a <_svfiprintf_r+0x6a>
 8005a68:	e0af      	b.n	8005bca <_svfiprintf_r+0x1ca>
 8005a6a:	6963      	ldr	r3, [r4, #20]
 8005a6c:	9a05      	ldr	r2, [sp, #20]
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	6163      	str	r3, [r4, #20]
 8005a72:	782b      	ldrb	r3, [r5, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d100      	bne.n	8005a7a <_svfiprintf_r+0x7a>
 8005a78:	e0a7      	b.n	8005bca <_svfiprintf_r+0x1ca>
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4252      	negs	r2, r2
 8005a80:	6062      	str	r2, [r4, #4]
 8005a82:	a904      	add	r1, sp, #16
 8005a84:	3254      	adds	r2, #84	; 0x54
 8005a86:	1852      	adds	r2, r2, r1
 8005a88:	1c6e      	adds	r6, r5, #1
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	60e3      	str	r3, [r4, #12]
 8005a8e:	60a3      	str	r3, [r4, #8]
 8005a90:	7013      	strb	r3, [r2, #0]
 8005a92:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a94:	4b55      	ldr	r3, [pc, #340]	; (8005bec <_svfiprintf_r+0x1ec>)
 8005a96:	2205      	movs	r2, #5
 8005a98:	0018      	movs	r0, r3
 8005a9a:	7831      	ldrb	r1, [r6, #0]
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	f000 fa55 	bl	8005f4c <memchr>
 8005aa2:	1c75      	adds	r5, r6, #1
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d11f      	bne.n	8005ae8 <_svfiprintf_r+0xe8>
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	06d3      	lsls	r3, r2, #27
 8005aac:	d504      	bpl.n	8005ab8 <_svfiprintf_r+0xb8>
 8005aae:	2353      	movs	r3, #83	; 0x53
 8005ab0:	a904      	add	r1, sp, #16
 8005ab2:	185b      	adds	r3, r3, r1
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	7019      	strb	r1, [r3, #0]
 8005ab8:	0713      	lsls	r3, r2, #28
 8005aba:	d504      	bpl.n	8005ac6 <_svfiprintf_r+0xc6>
 8005abc:	2353      	movs	r3, #83	; 0x53
 8005abe:	a904      	add	r1, sp, #16
 8005ac0:	185b      	adds	r3, r3, r1
 8005ac2:	212b      	movs	r1, #43	; 0x2b
 8005ac4:	7019      	strb	r1, [r3, #0]
 8005ac6:	7833      	ldrb	r3, [r6, #0]
 8005ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aca:	d016      	beq.n	8005afa <_svfiprintf_r+0xfa>
 8005acc:	0035      	movs	r5, r6
 8005ace:	2100      	movs	r1, #0
 8005ad0:	200a      	movs	r0, #10
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	782a      	ldrb	r2, [r5, #0]
 8005ad6:	1c6e      	adds	r6, r5, #1
 8005ad8:	3a30      	subs	r2, #48	; 0x30
 8005ada:	2a09      	cmp	r2, #9
 8005adc:	d94e      	bls.n	8005b7c <_svfiprintf_r+0x17c>
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	d111      	bne.n	8005b06 <_svfiprintf_r+0x106>
 8005ae2:	e017      	b.n	8005b14 <_svfiprintf_r+0x114>
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7af      	b.n	8005a48 <_svfiprintf_r+0x48>
 8005ae8:	9b05      	ldr	r3, [sp, #20]
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	1ac0      	subs	r0, r0, r3
 8005aee:	2301      	movs	r3, #1
 8005af0:	4083      	lsls	r3, r0
 8005af2:	4313      	orrs	r3, r2
 8005af4:	002e      	movs	r6, r5
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	e7cc      	b.n	8005a94 <_svfiprintf_r+0x94>
 8005afa:	9b07      	ldr	r3, [sp, #28]
 8005afc:	1d19      	adds	r1, r3, #4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	9107      	str	r1, [sp, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	db01      	blt.n	8005b0a <_svfiprintf_r+0x10a>
 8005b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b08:	e004      	b.n	8005b14 <_svfiprintf_r+0x114>
 8005b0a:	425b      	negs	r3, r3
 8005b0c:	60e3      	str	r3, [r4, #12]
 8005b0e:	2302      	movs	r3, #2
 8005b10:	4313      	orrs	r3, r2
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	782b      	ldrb	r3, [r5, #0]
 8005b16:	2b2e      	cmp	r3, #46	; 0x2e
 8005b18:	d10a      	bne.n	8005b30 <_svfiprintf_r+0x130>
 8005b1a:	786b      	ldrb	r3, [r5, #1]
 8005b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1e:	d135      	bne.n	8005b8c <_svfiprintf_r+0x18c>
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	3502      	adds	r5, #2
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	9207      	str	r2, [sp, #28]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	db2b      	blt.n	8005b86 <_svfiprintf_r+0x186>
 8005b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b30:	4e2f      	ldr	r6, [pc, #188]	; (8005bf0 <_svfiprintf_r+0x1f0>)
 8005b32:	2203      	movs	r2, #3
 8005b34:	0030      	movs	r0, r6
 8005b36:	7829      	ldrb	r1, [r5, #0]
 8005b38:	f000 fa08 	bl	8005f4c <memchr>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d006      	beq.n	8005b4e <_svfiprintf_r+0x14e>
 8005b40:	2340      	movs	r3, #64	; 0x40
 8005b42:	1b80      	subs	r0, r0, r6
 8005b44:	4083      	lsls	r3, r0
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	3501      	adds	r5, #1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	7829      	ldrb	r1, [r5, #0]
 8005b50:	2206      	movs	r2, #6
 8005b52:	4828      	ldr	r0, [pc, #160]	; (8005bf4 <_svfiprintf_r+0x1f4>)
 8005b54:	1c6e      	adds	r6, r5, #1
 8005b56:	7621      	strb	r1, [r4, #24]
 8005b58:	f000 f9f8 	bl	8005f4c <memchr>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d03c      	beq.n	8005bda <_svfiprintf_r+0x1da>
 8005b60:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <_svfiprintf_r+0x1f8>)
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d125      	bne.n	8005bb2 <_svfiprintf_r+0x1b2>
 8005b66:	2207      	movs	r2, #7
 8005b68:	9b07      	ldr	r3, [sp, #28]
 8005b6a:	3307      	adds	r3, #7
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	3308      	adds	r3, #8
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	6963      	ldr	r3, [r4, #20]
 8005b74:	9a04      	ldr	r2, [sp, #16]
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	6163      	str	r3, [r4, #20]
 8005b7a:	e764      	b.n	8005a46 <_svfiprintf_r+0x46>
 8005b7c:	4343      	muls	r3, r0
 8005b7e:	0035      	movs	r5, r6
 8005b80:	2101      	movs	r1, #1
 8005b82:	189b      	adds	r3, r3, r2
 8005b84:	e7a6      	b.n	8005ad4 <_svfiprintf_r+0xd4>
 8005b86:	2301      	movs	r3, #1
 8005b88:	425b      	negs	r3, r3
 8005b8a:	e7d0      	b.n	8005b2e <_svfiprintf_r+0x12e>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	200a      	movs	r0, #10
 8005b90:	001a      	movs	r2, r3
 8005b92:	3501      	adds	r5, #1
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	7829      	ldrb	r1, [r5, #0]
 8005b98:	1c6e      	adds	r6, r5, #1
 8005b9a:	3930      	subs	r1, #48	; 0x30
 8005b9c:	2909      	cmp	r1, #9
 8005b9e:	d903      	bls.n	8005ba8 <_svfiprintf_r+0x1a8>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0c5      	beq.n	8005b30 <_svfiprintf_r+0x130>
 8005ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba6:	e7c3      	b.n	8005b30 <_svfiprintf_r+0x130>
 8005ba8:	4342      	muls	r2, r0
 8005baa:	0035      	movs	r5, r6
 8005bac:	2301      	movs	r3, #1
 8005bae:	1852      	adds	r2, r2, r1
 8005bb0:	e7f1      	b.n	8005b96 <_svfiprintf_r+0x196>
 8005bb2:	aa07      	add	r2, sp, #28
 8005bb4:	9200      	str	r2, [sp, #0]
 8005bb6:	0021      	movs	r1, r4
 8005bb8:	003a      	movs	r2, r7
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <_svfiprintf_r+0x1fc>)
 8005bbc:	9803      	ldr	r0, [sp, #12]
 8005bbe:	e000      	b.n	8005bc2 <_svfiprintf_r+0x1c2>
 8005bc0:	bf00      	nop
 8005bc2:	9004      	str	r0, [sp, #16]
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	d1d3      	bne.n	8005b72 <_svfiprintf_r+0x172>
 8005bca:	89bb      	ldrh	r3, [r7, #12]
 8005bcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bce:	065b      	lsls	r3, r3, #25
 8005bd0:	d400      	bmi.n	8005bd4 <_svfiprintf_r+0x1d4>
 8005bd2:	e72c      	b.n	8005a2e <_svfiprintf_r+0x2e>
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	4240      	negs	r0, r0
 8005bd8:	e729      	b.n	8005a2e <_svfiprintf_r+0x2e>
 8005bda:	aa07      	add	r2, sp, #28
 8005bdc:	9200      	str	r2, [sp, #0]
 8005bde:	0021      	movs	r1, r4
 8005be0:	003a      	movs	r2, r7
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <_svfiprintf_r+0x1fc>)
 8005be4:	9803      	ldr	r0, [sp, #12]
 8005be6:	f000 f87b 	bl	8005ce0 <_printf_i>
 8005bea:	e7ea      	b.n	8005bc2 <_svfiprintf_r+0x1c2>
 8005bec:	080062ac 	.word	0x080062ac
 8005bf0:	080062b2 	.word	0x080062b2
 8005bf4:	080062b6 	.word	0x080062b6
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	0800593d 	.word	0x0800593d

08005c00 <_printf_common>:
 8005c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c02:	0016      	movs	r6, r2
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	688a      	ldr	r2, [r1, #8]
 8005c08:	690b      	ldr	r3, [r1, #16]
 8005c0a:	000c      	movs	r4, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	da00      	bge.n	8005c14 <_printf_common+0x14>
 8005c12:	0013      	movs	r3, r2
 8005c14:	0022      	movs	r2, r4
 8005c16:	6033      	str	r3, [r6, #0]
 8005c18:	3243      	adds	r2, #67	; 0x43
 8005c1a:	7812      	ldrb	r2, [r2, #0]
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	d001      	beq.n	8005c24 <_printf_common+0x24>
 8005c20:	3301      	adds	r3, #1
 8005c22:	6033      	str	r3, [r6, #0]
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	069b      	lsls	r3, r3, #26
 8005c28:	d502      	bpl.n	8005c30 <_printf_common+0x30>
 8005c2a:	6833      	ldr	r3, [r6, #0]
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	6033      	str	r3, [r6, #0]
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	2306      	movs	r3, #6
 8005c34:	0015      	movs	r5, r2
 8005c36:	401d      	ands	r5, r3
 8005c38:	421a      	tst	r2, r3
 8005c3a:	d027      	beq.n	8005c8c <_printf_common+0x8c>
 8005c3c:	0023      	movs	r3, r4
 8005c3e:	3343      	adds	r3, #67	; 0x43
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	1e5a      	subs	r2, r3, #1
 8005c44:	4193      	sbcs	r3, r2
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	0692      	lsls	r2, r2, #26
 8005c4a:	d430      	bmi.n	8005cae <_printf_common+0xae>
 8005c4c:	0022      	movs	r2, r4
 8005c4e:	9901      	ldr	r1, [sp, #4]
 8005c50:	9800      	ldr	r0, [sp, #0]
 8005c52:	9d08      	ldr	r5, [sp, #32]
 8005c54:	3243      	adds	r2, #67	; 0x43
 8005c56:	47a8      	blx	r5
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d025      	beq.n	8005ca8 <_printf_common+0xa8>
 8005c5c:	2206      	movs	r2, #6
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	2500      	movs	r5, #0
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d105      	bne.n	8005c74 <_printf_common+0x74>
 8005c68:	6833      	ldr	r3, [r6, #0]
 8005c6a:	68e5      	ldr	r5, [r4, #12]
 8005c6c:	1aed      	subs	r5, r5, r3
 8005c6e:	43eb      	mvns	r3, r5
 8005c70:	17db      	asrs	r3, r3, #31
 8005c72:	401d      	ands	r5, r3
 8005c74:	68a3      	ldr	r3, [r4, #8]
 8005c76:	6922      	ldr	r2, [r4, #16]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	dd01      	ble.n	8005c80 <_printf_common+0x80>
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	18ed      	adds	r5, r5, r3
 8005c80:	2600      	movs	r6, #0
 8005c82:	42b5      	cmp	r5, r6
 8005c84:	d120      	bne.n	8005cc8 <_printf_common+0xc8>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e010      	b.n	8005cac <_printf_common+0xac>
 8005c8a:	3501      	adds	r5, #1
 8005c8c:	68e3      	ldr	r3, [r4, #12]
 8005c8e:	6832      	ldr	r2, [r6, #0]
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	42ab      	cmp	r3, r5
 8005c94:	ddd2      	ble.n	8005c3c <_printf_common+0x3c>
 8005c96:	0022      	movs	r2, r4
 8005c98:	2301      	movs	r3, #1
 8005c9a:	9901      	ldr	r1, [sp, #4]
 8005c9c:	9800      	ldr	r0, [sp, #0]
 8005c9e:	9f08      	ldr	r7, [sp, #32]
 8005ca0:	3219      	adds	r2, #25
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d1f0      	bne.n	8005c8a <_printf_common+0x8a>
 8005ca8:	2001      	movs	r0, #1
 8005caa:	4240      	negs	r0, r0
 8005cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cae:	2030      	movs	r0, #48	; 0x30
 8005cb0:	18e1      	adds	r1, r4, r3
 8005cb2:	3143      	adds	r1, #67	; 0x43
 8005cb4:	7008      	strb	r0, [r1, #0]
 8005cb6:	0021      	movs	r1, r4
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	3145      	adds	r1, #69	; 0x45
 8005cbc:	7809      	ldrb	r1, [r1, #0]
 8005cbe:	18a2      	adds	r2, r4, r2
 8005cc0:	3243      	adds	r2, #67	; 0x43
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	7011      	strb	r1, [r2, #0]
 8005cc6:	e7c1      	b.n	8005c4c <_printf_common+0x4c>
 8005cc8:	0022      	movs	r2, r4
 8005cca:	2301      	movs	r3, #1
 8005ccc:	9901      	ldr	r1, [sp, #4]
 8005cce:	9800      	ldr	r0, [sp, #0]
 8005cd0:	9f08      	ldr	r7, [sp, #32]
 8005cd2:	321a      	adds	r2, #26
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d0e6      	beq.n	8005ca8 <_printf_common+0xa8>
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7d1      	b.n	8005c82 <_printf_common+0x82>
	...

08005ce0 <_printf_i>:
 8005ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce2:	b08b      	sub	sp, #44	; 0x2c
 8005ce4:	9206      	str	r2, [sp, #24]
 8005ce6:	000a      	movs	r2, r1
 8005ce8:	3243      	adds	r2, #67	; 0x43
 8005cea:	9307      	str	r3, [sp, #28]
 8005cec:	9005      	str	r0, [sp, #20]
 8005cee:	9204      	str	r2, [sp, #16]
 8005cf0:	7e0a      	ldrb	r2, [r1, #24]
 8005cf2:	000c      	movs	r4, r1
 8005cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cf6:	2a78      	cmp	r2, #120	; 0x78
 8005cf8:	d809      	bhi.n	8005d0e <_printf_i+0x2e>
 8005cfa:	2a62      	cmp	r2, #98	; 0x62
 8005cfc:	d80b      	bhi.n	8005d16 <_printf_i+0x36>
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d100      	bne.n	8005d04 <_printf_i+0x24>
 8005d02:	e0be      	b.n	8005e82 <_printf_i+0x1a2>
 8005d04:	497c      	ldr	r1, [pc, #496]	; (8005ef8 <_printf_i+0x218>)
 8005d06:	9103      	str	r1, [sp, #12]
 8005d08:	2a58      	cmp	r2, #88	; 0x58
 8005d0a:	d100      	bne.n	8005d0e <_printf_i+0x2e>
 8005d0c:	e093      	b.n	8005e36 <_printf_i+0x156>
 8005d0e:	0026      	movs	r6, r4
 8005d10:	3642      	adds	r6, #66	; 0x42
 8005d12:	7032      	strb	r2, [r6, #0]
 8005d14:	e022      	b.n	8005d5c <_printf_i+0x7c>
 8005d16:	0010      	movs	r0, r2
 8005d18:	3863      	subs	r0, #99	; 0x63
 8005d1a:	2815      	cmp	r0, #21
 8005d1c:	d8f7      	bhi.n	8005d0e <_printf_i+0x2e>
 8005d1e:	f7fa f9f9 	bl	8000114 <__gnu_thumb1_case_shi>
 8005d22:	0016      	.short	0x0016
 8005d24:	fff6001f 	.word	0xfff6001f
 8005d28:	fff6fff6 	.word	0xfff6fff6
 8005d2c:	001ffff6 	.word	0x001ffff6
 8005d30:	fff6fff6 	.word	0xfff6fff6
 8005d34:	fff6fff6 	.word	0xfff6fff6
 8005d38:	003600a3 	.word	0x003600a3
 8005d3c:	fff60083 	.word	0xfff60083
 8005d40:	00b4fff6 	.word	0x00b4fff6
 8005d44:	0036fff6 	.word	0x0036fff6
 8005d48:	fff6fff6 	.word	0xfff6fff6
 8005d4c:	0087      	.short	0x0087
 8005d4e:	0026      	movs	r6, r4
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	3642      	adds	r6, #66	; 0x42
 8005d54:	1d11      	adds	r1, r2, #4
 8005d56:	6019      	str	r1, [r3, #0]
 8005d58:	6813      	ldr	r3, [r2, #0]
 8005d5a:	7033      	strb	r3, [r6, #0]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0a2      	b.n	8005ea6 <_printf_i+0x1c6>
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	6809      	ldr	r1, [r1, #0]
 8005d64:	1d02      	adds	r2, r0, #4
 8005d66:	060d      	lsls	r5, r1, #24
 8005d68:	d50b      	bpl.n	8005d82 <_printf_i+0xa2>
 8005d6a:	6805      	ldr	r5, [r0, #0]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	da03      	bge.n	8005d7a <_printf_i+0x9a>
 8005d72:	232d      	movs	r3, #45	; 0x2d
 8005d74:	9a04      	ldr	r2, [sp, #16]
 8005d76:	426d      	negs	r5, r5
 8005d78:	7013      	strb	r3, [r2, #0]
 8005d7a:	4b5f      	ldr	r3, [pc, #380]	; (8005ef8 <_printf_i+0x218>)
 8005d7c:	270a      	movs	r7, #10
 8005d7e:	9303      	str	r3, [sp, #12]
 8005d80:	e01b      	b.n	8005dba <_printf_i+0xda>
 8005d82:	6805      	ldr	r5, [r0, #0]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	0649      	lsls	r1, r1, #25
 8005d88:	d5f1      	bpl.n	8005d6e <_printf_i+0x8e>
 8005d8a:	b22d      	sxth	r5, r5
 8005d8c:	e7ef      	b.n	8005d6e <_printf_i+0x8e>
 8005d8e:	680d      	ldr	r5, [r1, #0]
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	1d08      	adds	r0, r1, #4
 8005d94:	6018      	str	r0, [r3, #0]
 8005d96:	062e      	lsls	r6, r5, #24
 8005d98:	d501      	bpl.n	8005d9e <_printf_i+0xbe>
 8005d9a:	680d      	ldr	r5, [r1, #0]
 8005d9c:	e003      	b.n	8005da6 <_printf_i+0xc6>
 8005d9e:	066d      	lsls	r5, r5, #25
 8005da0:	d5fb      	bpl.n	8005d9a <_printf_i+0xba>
 8005da2:	680d      	ldr	r5, [r1, #0]
 8005da4:	b2ad      	uxth	r5, r5
 8005da6:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <_printf_i+0x218>)
 8005da8:	2708      	movs	r7, #8
 8005daa:	9303      	str	r3, [sp, #12]
 8005dac:	2a6f      	cmp	r2, #111	; 0x6f
 8005dae:	d000      	beq.n	8005db2 <_printf_i+0xd2>
 8005db0:	3702      	adds	r7, #2
 8005db2:	0023      	movs	r3, r4
 8005db4:	2200      	movs	r2, #0
 8005db6:	3343      	adds	r3, #67	; 0x43
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	60a3      	str	r3, [r4, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	db03      	blt.n	8005dca <_printf_i+0xea>
 8005dc2:	2104      	movs	r1, #4
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	438a      	bics	r2, r1
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	d102      	bne.n	8005dd4 <_printf_i+0xf4>
 8005dce:	9e04      	ldr	r6, [sp, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00c      	beq.n	8005dee <_printf_i+0x10e>
 8005dd4:	9e04      	ldr	r6, [sp, #16]
 8005dd6:	0028      	movs	r0, r5
 8005dd8:	0039      	movs	r1, r7
 8005dda:	f7fa fa2b 	bl	8000234 <__aeabi_uidivmod>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	3e01      	subs	r6, #1
 8005de2:	5c5b      	ldrb	r3, [r3, r1]
 8005de4:	7033      	strb	r3, [r6, #0]
 8005de6:	002b      	movs	r3, r5
 8005de8:	0005      	movs	r5, r0
 8005dea:	429f      	cmp	r7, r3
 8005dec:	d9f3      	bls.n	8005dd6 <_printf_i+0xf6>
 8005dee:	2f08      	cmp	r7, #8
 8005df0:	d109      	bne.n	8005e06 <_printf_i+0x126>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	07db      	lsls	r3, r3, #31
 8005df6:	d506      	bpl.n	8005e06 <_printf_i+0x126>
 8005df8:	6862      	ldr	r2, [r4, #4]
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	dc02      	bgt.n	8005e06 <_printf_i+0x126>
 8005e00:	2330      	movs	r3, #48	; 0x30
 8005e02:	3e01      	subs	r6, #1
 8005e04:	7033      	strb	r3, [r6, #0]
 8005e06:	9b04      	ldr	r3, [sp, #16]
 8005e08:	1b9b      	subs	r3, r3, r6
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	9b07      	ldr	r3, [sp, #28]
 8005e0e:	0021      	movs	r1, r4
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	9805      	ldr	r0, [sp, #20]
 8005e14:	9b06      	ldr	r3, [sp, #24]
 8005e16:	aa09      	add	r2, sp, #36	; 0x24
 8005e18:	f7ff fef2 	bl	8005c00 <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d147      	bne.n	8005eb0 <_printf_i+0x1d0>
 8005e20:	2001      	movs	r0, #1
 8005e22:	4240      	negs	r0, r0
 8005e24:	b00b      	add	sp, #44	; 0x2c
 8005e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e28:	2220      	movs	r2, #32
 8005e2a:	6809      	ldr	r1, [r1, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	6022      	str	r2, [r4, #0]
 8005e30:	2278      	movs	r2, #120	; 0x78
 8005e32:	4932      	ldr	r1, [pc, #200]	; (8005efc <_printf_i+0x21c>)
 8005e34:	9103      	str	r1, [sp, #12]
 8005e36:	0021      	movs	r1, r4
 8005e38:	3145      	adds	r1, #69	; 0x45
 8005e3a:	700a      	strb	r2, [r1, #0]
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	c920      	ldmia	r1!, {r5}
 8005e42:	0610      	lsls	r0, r2, #24
 8005e44:	d402      	bmi.n	8005e4c <_printf_i+0x16c>
 8005e46:	0650      	lsls	r0, r2, #25
 8005e48:	d500      	bpl.n	8005e4c <_printf_i+0x16c>
 8005e4a:	b2ad      	uxth	r5, r5
 8005e4c:	6019      	str	r1, [r3, #0]
 8005e4e:	07d3      	lsls	r3, r2, #31
 8005e50:	d502      	bpl.n	8005e58 <_printf_i+0x178>
 8005e52:	2320      	movs	r3, #32
 8005e54:	4313      	orrs	r3, r2
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	2710      	movs	r7, #16
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	d1a9      	bne.n	8005db2 <_printf_i+0xd2>
 8005e5e:	2220      	movs	r2, #32
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	4393      	bics	r3, r2
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	e7a4      	b.n	8005db2 <_printf_i+0xd2>
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	680d      	ldr	r5, [r1, #0]
 8005e6c:	1d10      	adds	r0, r2, #4
 8005e6e:	6949      	ldr	r1, [r1, #20]
 8005e70:	6018      	str	r0, [r3, #0]
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	062e      	lsls	r6, r5, #24
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0x19c>
 8005e78:	6019      	str	r1, [r3, #0]
 8005e7a:	e002      	b.n	8005e82 <_printf_i+0x1a2>
 8005e7c:	066d      	lsls	r5, r5, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0x198>
 8005e80:	8019      	strh	r1, [r3, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	9e04      	ldr	r6, [sp, #16]
 8005e86:	6123      	str	r3, [r4, #16]
 8005e88:	e7c0      	b.n	8005e0c <_printf_i+0x12c>
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	1d11      	adds	r1, r2, #4
 8005e8e:	6019      	str	r1, [r3, #0]
 8005e90:	6816      	ldr	r6, [r2, #0]
 8005e92:	2100      	movs	r1, #0
 8005e94:	0030      	movs	r0, r6
 8005e96:	6862      	ldr	r2, [r4, #4]
 8005e98:	f000 f858 	bl	8005f4c <memchr>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d001      	beq.n	8005ea4 <_printf_i+0x1c4>
 8005ea0:	1b80      	subs	r0, r0, r6
 8005ea2:	6060      	str	r0, [r4, #4]
 8005ea4:	6863      	ldr	r3, [r4, #4]
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9a04      	ldr	r2, [sp, #16]
 8005eac:	7013      	strb	r3, [r2, #0]
 8005eae:	e7ad      	b.n	8005e0c <_printf_i+0x12c>
 8005eb0:	0032      	movs	r2, r6
 8005eb2:	6923      	ldr	r3, [r4, #16]
 8005eb4:	9906      	ldr	r1, [sp, #24]
 8005eb6:	9805      	ldr	r0, [sp, #20]
 8005eb8:	9d07      	ldr	r5, [sp, #28]
 8005eba:	47a8      	blx	r5
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d0af      	beq.n	8005e20 <_printf_i+0x140>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	079b      	lsls	r3, r3, #30
 8005ec4:	d415      	bmi.n	8005ef2 <_printf_i+0x212>
 8005ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec8:	68e0      	ldr	r0, [r4, #12]
 8005eca:	4298      	cmp	r0, r3
 8005ecc:	daaa      	bge.n	8005e24 <_printf_i+0x144>
 8005ece:	0018      	movs	r0, r3
 8005ed0:	e7a8      	b.n	8005e24 <_printf_i+0x144>
 8005ed2:	0022      	movs	r2, r4
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	9906      	ldr	r1, [sp, #24]
 8005ed8:	9805      	ldr	r0, [sp, #20]
 8005eda:	9e07      	ldr	r6, [sp, #28]
 8005edc:	3219      	adds	r2, #25
 8005ede:	47b0      	blx	r6
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d09d      	beq.n	8005e20 <_printf_i+0x140>
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dcf0      	bgt.n	8005ed2 <_printf_i+0x1f2>
 8005ef0:	e7e9      	b.n	8005ec6 <_printf_i+0x1e6>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	e7f7      	b.n	8005ee6 <_printf_i+0x206>
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	080062bd 	.word	0x080062bd
 8005efc:	080062ce 	.word	0x080062ce

08005f00 <memmove>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	4288      	cmp	r0, r1
 8005f04:	d902      	bls.n	8005f0c <memmove+0xc>
 8005f06:	188b      	adds	r3, r1, r2
 8005f08:	4298      	cmp	r0, r3
 8005f0a:	d303      	bcc.n	8005f14 <memmove+0x14>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e007      	b.n	8005f20 <memmove+0x20>
 8005f10:	5c8b      	ldrb	r3, [r1, r2]
 8005f12:	5483      	strb	r3, [r0, r2]
 8005f14:	3a01      	subs	r2, #1
 8005f16:	d2fb      	bcs.n	8005f10 <memmove+0x10>
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	5ccc      	ldrb	r4, [r1, r3]
 8005f1c:	54c4      	strb	r4, [r0, r3]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1fa      	bne.n	8005f1a <memmove+0x1a>
 8005f24:	e7f8      	b.n	8005f18 <memmove+0x18>
	...

08005f28 <_sbrk_r>:
 8005f28:	2300      	movs	r3, #0
 8005f2a:	b570      	push	{r4, r5, r6, lr}
 8005f2c:	4d06      	ldr	r5, [pc, #24]	; (8005f48 <_sbrk_r+0x20>)
 8005f2e:	0004      	movs	r4, r0
 8005f30:	0008      	movs	r0, r1
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	f7fb ff46 	bl	8001dc4 <_sbrk>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d103      	bne.n	8005f44 <_sbrk_r+0x1c>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d000      	beq.n	8005f44 <_sbrk_r+0x1c>
 8005f42:	6023      	str	r3, [r4, #0]
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	20000a58 	.word	0x20000a58

08005f4c <memchr>:
 8005f4c:	b2c9      	uxtb	r1, r1
 8005f4e:	1882      	adds	r2, r0, r2
 8005f50:	4290      	cmp	r0, r2
 8005f52:	d101      	bne.n	8005f58 <memchr+0xc>
 8005f54:	2000      	movs	r0, #0
 8005f56:	4770      	bx	lr
 8005f58:	7803      	ldrb	r3, [r0, #0]
 8005f5a:	428b      	cmp	r3, r1
 8005f5c:	d0fb      	beq.n	8005f56 <memchr+0xa>
 8005f5e:	3001      	adds	r0, #1
 8005f60:	e7f6      	b.n	8005f50 <memchr+0x4>

08005f62 <memcpy>:
 8005f62:	2300      	movs	r3, #0
 8005f64:	b510      	push	{r4, lr}
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d100      	bne.n	8005f6c <memcpy+0xa>
 8005f6a:	bd10      	pop	{r4, pc}
 8005f6c:	5ccc      	ldrb	r4, [r1, r3]
 8005f6e:	54c4      	strb	r4, [r0, r3]
 8005f70:	3301      	adds	r3, #1
 8005f72:	e7f8      	b.n	8005f66 <memcpy+0x4>

08005f74 <_realloc_r>:
 8005f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f76:	0007      	movs	r7, r0
 8005f78:	000e      	movs	r6, r1
 8005f7a:	0014      	movs	r4, r2
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	d105      	bne.n	8005f8c <_realloc_r+0x18>
 8005f80:	0011      	movs	r1, r2
 8005f82:	f7ff fc49 	bl	8005818 <_malloc_r>
 8005f86:	0005      	movs	r5, r0
 8005f88:	0028      	movs	r0, r5
 8005f8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	d103      	bne.n	8005f98 <_realloc_r+0x24>
 8005f90:	f7ff fbd6 	bl	8005740 <_free_r>
 8005f94:	0025      	movs	r5, r4
 8005f96:	e7f7      	b.n	8005f88 <_realloc_r+0x14>
 8005f98:	f000 f81b 	bl	8005fd2 <_malloc_usable_size_r>
 8005f9c:	9001      	str	r0, [sp, #4]
 8005f9e:	4284      	cmp	r4, r0
 8005fa0:	d803      	bhi.n	8005faa <_realloc_r+0x36>
 8005fa2:	0035      	movs	r5, r6
 8005fa4:	0843      	lsrs	r3, r0, #1
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	d3ee      	bcc.n	8005f88 <_realloc_r+0x14>
 8005faa:	0021      	movs	r1, r4
 8005fac:	0038      	movs	r0, r7
 8005fae:	f7ff fc33 	bl	8005818 <_malloc_r>
 8005fb2:	1e05      	subs	r5, r0, #0
 8005fb4:	d0e8      	beq.n	8005f88 <_realloc_r+0x14>
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	0022      	movs	r2, r4
 8005fba:	429c      	cmp	r4, r3
 8005fbc:	d900      	bls.n	8005fc0 <_realloc_r+0x4c>
 8005fbe:	001a      	movs	r2, r3
 8005fc0:	0031      	movs	r1, r6
 8005fc2:	0028      	movs	r0, r5
 8005fc4:	f7ff ffcd 	bl	8005f62 <memcpy>
 8005fc8:	0031      	movs	r1, r6
 8005fca:	0038      	movs	r0, r7
 8005fcc:	f7ff fbb8 	bl	8005740 <_free_r>
 8005fd0:	e7da      	b.n	8005f88 <_realloc_r+0x14>

08005fd2 <_malloc_usable_size_r>:
 8005fd2:	1f0b      	subs	r3, r1, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1f18      	subs	r0, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da01      	bge.n	8005fe0 <_malloc_usable_size_r+0xe>
 8005fdc:	580b      	ldr	r3, [r1, r0]
 8005fde:	18c0      	adds	r0, r0, r3
 8005fe0:	4770      	bx	lr
	...

08005fe4 <_init>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr

08005ff0 <_fini>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr
