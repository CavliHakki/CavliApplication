/*
 * C16QS.c
 *
 *  Created on: Jan 26, 2024
 *      Author: hk
 */
#include "C16QS.h"

Step_e StepStatus = step_pwrkey;
uint8_t SessionID = 0;

void PowerKeyControl(Status_e sts) {
	if (sts == On) {
		HAL_GPIO_WritePin(PowerKey_GPIO_Port, PowerKey_Pin, GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(PowerKey_GPIO_Port, PowerKey_Pin, GPIO_PIN_RESET);
	}
}

void PowerKeyFunction(void) {
	PowerKeyControl(On);
	HAL_Delay(100);
	PowerKeyControl(Off);
}

void RstKeyControl(Status_e sts) {
	if (sts == On) {
		HAL_GPIO_WritePin(RstKey_GPIO_Port, RstKey_Pin, GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(RstKey_GPIO_Port, RstKey_Pin, GPIO_PIN_RESET);
	}
}

void ResetKeyFunction(void) {
	RstKeyControl(On);
	HAL_Delay(100);
	RstKeyControl(Off);
}

void Echo_Disable(void) {
	char buf[20];
	uint16_t size = 0;
	sprintf(buf, "ATE0\r\n");
	size = strlen(buf);
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
	HAL_Delay(500);
}

void Clear_Buffer(char *buf, uint16_t len) {
	uint16_t i = 0;
	for (i = 0; i < len; i++) {
		buf[i] = 0;
	}
}

ErrorStatus Alive_Control(void) {
	char buf[20];
	char rxBuf[20];
	uint8_t i = 0;
	uint16_t size = 0;

	Clear_Buffer(buf, 20);
	Clear_Buffer(rxBuf, 20);

	sprintf(buf, "AT\r\n");
	size = strlen(buf);
	C16QS_Serial_Flush_Queue(&C16QS_Buf);
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
	HAL_Delay(500);

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
	for (i = 0; i < size; i++) {
		rxBuf[i] = C16QS_Get_Data_Byte();
	}

	if (Control_OK_Message(rxBuf) == ERROR)
		return ERROR;

	return SUCCESS;
}

ErrorStatus Control_OK_Message(char *buf) {
	int result = -1;
	result = strncmp(buf, "\r\nOK\r\n", strlen("\r\nOK\r\n"));
	if (result == 0)
		return SUCCESS;

	return ERROR;
}

LogicStatus_e GPIO7_Status_Control(void) {
	char buf[20];
	char rxBuf[20];
	uint8_t i = 0;
	uint16_t size = 0;
	LogicStatus_e status;

	Clear_Buffer(buf, 20);
	Clear_Buffer(rxBuf, 20);

	sprintf(buf, "AT+GPSET?\r\n");
	size = strlen(buf);
	C16QS_Serial_Flush_Queue(&C16QS_Buf);
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, size, 10);
	HAL_Delay(500);

	size = C16QS_Serial_Get_Item_Count_in_Queue(&C16QS_Buf);
	for (i = 0; i < size; i++) {
		rxBuf[i] = C16QS_Get_Data_Byte();
	}

	status = Control_GPIO7_Status_Message(rxBuf);
	return status;
}

LogicStatus_e Control_GPIO7_Status_Message(char *buf) {
	int result = -1;
	result = strncmp(buf, "\r\n+GPSET: 0\r\n\r\nOK\r\n",
			strlen("\r\n+GPSET: 0\r\n\r\nOK\r\n"));
	if (result == 0)
		return LogicLow;

	result = strncmp(buf, "\r\n+GPSET: 1\r\n\r\nOK\r\n",
			strlen("\r\n+GPSET: 1\r\n\r\nOK\r\n"));
	if (result == 0)
		return LogicHigh;
}

/* TCP TRANSPARAN MOD UYGULAMASI */
void C16QS_GPIO7_Sequence(void) {

	switch (StepStatus) {
	case step_pwrkey:
		PowerKeyFunction();
		HAL_Delay(500);
		StepStatus = step_rst;
		break;

	case step_rst:
		ResetKeyFunction();
		StepStatus = step_echo_dis;
		break;

	case step_echo_dis:
		Echo_Disable();
		StepStatus = step_alive_control;
		break;

	case step_alive_control:
		if (Alive_Control() == ERROR)
			StepStatus = step_pwrkey;
		else
			StepStatus = step_gpio_status_control;
		break;

	case step_gpio_status_control:
		if (GPIO7_Status_Control() == LogicHigh)
			StepStatus = step_gpio7_set_low;
		else
			StepStatus = step_gpio7_set_high;
		break;

	default:
		break;
	}

}
